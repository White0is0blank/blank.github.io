<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue</title>
      <link href="/2024/08/15/Vue/"/>
      <url>/2024/08/15/Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p><code>vue</code>是一款用于构建用户界面的js框架。它基于html、css和js构建。(构建用户界面的渐进式框架)</p><h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><p>Vue的模版使用<code>&lt;template&gt;</code>标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="API风格"><a href="#API风格" class="headerlink" title="API风格"></a>API风格</h3><p>Vue的组件可以按两种不同的风格书写：<code>选项式API</code>和<code>组合式API</code></p>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2024/08/10/6%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2024/08/10/6%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-08-10</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/description/">LeetCode-144二叉树的前序遍历</a></p><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/description/">LeetCode-94二叉树的中序遍历</a></p><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/">LeetCode-145二叉树的后序遍历</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-08-13</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/description/">LeetCode-102二叉树的层序遍历</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-08-14</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/invert-binary-tree/description/">LeetCode-226翻转二叉树</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-08-15</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/symmetric-tree/description/"> LeetCode-101对称二叉树</a></p><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/">LeetCode-104二叉树的最大深度</a></p><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/">LeetCode-111二叉树的最小深度</a></p></div></div></div><h2 id="二叉树理论"><a href="#二叉树理论" class="headerlink" title="二叉树理论"></a>二叉树理论</h2><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><blockquote><p> 满二叉树 </p><blockquote><p> <img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240809103742.png" style="zoom:50%;" /></p><p>节点个数：2<sup>k</sup>-1</p></blockquote><p>完全二叉树</p><blockquote><p>除了底层以外都是满的，但是底层是连续的（从左到右）</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240809105203.png" style="zoom:67%;" /></p><p><strong>满二叉树一定是完全二叉树</strong></p></blockquote><p>二叉搜索树</p><blockquote><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240809104848.png" style="zoom:50%;" /></p><p>左子树小于节点，右子树大于节点（左右子树依旧满足）</p></blockquote><p>平衡二叉搜索树</p><blockquote><p>左右子树高度差不超过1</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240809105509.png" alt=""></p><p>是有序的</p></blockquote></blockquote><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><h4 id="链性存储"><a href="#链性存储" class="headerlink" title="链性存储"></a>链性存储</h4><p>左右指针指向左右节点</p><h4 id="线性存储"><a href="#线性存储" class="headerlink" title="线性存储"></a>线性存储</h4><p>从左到右由0开始编号，按顺序存储到数组中</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240809103742.png" style="zoom:50%;" /></p><blockquote><p>节点：i</p><p>左子节点：2i-1</p><p>右子节点：2i+1</p></blockquote><h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><h4 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h4><p>前、中、后序遍历</p><h4 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h4><p>层序遍历</p><h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><blockquote><ol><li>确定递归函数的参数和返回值</li><li>确定终止条件</li><li>确定单层递归的逻辑</li></ol></blockquote><h3 id="leetcode-144二叉树的前序遍历"><a href="#leetcode-144二叉树的前序遍历" class="headerlink" title="leetcode-144二叉树的前序遍历"></a>leetcode-144二叉树的前序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; res,TreeNode* cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(cur-&gt;val);<span class="comment">//中</span></span><br><span class="line">        <span class="built_in">preorder</span>(res,cur-&gt;left);<span class="comment">//左</span></span><br><span class="line">        <span class="built_in">preorder</span>(res,cur-&gt;right);<span class="comment">//右</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">preorder</span>(res,root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="leetcode-94二叉树的中序遍历"><a href="#leetcode-94二叉树的中序遍历" class="headerlink" title="leetcode-94二叉树的中序遍历"></a>leetcode-94二叉树的中序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; res,TreeNode* cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(res,cur-&gt;left);<span class="comment">//左</span></span><br><span class="line">        res.<span class="built_in">push_back</span>(cur-&gt;val);<span class="comment">//中</span></span><br><span class="line">        <span class="built_in">inorder</span>(res,cur-&gt;right);<span class="comment">//右</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">inorder</span>(res,root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="leetcode-145二叉树的后序遍历"><a href="#leetcode-145二叉树的后序遍历" class="headerlink" title="leetcode-145二叉树的后序遍历"></a>leetcode-145二叉树的后序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; res,TreeNode* cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">postorder</span>(res,cur-&gt;left);<span class="comment">//左</span></span><br><span class="line">        <span class="built_in">postorder</span>(res,cur-&gt;right);<span class="comment">//右</span></span><br><span class="line">        res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">postorder</span>(res,root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h2><p>利用栈来迭代进行遍历</p><h3 id="leetcode-144二叉树的前序遍历-1"><a href="#leetcode-144二叉树的前序遍历-1" class="headerlink" title="leetcode-144二叉树的前序遍历"></a>leetcode-144二叉树的前序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">        st.<span class="built_in">push</span>(root);<span class="comment">//将根节点push入栈</span></span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">           TreeNode* temp = st.<span class="built_in">top</span>();<span class="comment">//取出当前节点</span></span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(temp != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(temp-&gt;val);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            st.<span class="built_in">push</span>(temp-&gt;right);</span><br><span class="line">            st.<span class="built_in">push</span>(temp-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811170126.png" alt=""></p><h3 id="leetcode-145二叉树的后序遍历-1"><a href="#leetcode-145二叉树的后序遍历-1" class="headerlink" title="leetcode-145二叉树的后序遍历"></a>leetcode-145二叉树的后序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* temp = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(temp != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(temp-&gt;val);<span class="comment">//中</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            st.<span class="built_in">push</span>(temp-&gt;left);<span class="comment">//左</span></span><br><span class="line">            st.<span class="built_in">push</span>(temp-&gt;right);<span class="comment">//右</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811170358.png" alt=""></p><h3 id="leetcode-94二叉树的中序遍历-1"><a href="#leetcode-94二叉树的中序遍历-1" class="headerlink" title="leetcode-94二叉树的中序遍历"></a>leetcode-94二叉树的中序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">nullptr</span> || !st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240812134355.png" alt=""></p><h2 id="层序遍历（广搜）"><a href="#层序遍历（广搜）" class="headerlink" title="层序遍历（广搜）"></a>层序遍历（广搜）</h2><h3 id="leetcode-102二叉树的层序遍历"><a href="#leetcode-102二叉树的层序遍历" class="headerlink" title="leetcode-102二叉树的层序遍历"></a>leetcode-102二叉树的层序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">nullptr</span>) que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;<span class="comment">//遍历每一层的元素</span></span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();<span class="comment">//每一层元素的个数</span></span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">            <span class="keyword">while</span>(size--)&#123;</span><br><span class="line">                TreeNode* temp = que.<span class="built_in">front</span>();</span><br><span class="line">                v.<span class="built_in">push_back</span>(temp-&gt;val);</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(temp-&gt;left != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    que.<span class="built_in">push</span>(temp-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(temp-&gt;right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    que.<span class="built_in">push</span>(temp-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240813125027.png" alt=""></p><h2 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h2><p>交换指针而不是交换数值</p><h3 id="leetcode-266翻转二叉树"><a href="#leetcode-266翻转二叉树" class="headerlink" title="leetcode-266翻转二叉树"></a>leetcode-266翻转二叉树</h3><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240814114905.png" alt=""></p><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240814115112.png" alt=""></p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == nul lptr) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240814115554.png" alt=""></p><h2 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h2><h3 id="leetcode-101对称二叉树"><a href="#leetcode-101对称二叉树" class="headerlink" title="leetcode-101对称二叉树"></a>leetcode-101对称二叉树</h3><p>这里只能使用后续遍历，因为需要先确定左右子节点是否相等才能，对当前节点是否符合要求</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(TreeNode* right,TreeNode* left)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">nullptr</span> &amp;&amp; right != <span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left != <span class="literal">nullptr</span> &amp;&amp; right == <span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left == <span class="literal">nullptr</span> &amp;&amp; right == <span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left-&gt;val != right-&gt;val)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">bool</span> lf = <span class="built_in">compare</span>(left-&gt;left,right-&gt;right);<span class="comment">//左</span></span><br><span class="line">        <span class="type">bool</span> rg = <span class="built_in">compare</span>(left-&gt;right,right-&gt;left);<span class="comment">//右</span></span><br><span class="line">        <span class="keyword">return</span> lf &amp;&amp; rg;<span class="comment">//中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">compare</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240815145738.png" alt=""></p><h2 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h2><p><strong>深度</strong>：根节点的深度为1，二叉树中任意一个节点到根节点的距离叫做深度（<strong>前序遍历</strong>）</p><p><strong>高度</strong>：二叉树中任意一个节点到叶子节点的距离（<strong>后序遍历</strong>）</p><p>根节点的高度就是二叉树的最大深度</p><h3 id="leetcode-104二叉树的最大深度"><a href="#leetcode-104二叉树的最大深度" class="headerlink" title="leetcode-104二叉树的最大深度"></a>leetcode-104二叉树的最大深度</h3><p>利用的后续遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(TreeNode* node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left_height = <span class="built_in">getHeight</span>(node-&gt;left);<span class="comment">//左</span></span><br><span class="line">        <span class="type">int</span> right_height = <span class="built_in">getHeight</span>(node-&gt;right);<span class="comment">//右</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(left_height,right_height);<span class="comment">//中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getHeight</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h2><p>根节点的高度就是二叉树的最小深度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(TreeNode* node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left_height = <span class="built_in">getHeight</span>(node-&gt;left);</span><br><span class="line">        <span class="type">int</span> right_height = <span class="built_in">getHeight</span>(node-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left == <span class="literal">nullptr</span> &amp;&amp; node-&gt;right != <span class="literal">nullptr</span>) <span class="keyword">return</span> right_height<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;left != <span class="literal">nullptr</span> &amp;&amp; node-&gt;right == <span class="literal">nullptr</span>) <span class="keyword">return</span> left_height<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(left_height,right_height)<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getHeight</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240815154720.png" alt=""></p><h2 id="二叉树节点数量"><a href="#二叉树节点数量" class="headerlink" title="二叉树节点数量"></a>二叉树节点数量</h2><h3 id="leetcode-222完全二叉树的节点个数"><a href="#leetcode-222完全二叉树的节点个数" class="headerlink" title="leetcode-222完全二叉树的节点个数"></a>leetcode-222完全二叉树的节点个数</h3><h4 id="普通二叉树"><a href="#普通二叉树" class="headerlink" title="普通二叉树"></a>普通二叉树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left_node = <span class="built_in">countNodes</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right_node = <span class="built_in">countNodes</span>(root-&gt;right);</span><br><span class="line">        <span class="type">int</span> res = left_node+right_node + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        TreeNode* left = root-&gt;left;</span><br><span class="line">        TreeNode* right = root-&gt;right;</span><br><span class="line">        <span class="type">int</span> left_len = <span class="number">0</span>, right_len = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环判断左右子树的高度</span></span><br><span class="line">        <span class="keyword">while</span>(left)&#123;</span><br><span class="line">            left = left-&gt;left;</span><br><span class="line">            left_len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(right)&#123;</span><br><span class="line">            right = right-&gt;right;</span><br><span class="line">            right_len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果满足完全二叉树，就可以使用公式</span></span><br><span class="line">        <span class="keyword">if</span>(left_len == right_len)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">2</span> &lt;&lt; left_len) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不满足，就按照普通的二叉树来统计</span></span><br><span class="line">        <span class="type">int</span> left_node = <span class="built_in">countNodes</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right_node = <span class="built_in">countNodes</span>(root-&gt;right);</span><br><span class="line">        <span class="type">int</span> res = left_node+right_node + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 和算法斗志斗勇的日子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2024/08/09/C++/"/>
      <url>/2024/08/09/C++/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h1 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h1><p>运行时文件配置</p><p><strong>c_cpp_properties.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;windows-gcc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/Software/mingw64/bin/g++.exe&quot;</span><span class="punctuation">,</span><span class="comment">/*g++的位置*/</span></span><br><span class="line">      <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;default&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;default&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;windows-gcc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;compilerArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++ Runner: Debug Session&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Software\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span><span class="comment">/*gdb的位置*/</span></span><br><span class="line">      <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>tasks.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/Software/mingw64/bin/g++.exe&quot;</span><span class="punctuation">,</span><span class="comment">/*g++的路径*/</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-fdiagnostics-color=always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-I&quot;</span><span class="punctuation">,</span> <span class="comment">/*增加*/</span></span><br><span class="line">                <span class="string">&quot;D:\\Stu\\C++\\C_C++\\output&quot;</span><span class="punctuation">,</span> <span class="comment">/*当前项目所在的文件夹*/</span></span><br><span class="line">                <span class="string">&quot;-std=c++17&quot;</span> <span class="comment">/*增加*/</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/Software/mingw64/bin&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;调试器生成的任务。&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>F5运行程序</strong></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240809225806.png" alt=""></p><h4 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//整型</span></span><br><span class="line">    <span class="number">21</span>;</span><br><span class="line">    <span class="comment">//实型</span></span><br><span class="line">    <span class="number">1.2</span>;</span><br><span class="line">    <span class="comment">//字符</span></span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="comment">//字符串</span></span><br><span class="line">    <span class="string">&quot;ddd&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h4><p>给常量取个名字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 标识符 常量</span></span><br></pre></td></tr></table></figure><h2 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h2><p>标识符</p><blockquote><p>①只允许字母、数字、下划线组合（数字不能开头）</p><p>②不可使用关键字</p></blockquote><p>符号常量：英文字母全部大写</p><p>变量：大小写组合</p><blockquote><p>下划线命名：变量</p><p>小驼峰（除了第一个单词首字母不大写）：变量、函数</p><p>大驼峰：类名</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>支持这种变量赋值<code>int c = 9,a = 10,b = 100;</code></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p><code>sizeof()</code>操作符，看变量占用字节数</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240810130032.png" alt=""></p><p>有无符号数字</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811171001.png" alt=""></p><p>无符号的快捷写法</p><p>u_short(short)、u_int(int)、u_long(long)、u_int64(64位无符号)</p><p>此时需要引入<code>windows.h</code>头文件</p><h3 id="实型"><a href="#实型" class="headerlink" title="实型"></a>实型</h3><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811204909.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> num1 = <span class="number">1234567890</span>; </span><br><span class="line">cout &lt;&lt; num1 &lt;&lt; endl;<span class="comment">//直接打印1.23457e+09，利用的科学计数法</span></span><br><span class="line">cout &lt;&lt; fixed;<span class="comment">//设置位小数显示</span></span><br><span class="line">cout.<span class="built_in">width</span>(<span class="number">20</span>);<span class="comment">//设置显示的最大宽度（最大位数）</span></span><br><span class="line">cout &lt;&lt; num1 &lt;&lt; endl;<span class="comment">//1234567936.000000（只能维持7位的精度，计算位数把小数点包括在内从左到右）</span></span><br></pre></td></tr></table></figure><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811211311.png" alt=""></p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>ASCII表中字符分为两类：非打印控制字符、打印字符</p><ul><li>非打印控制字符：无法打印出形态，但是可以用于表示各种控制功能，如换行、制表等</li></ul><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811212242.png" alt=""></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>C语言风格</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;777&quot;</span>;<span class="comment">//字符数组的形式，这种形式无法进行二次直接赋值</span></span><br><span class="line"><span class="type">char</span> *b = <span class="string">&quot;777&quot;</span>;<span class="comment">//指针形式</span></span><br></pre></td></tr></table></figure><p><strong>C++风格</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string c =<span class="string">&quot;777&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p> 字符串拼接用”+”即可，如果想要拼接其他类型使用内置函数<code>to_string()</code></p></blockquote><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p><strong>bool</strong></p><h3 id="类型确定"><a href="#类型确定" class="headerlink" title="类型确定"></a>类型确定</h3><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811210456.png" alt=""></p><h4 id="常量后缀"><a href="#常量后缀" class="headerlink" title="常量后缀"></a>常量后缀</h4><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811210601.png" alt=""></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811220333.png" alt=""></p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811220416.png" alt=""></p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811220828.png" alt=""></p><p><strong>C语言风格字符串比较</strong>：<code>strcmp(s1,s2)</code></p><p><strong>C++风格</strong>：直接”==”就可以</p><blockquote><p>如果一个是C++风格一个是C语言风格也可以用”==”比较，只要有一个是C++风格即可</p></blockquote><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811221514.png" alt=""></p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p><code>产出bool结果的表达式?值1:值2</code></p><h2 id="if-switch"><a href="#if-switch" class="headerlink" title="if/switch"></a>if/switch</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">        <span class="keyword">case</span> expression_1:</span><br><span class="line">            code;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> expression_2:</span><br><span class="line">            code;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>枚举：本质上是一个<strong>被命名的整型常数的集合</strong></p><ul><li>在C\C++语言中它是一种基本数据类型</li><li>其主要作用是提高代码的可读性、可维护性和键入性</li><li>因为枚举可以将一些数字或字符串<strong>符号化</strong>，以此增强程序的可读性和可维护性</li></ul><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240811230137.png" alt=""></p><h2 id="while-do…while-for"><a href="#while-do…while-for" class="headerlink" title="while/do…while/for"></a>while/do…while/for</h2><p><code>rand()%100+1</code></p><blockquote><p>表示随机生成1~100之间的数</p></blockquote><h2 id="break-continue-goto"><a href="#break-continue-goto" class="headerlink" title="break/continue/goto"></a>break/continue/goto</h2><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>直接跳转到某个位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">goto</span> FLAGS;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    FLAGS:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;<span class="comment">//124</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240812201124.png" alt=""></p><p>一维数组名称的用途：</p><ol><li><p>可以统计整个数组在内存中的长度</p></li><li><p>可以获取数组在内存中的首地址</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; arr &lt;&lt; endl;<span class="comment">//获取首地址</span></span><br><span class="line">    cout &lt;&lt; &amp;arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">0x62fe00</span></span><br><span class="line"><span class="comment">0x62fe04</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240812211924.png" alt=""></p><p>二维数组名称的用途：</p><ol><li><p>查看二维数组所占内存空间</p></li><li><p>获取二维数组首地址</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] = </span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; arr &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">24</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">0x62fe00</span></span><br><span class="line"><span class="comment">0x62fe0c</span></span><br><span class="line"><span class="comment">0x62fe04</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数定义</p><ol><li>返回值类型</li><li>函数名</li><li>参数列表</li><li>函数体语句</li><li>return表达式</li></ol><h3 id="函数分文件编写"><a href="#函数分文件编写" class="headerlink" title="函数分文件编写"></a>函数分文件编写</h3><ol><li>创建后缀名为.h的头文件</li><li>创建后缀名为<code>.cpp</code>的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240812233721.png" alt=""></p><p><code>s1.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">s</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p><code>s1.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;s1.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">s</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b = &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>test.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;s1.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    b = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">s</span>(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上这种写法在vscode中会报错</p><p>①直接在s1.h中写下函数的完整定义，不用s.cpp函数定义源文件</p><p>②test.cpp添加一个引入<code>#include &quot;s1.cpp&quot;</code></p></blockquote><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针记录的地址</p><p>指针定义：<code>数据类型 * 指针变量名称</code></p><p>指针记录地址：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = &amp;a;</span><br></pre></td></tr></table></figure><p>使用指针（指针解引用）：<code>*p</code>(找到p指向的数据)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span>* b = &amp;a;</span><br><span class="line">    cout &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *b &lt;&lt; endl;</span><br><span class="line">    *b = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0x62fe14</span></span><br><span class="line"><span class="comment">0x62fe14</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>指针所占的内存空间大小：一般在32位系统下占内存为4，64位下占8（无论是什么数据类型的指针，都是一样的）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>*) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>*) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span> *) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span> *) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="空指针和野指针"><a href="#空指针和野指针" class="headerlink" title="空指针和野指针"></a>空指针和野指针</h3><h4 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h4><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途</strong>：初始化指针变量</p><p><strong>注意</strong>：空指针指向的内存是不可以访问的（0~255的内存编号是系统占用的不允许访问）</p><h4 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h4><p><strong>野指针</strong>：指针变量指向非法内存空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p=(<span class="type">int</span> *)<span class="number">0x1100</span>;<span class="comment">//未申请的空间，直接访问会有问题</span></span><br></pre></td></tr></table></figure><h3 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h3><ol><li>const修饰指针 —- 常量指针</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p = &amp;a;</span><br><span class="line">*p = <span class="number">20</span>;<span class="comment">//错误</span></span><br><span class="line">p = &amp;b;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure><blockquote><p>​    指针的指向可以修改，但是指针指向的值不允许修改</p></blockquote><ol><li>const修饰变量 —- 指针常量</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * <span class="type">const</span> p = &amp;a;</span><br><span class="line">*p = <span class="number">20</span>;<span class="comment">//正确</span></span><br><span class="line">p = &amp;b;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><blockquote><p>指针指向的值可以改，但指针的指向不可改</p></blockquote><ol><li>const既修饰指针，又修饰常量</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p = &amp;a;</span><br><span class="line">*p = <span class="number">20</span>;<span class="comment">//错误</span></span><br><span class="line">p = &amp;b;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><blockquote><p>指针指向的值和指向都不能修改</p></blockquote><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><p><strong>作用</strong>：利用指针访问数组中的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p=a;<span class="comment">//a的首地址</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;指针访问第一个元素&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    p++;<span class="comment">//指针向后偏移四个字节</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;指针访问第二个元素&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    p++;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;指针访问第三个元素&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针和函数"><a href="#指针和函数" class="headerlink" title="指针和函数"></a>指针和函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">2</span>,b = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">swap1</span>(a,b);</span><br><span class="line"><span class="built_in">swap2</span>(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure><ol><li>值传达</li></ol><blockquote><p>直接传入了值，仅仅形参发生变化，传入的实参没有任何的变化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ol><li>地址传递</li></ol><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="指针、数组、函数"><a href="#指针、数组、函数" class="headerlink" title="指针、数组、函数"></a>指针、数组、函数</h3><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>用户自定义的数据类型</p><p>TONGGUO </p><p>通过结构体创建变量的方式有三种</p><ul><li>struct结构体名 变量名</li></ul><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">s</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">…</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">s</span> s0;</span><br><span class="line">    s<span class="number">0.</span>a = <span class="number">2</span>;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>struct结构体名 变量名 = {成员1值，成员2值，…}</li></ul><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">s</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    string b;</span><br><span class="line">…</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">s</span> s1 = &#123;<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>定义结构体时顺便创建变量</li></ul><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">s</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">…</span><br><span class="line">&#125;s2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s<span class="number">2.</span>a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><p><strong>语法</strong>：<code>struct 结构体名 数组名[元素个数] = &#123;&#123;&#125;,&#123;&#125;,…,&#123;&#125;&#125;</code></p><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p><strong>作用</strong>：通过指针访问结构体中的成员</p><ul><li>利用操作符<code>-&gt;</code>可以通过结构体指针访问结构体属性</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    stu s = &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>&#125;;</span><br><span class="line">    stu *p = &amp;s;</span><br><span class="line">    cout &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;age &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体嵌套结构体"><a href="#结构体嵌套结构体" class="headerlink" title="结构体嵌套结构体"></a>结构体嵌套结构体</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    stu s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    teacher t = &#123;<span class="number">1</span>, <span class="string">&quot;wangwu&quot;</span>,&#123;<span class="string">&quot;hello&quot;</span>, <span class="number">20</span>&#125;&#125;;</span><br><span class="line">    cout &lt;&lt; t.id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t.name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t.s.name &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; t.s.age &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体做函数参数"><a href="#结构体做函数参数" class="headerlink" title="结构体做函数参数"></a>结构体做函数参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    stu s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(teacher* t)</span></span>&#123;<span class="comment">//值传递</span></span><br><span class="line">    cout &lt;&lt; t-&gt;id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t-&gt;s.name &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; t-&gt;s.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print1</span><span class="params">(teacher t)</span></span>&#123;<span class="comment">//地址传达</span></span><br><span class="line">    cout &lt;&lt; t.id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t.name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t.s.name &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; t.s.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    teacher t = &#123;<span class="number">1</span>, <span class="string">&quot;wangwu&quot;</span>,&#123;<span class="string">&quot;hello&quot;</span>, <span class="number">20</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">Print</span>(&amp;t);</span><br><span class="line">    <span class="built_in">Print1</span>(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体中的const"><a href="#结构体中的const" class="headerlink" title="结构体中的const"></a>结构体中的const</h3><p><strong>作用</strong>：防止误操作</p><p>值传递会新复制一个<code>副本</code>，地址传递不会是<code>直接引用</code>的，但是这种情况下会存在不小心将值<code>修改</code>的可能性，所以利用const<code>防止误操作</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    stu s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">const</span> teacher* t)</span></span>&#123;</span><br><span class="line">    <span class="comment">//t-&gt;id = 2;//报错，防止函数体中的误操作</span></span><br><span class="line">    cout &lt;&lt; t-&gt;id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t-&gt;s.name &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; t-&gt;s.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    teacher t = &#123;<span class="number">1</span>, <span class="string">&quot;wangwu&quot;</span>,&#123;<span class="string">&quot;hello&quot;</span>, <span class="number">20</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">Print</span>(&amp;t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h2><p>C++面向对象技术</p><h3 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h3><p>C++程序执行时，将内存大方向划分为4个区域</p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等。</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li></ul><p><strong>内存四区的意义</strong>：</p><p>不同区域存放的数据，赋予不同的生命周期，灵活编程</p><h4 id="程序运行前"><a href="#程序运行前" class="headerlink" title="程序运行前"></a>程序运行前</h4><p>程序编译后，生产了exe可执行程序，<strong>未执行程序前</strong>分为两个区域</p><p><strong>代码区：</strong></p><p>​        存放CPU执行的机器指令</p><p>​        代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，值需要在内存中有一份代码即可</p><p>​        代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p><p><strong>全局区：</strong></p><p>​        全局变量和静态变量存放在此</p><p>​        全局区还包含了常量区，字符串常量和其他常量也存放在此</p><p>​        <strong>该区域数据在程序结束后，由操作系统释放</strong></p><blockquote><p>全局变量：不在函数体内的变量</p><p>局部变量：在函数体内的变量<code>int a = 2;</code></p><p>常量：直接定义在代码中<code>&quot;a&quot;</code>或者是const修饰的</p><p>静态变量：在普通变量前加<code>static</code>，属于静态变量</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> d = <span class="number">40</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//普通局部变量</span></span><br><span class="line">    <span class="type">int</span>  a = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部变量地址：&quot;</span> &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//静态局部变量</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;静态变量地址：&quot;</span> &lt;&lt; &amp;b &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//全局变量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局变量地址：&quot;</span> &lt;&lt; &amp;c &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line">    <span class="comment">//字符串常量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串常量地址：&quot;</span> &lt;&lt; &amp;<span class="string">&quot;hello&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//const修饰的变量</span></span><br><span class="line">    <span class="comment">//const修饰的全局变量</span></span><br><span class="line">    cout &lt;&lt;  <span class="string">&quot;全局常量地址：&quot;</span> &lt;&lt; &amp;d &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//const修饰的局部变量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> e = <span class="number">50</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部常量地址：&quot;</span> &lt;&lt; &amp;e &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240814014057.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240814013956.png" alt=""></p><h4 id="程序运行后"><a href="#程序运行后" class="headerlink" title="程序运行后"></a>程序运行后</h4><p><strong>栈区</strong>：</p><p>​        由编译器自动分配释放，存放函数的参数，局部变量等</p><blockquote><p>不允许返回局部变量的地址</p></blockquote><p><strong>堆区</strong>：</p><p>​        由程序员分配释放，若程序员不释放，程序结束时由操作系统回收</p><p>​        在C++中主要利用<code>new</code>在堆区开辟内存，用<code>delete</code>手动释放</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> * <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> * p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);<span class="comment">//new返回的是一个地址</span></span><br><span class="line">   <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> * p = <span class="built_in">func</span>();</span><br><span class="line">   cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">delete</span> p;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new</code>开辟数组</p><p><code>new int[]</code></p><p>释放数组</p><p><code>delete[] arr</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> * arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];<span class="comment">//10代表有10个元素</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i  =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">       arr[i] = i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i  = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">       cout &lt;&lt;  arr[i]&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">delete</span>[] arr;<span class="comment">//释放数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">test</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="引用基本使用"><a href="#引用基本使用" class="headerlink" title="引用基本使用"></a>引用基本使用</h3><p><strong>作用</strong>：给变量取别名</p><p><strong>语法</strong>：<code>数据类型 &amp;别名 = 原名</code></p><blockquote><p>1.引用必须初始化</p><p>2.引用一旦初始化后，就不可以更改（一旦成为某一个的别名，就不能成为其他的别名）</p></blockquote><h3 id="引用做函数参数"><a href="#引用做函数参数" class="headerlink" title="引用做函数参数"></a>引用做函数参数</h3><p><strong>作用</strong>：函数传参时，可以利用引用技术让形参修饰实参</p><p><strong>优点</strong>：可以简化指针修改实参</p><p>以交换函数为例</p><blockquote><ol><li>值传递</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> temp = a;</span><br><span class="line">   a = b;</span><br><span class="line">   b = a;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;…</span><br><span class="line">&gt;<span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">&gt;<span class="built_in">swap</span>(a,b);</span><br><span class="line">&gt;…</span><br></pre></td></tr></table></figure><ol><li>地址传递</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> temp = *a;</span><br><span class="line">   *a = *b;</span><br><span class="line">   *b = temp;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;…</span><br><span class="line">&gt;<span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">&gt;<span class="built_in">swap</span>(&amp;a,&amp;b);</span><br><span class="line">&gt;…</span><br></pre></td></tr></table></figure><ol><li>引用传递</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> temp = a;</span><br><span class="line">   a = b;</span><br><span class="line">   b = a;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;…</span><br><span class="line">&gt;<span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">&gt;<span class="built_in">swap</span>(a,b);</span><br><span class="line">&gt;…</span><br></pre></td></tr></table></figure></blockquote><h3 id="引用做函数的返回值"><a href="#引用做函数的返回值" class="headerlink" title="引用做函数的返回值"></a>引用做函数的返回值</h3><p><strong>作用</strong>：</p><p>​            引用是可以作为函数的返回值存在的。</p><p>​            函数的调用可以作为左值存在。</p><blockquote><p>不可返回局部变量引用</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//静态变量，全局区</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> &amp;ref = <span class="built_in">test</span>();</span><br><span class="line">     cout &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">     <span class="built_in">test</span>() = <span class="number">20</span>;<span class="comment">//相当于做了一个a=20的操作，而ref已经作为了test()的别名，所以会跟着改变</span></span><br><span class="line">     cout &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用本质"><a href="#引用本质" class="headerlink" title="引用本质"></a>引用本质</h3><p><strong>本质</strong>：引用的本质在c++内部实现是一个指针常量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//自动转换为int* const ref = &amp;a;指针常量，指向不能改，说明为什么引用不可更改</span></span><br><span class="line">    <span class="type">int</span>&amp; ref = a;</span><br><span class="line">    ref = <span class="number">20</span>;<span class="comment">//内部发现ref是引用，自动帮我们转换为*ref = 20</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h3><p><strong>作用</strong>：常量引用主要用来修饰形参，防止误操作</p><p><code>const type&amp; val</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//int&amp; ref = 10;错误，引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>&amp; ref = <span class="number">10</span>;<span class="comment">//加入const就可以了，编译器优化代码</span></span><br><span class="line">    <span class="comment">//ref = 100; //加入const之后不能再修改变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b = <span class="number">20</span>,<span class="type">int</span> c = <span class="number">30</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">func</span>(<span class="number">10</span>,<span class="number">30</span>)&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">func</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值</li></ol><blockquote><p><code>int func(int a = 10,int b)</code>错误</p></blockquote><ol><li>函数声明有默认参数，函数实现就不能有默认参数</li></ol><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>,<span class="type">int</span> b = <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>,<span class="type">int</span> b = <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>,<span class="type">int</span> b = <span class="number">20</span>)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误</p></blockquote></blockquote><h3 id="函数占位参数"><a href="#函数占位参数" class="headerlink" title="函数占位参数"></a>函数占位参数</h3><p><strong>语法</strong>：<code>返回值类型 函数名（数据类型）&#123;&#125;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span>)</span></span>&#123;<span class="comment">//但是占位参数无法去到值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> = <span class="number">10</span>)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p><strong>作用</strong>：函数名可以相同，提高复用性</p><p><strong>条件</strong>：</p><ul><li>同一个作用域</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><blockquote><p>函数的返回值不可以作为函数重载的条件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a,<span class="type">int</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a,<span class="type">int</span> b)</span></span>&#123;&#125;<span class="comment">//这是错误的</span></span><br></pre></td></tr></table></figure></blockquote><ul><li>引用作为重载条件</li></ul><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">func</span>(a);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></blockquote><ul><li>函数重载碰到函数默认参数</li></ul><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b = <span class="number">10</span>)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>)<span class="comment">//既可以调用上面也可以调用下面，错误</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>封装、继承、多态</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> radius;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">calculateArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3.14</span>*radius*radius;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle c1;</span><br><span class="line">    c<span class="number">1.</span>radius=<span class="number">5</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Area of circle is &quot;</span>&lt;&lt;c<span class="number">1.</span><span class="built_in">calculateArea</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>封装</strong>：</p><p>访问权限：</p><div class="table-container"><table><thead><tr><th></th><th>权限</th><th>类外</th><th>类内</th><th>父类和子类</th></tr></thead><tbody><tr><td>public</td><td>公共</td><td>可以</td><td>可以</td><td></td></tr><tr><td>protected</td><td>保护</td><td>可以</td><td>不可以</td><td>子类可以访问父类</td></tr><tr><td>private</td><td>私有</td><td>可以</td><td>不可以</td><td>子类不可以访问父类</td></tr></tbody></table></div><h3 id="struct和class区别"><a href="#struct和class区别" class="headerlink" title="struct和class区别"></a>struct和class区别</h3><ul><li>struct默认权限为公共</li><li>class默认权限为私有</li></ul><h3 id="成员属性设置为私有"><a href="#成员属性设置为私有" class="headerlink" title="成员属性设置为私有"></a>成员属性设置为私有</h3><p>写<code>public</code>函数，然后设置、获取私有值</p>]]></content>
      
      
      <categories>
          
          <category> 和算法斗志斗勇的日子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列</title>
      <link href="/2024/07/31/5%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>/2024/07/31/5%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-31</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/description/">LeetCode-232用栈实现队列</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-08-01</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/description/">LeetCode-225用队列实现栈</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-08-04</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/valid-parentheses/description/">LeetCode-20有效的括号</a></p><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/description/">LeetCode-1047删除字符串中的所有相邻重复项</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-08-04</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/">LeetCode-150逆波兰表达式求值</a></p><p><a href="https://leetcode.cn/problems/sliding-window-maximum/description/">LeetCode-239滑动窗口最大值</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-08-04</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/description/">LeetCode-347前k个高频元素</a></p></div></div></div><h2 id="栈实现队列"><a href="#栈实现队列" class="headerlink" title="栈实现队列"></a>栈实现队列</h2><h3 id="leetcode-232用栈实现队列"><a href="#leetcode-232用栈实现队列" class="headerlink" title="leetcode-232用栈实现队列"></a>leetcode-232用栈实现队列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stackIn;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stackOut;</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        stackIn.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stackOut.<span class="built_in">empty</span>())&#123;<span class="comment">//当stackOut为空再往里面push入stackIn的数据</span></span><br><span class="line">            <span class="keyword">while</span>(!stackIn.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                stackOut.<span class="built_in">push</span>(stackIn.<span class="built_in">top</span>());</span><br><span class="line">                stackIn.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = stackOut.<span class="built_in">top</span>();</span><br><span class="line">        stackOut.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        stackOut.<span class="built_in">push</span>(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stackIn.<span class="built_in">empty</span>()&amp;&amp;stackOut.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;peek();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240731211403.png" alt=""></p><h2 id="队列实现栈"><a href="#队列实现栈" class="headerlink" title="队列实现栈"></a>队列实现栈</h2><h3 id="leetcode-225用队列实现栈"><a href="#leetcode-225用队列实现栈" class="headerlink" title="leetcode-225用队列实现栈"></a>leetcode-225用队列实现栈</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        que.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">while</span>(size-- != <span class="number">0</span>)&#123;</span><br><span class="line">            que.<span class="built_in">push</span>(que.<span class="built_in">front</span>());</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        que.<span class="built_in">push</span>(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> que.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack* obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240801133710.png" alt=""></p><h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><h3 id="leetcode-20有效的括号"><a href="#leetcode-20有效的括号" class="headerlink" title="leetcode-20有效的括号"></a>leetcode-20有效的括号</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span>) sta.<span class="built_in">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;&#123;&#x27;</span>) sta.<span class="built_in">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;[&#x27;</span>) sta.<span class="built_in">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; s[i] == sta.<span class="built_in">top</span>())&#123;</span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//判断的是当sta没有值，但是还有反括号的时候</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sta.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240804163034.png" alt=""></p><h2 id="删除字符串中的所有相邻重复项"><a href="#删除字符串中的所有相邻重复项" class="headerlink" title="删除字符串中的所有相邻重复项"></a>删除字符串中的所有相邻重复项</h2><h3 id="leetcode-1047删除字符串中的所有相邻重复项"><a href="#leetcode-1047删除字符串中的所有相邻重复项" class="headerlink" title="leetcode-1047删除字符串中的所有相邻重复项"></a>leetcode-1047删除字符串中的所有相邻重复项</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.<span class="built_in">empty</span>() || ch != str.<span class="built_in">back</span>())&#123;</span><br><span class="line">                str.<span class="built_in">push_back</span>(ch);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                str.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240804171159.png" alt=""></p><h2 id="逆波兰表达式求值"><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a>逆波兰表达式求值</h2><p>逆波兰表达式，也称为后缀表达式，是一种数学表达式的方法，其中位运算符位于操作数之后。不需要括号来明确表达式的优先级。</p><p>前缀表达式：(1+2)*(3+4)</p><p>后缀表达式：12+34+*</p><h3 id="leetcode-150逆波兰表达式求值"><a href="#leetcode-150逆波兰表达式求值" class="headerlink" title="leetcode-150逆波兰表达式求值"></a>leetcode-150逆波兰表达式求值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">long</span> <span class="type">long</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; tokens.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;+&quot;</span> ||tokens[i]== <span class="string">&quot;-&quot;</span> || tokens[i]== <span class="string">&quot;*&quot;</span> ||tokens[i] == <span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> nums1 = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> nums2 = nums.<span class="built_in">top</span>();</span><br><span class="line">                nums.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;+&quot;</span>)&#123;</span><br><span class="line">                    nums.<span class="built_in">push</span>(nums1+nums2);</span><br><span class="line">                &#125;<span class="keyword">if</span>(tokens[i] == <span class="string">&quot;-&quot;</span>)&#123;</span><br><span class="line">                    nums.<span class="built_in">push</span>(nums2-nums1);</span><br><span class="line">                &#125;<span class="keyword">if</span>(tokens[i] == <span class="string">&quot;*&quot;</span>)&#123;</span><br><span class="line">                    nums.<span class="built_in">push</span>(nums1*nums2);</span><br><span class="line">                &#125;<span class="keyword">if</span>(tokens[i] == <span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">                    nums.<span class="built_in">push</span>(nums2/nums1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums.<span class="built_in">push</span>(<span class="built_in">stoll</span>(tokens[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>输入：tokens = [“10”,”6”,”9”,”3”,”+”,”-11”,”<em>“,”/“,”</em>“,”17”,”+”,”5”,”+”]<br>输出：22<br>解释：该算式转化为常见的中缀算术表达式为：</p><p>((10 <em> (6 / ((9 + 3) </em> -11))) + 17) + 5<br>= ((10 <em> (6 / (12 </em> -11))) + 17) + 5<br>= ((10 <em> (6 / -132)) + 17) + 5<br>= ((10 </em> 0) + 17) + 5<br>= (0 + 17) + 5<br>= 17 + 5<br>= 22</p><h2 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h2><h3 id="leetcode-239滑动窗口最大值"><a href="#leetcode-239滑动窗口最大值" class="headerlink" title="leetcode-239滑动窗口最大值"></a>leetcode-239滑动窗口最大值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyQue</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!que.<span class="built_in">empty</span>() &amp;&amp; val == que.<span class="built_in">front</span>()) &#123;</span><br><span class="line">                que.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; val &gt; que.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                que.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            que.<span class="built_in">push_back</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> que.<span class="built_in">front</span>(); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        MyQue q;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i++)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(q.<span class="built_in">getMax</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = k;i &lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            q.<span class="built_in">pop</span>(nums[i-k]);</span><br><span class="line">            q.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            res.<span class="built_in">push_back</span>(q.<span class="built_in">getMax</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240807212316.png"/></p><h2 id="前k个高频元素"><a href="#前k个高频元素" class="headerlink" title="前k个高频元素"></a>前k个高频元素</h2><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p><strong>性质</strong></p><ul><li>堆是一个完全二叉树</li><li>堆序性：小根堆，大根堆</li></ul><p>堆存储：存储在一维数组中，左到右从0开始编号</p><p>&lt;img src=”<img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240808134619.png"/>“</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240808134909.png" alt=""></p><blockquote><p>节点下标为 i</p><p>左子节点下标为 2i+1</p><p>右子节点下标为 2i+2</p></blockquote><h4 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h4><p>数据带有优先级，优先级较高的元素先出队</p><p>优先级队列，底层使用堆这种数据结构实现，它把元素按完全二叉树的顺序存储方式存储在一个一维数组，称为大堆（或小堆）。根节点称为大根堆（小根堆）。</p><h3 id="leetcode-347前-K-个高频元素"><a href="#leetcode-347前-K-个高频元素" class="headerlink" title="leetcode-347前 K 个高频元素"></a>leetcode-347前 K 个高频元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">Mycompare</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; f, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; s)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> f.second &lt; s.second;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;  </span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; freqMap;  </span><br><span class="line"><span class="comment">//统计频率</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">            freqMap[num]++;  </span><br><span class="line">        &#125;  </span><br><span class="line">  <span class="comment">//建立大顶堆优先队列</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(&amp;Solution::Mycompare)&gt; <span class="built_in">pq</span>(&amp;Solution::Mycompare);  </span><br><span class="line">  <span class="comment">//将freqMap按照second的大小排成大顶堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : freqMap) &#123;  </span><br><span class="line">            pq.<span class="built_in">push</span>(pair);  </span><br><span class="line">        &#125;  </span><br><span class="line">  <span class="comment">//弹出前k个元素</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;  </span><br><span class="line">        <span class="keyword">while</span> (k-- &gt; <span class="number">0</span> &amp;&amp; !pq.<span class="built_in">empty</span>()) &#123;  </span><br><span class="line">            result.<span class="built_in">push_back</span>(pq.<span class="built_in">top</span>().first);</span><br><span class="line">            pq.<span class="built_in">pop</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 和算法斗志斗勇的日子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准备</title>
      <link href="/2024/07/30/Web%E5%87%86%E5%A4%87/"/>
      <url>/2024/07/30/Web%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="LANMP安装"><a href="#LANMP安装" class="headerlink" title="LANMP安装"></a>LANMP安装</h2><p>LANMP是指一组通常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是经常放在一起使用，拥有了越来越高的兼容性，共同组成了一个强大的Web应用程序平台。</p><ul><li>L：Linux，一类Unix计算机操作系统</li><li>A：Apache，网页服务器</li><li>N：Ngnix，高性能的HTTP和反向代理web服务器</li><li>M：Mysql，Mariadb等数据库管理系统或数据库服务器</li><li>P：PHP、Perl、Python等脚本语言</li></ul><p>LAMP：Linux+Apache+Mysql+PHP</p><p>LANMP：Linux+Apache+Nginx+Mysql+PHP</p><h6 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install apache2 -y</span><br></pre></td></tr></table></figure><h6 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mariadb mariadb-server -y</span><br></pre></td></tr></table></figure><p>如果E: Unable to locate package mariadb</p><p>安装软件如果换源了，要更新apt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update </span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mariadb-server -y</span><br></pre></td></tr></table></figure><h6 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install php8.2 </span><br></pre></td></tr></table></figure><p>查看当前php的版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v </span><br></pre></td></tr></table></figure><p>安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php-pear </span><br><span class="line">sudo apt-get install php8.2-curl </span><br><span class="line">sudo apt-get install php8.2-mysql</span><br><span class="line">sudo apt-get install libapache2-mod-php8.2 </span><br><span class="line">sudo apt-get install php8.2-cgi</span><br><span class="line">sudo apt-get install php8.2-gd</span><br></pre></td></tr></table></figure><p>查看所有的php包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep php</span><br></pre></td></tr></table></figure><h2 id="DVWA漏洞靶场部署"><a href="#DVWA漏洞靶场部署" class="headerlink" title="DVWA漏洞靶场部署"></a>DVWA漏洞靶场部署</h2><p><a href="https://zhuanlan.zhihu.com/p/637596118">配置DVWA</a></p><p><a href="https://blog.csdn.net/WZZ_2363173126/article/details/120707038">解决DVWA“reCAPTCHA key: Missing”</a></p><p><a href="https://blog.csdn.net/qq_33782021/article/details/135210893">linux 搭建dvwa时创建数据库显示Access denied for user‘dvwa‘@localhost (using password: YES)的解决办法</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> LANMP </tag>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用视觉设计</title>
      <link href="/2024/07/28/%E5%BA%94%E7%94%A8%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/"/>
      <url>/2024/07/28/%E5%BA%94%E7%94%A8%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="应用视觉设计"><a href="#应用视觉设计" class="headerlink" title="应用视觉设计"></a>应用视觉设计</h1><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><h3 id="text-align-属性创建视觉平衡"><a href="#text-align-属性创建视觉平衡" class="headerlink" title="text-align 属性创建视觉平衡"></a>text-align 属性创建视觉平衡</h3><p>CSS中的<code>text-align</code>属性可以控制文本的对齐方式</p><ul><li><p><code>text-align: justify;</code> 将文本隔开，使每行的宽度相等。</p></li><li><p><code>text-align: center;</code> 可以让文本居中对齐。</p></li><li><p><code>text-align: right;</code> 可以让文本右对齐。</p></li><li><p><code>text-align: left;</code> 是默认值，它可以让文本左对齐。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">450px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid cornflowerblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hh1</span>&#123;<span class="attribute">text-align</span>: justify;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hh2</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hh3</span>&#123;<span class="attribute">text-align</span>: right;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hh4</span>&#123;<span class="attribute">text-align</span>: left;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;hh1&quot;</span>&gt;</span>abc,addd,fasdadf<span class="tag">&lt;<span class="name">br</span>&gt;</span>asdfasdf<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;hh2&quot;</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;hh3&quot;</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;hh4&quot;</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728214924.png" alt=""></p><h3 id="width-属性调整元素的宽度"><a href="#width-属性调整元素的宽度" class="headerlink" title="width 属性调整元素的宽度"></a>width 属性调整元素的宽度</h3><p><code>width</code>属性来指定元素的宽度。属性值可以是相对单位，绝对单位，或者包含块（父元素）宽度的百分比</p><h3 id="height-属性调整元素的宽度"><a href="#height-属性调整元素的宽度" class="headerlink" title="height 属性调整元素的宽度"></a>height 属性调整元素的宽度</h3><p>和<code>width</code>属性类似，可以使用<code>height</code>属性来指定元素的高度</p><h3 id="strong-标签加粗文本"><a href="#strong-标签加粗文本" class="headerlink" title="strong 标签加粗文本"></a>strong 标签加粗文本</h3><p><code>strong</code>标签可以用来加粗文字。添加<code>strong</code>标签之后，浏览器会自动给元素添加：<code>font-weight:bold</code>样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: justify;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.links</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fullCard</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">245px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cardContent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cardText</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fullCard&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cardContent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cardText&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Stanford University.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cardLinks&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://en.wikipedia.org/wiki/Larry_Page&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links&quot;</span>&gt;</span>Larry Page<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://en.wikipedia.org/wiki/Sergey_Brin&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links&quot;</span>&gt;</span>Sergey Brin<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728215548.png" alt=""></p><h3 id="u-标签给文本添加下划线"><a href="#u-标签给文本添加下划线" class="headerlink" title="u 标签给文本添加下划线"></a>u 标签给文本添加下划线</h3><p>可以使用<code>u</code>标签来给文字添加下划线。添加<code>u</code>标签之后，浏览器会自动给元素添加：<code>text-decoration:underline;</code>样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Google was founded by Larry Page and Sergey Brin while they were <span class="tag">&lt;<span class="name">u</span>&gt;</span>Ph.D. students<span class="tag">&lt;/<span class="name">u</span>&gt;</span> at <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Stanford University<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728215928.png" alt=""></p><h3 id="em-标签强调文本"><a href="#em-标签强调文本" class="headerlink" title="em 标签强调文本"></a>em 标签强调文本</h3><p>可以使用<code>em</code>标签来强调文本。浏览器会给元素添加：<code>font-style: italic;</code>样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Google was founded by Larry Page and Sergey Brin while they were <span class="tag">&lt;<span class="name">u</span>&gt;</span>Ph.D. students<span class="tag">&lt;/<span class="name">u</span>&gt;</span> at <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Stanford University<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728220404.png" alt=""></p><h3 id="s-标签给文本添加删除线"><a href="#s-标签给文本添加删除线" class="headerlink" title="s 标签给文本添加删除线"></a>s 标签给文本添加删除线</h3><p>可以使用<code>s</code> 标签来给文字添加删除线。浏览器会自动给元素添加：<code>text-decoration: line-through;</code>样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">s</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">s</span>&gt;</span>Alphabet<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728222044.png" alt=""></p><h3 id="hr-标签创建水平线"><a href="#hr-标签创建水平线" class="headerlink" title="hr 标签创建水平线"></a>hr 标签创建水平线</h3><p>可以使用<code>hr</code>标签来创建一条宽度撑满父元素的水平线。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">s</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">s</span>&gt;</span>Alphabet<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Google was founded by Larry Page and Sergey Brin while they were <span class="tag">&lt;<span class="name">u</span>&gt;</span>Ph.D. students<span class="tag">&lt;/<span class="name">u</span>&gt;</span> at <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Stanford University<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728222318.png" alt=""></p><h3 id="文本的背景色"><a href="#文本的背景色" class="headerlink" title="文本的背景色"></a>文本的背景色</h3><p>除了设置整个页面背景色以及文字颜色外，还可以单独设置文章的背景色，即在文字的父元素上添加<code>background-color</code>属性。</p><h4 id="rgba"><a href="#rgba" class="headerlink" title="rgba"></a>rgba</h4><p><code>rgb()</code> 颜色</p><blockquote><p>rgba 代表：<br> r = red 红色<br> g = green 绿色<br> b = blue 蓝色<br> a = alpha 透明度</p></blockquote><p>RGB值可以取在0到255直接。alpha值可取在0到1之间，0代表完全透明，1代表完全不透明</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h4 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding:10px;</span><br><span class="line">    background-color: rgba(45, 45, 45, 0.1)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728222929.png" alt=""></p><h3 id="标题元素与段落元素的大小"><a href="#标题元素与段落元素的大小" class="headerlink" title="标题元素与段落元素的大小"></a>标题元素与段落元素的大小</h3><p>标题元素（<code>h1</code>和<code>h6</code>）的字体大小通常应大于段落标签的字体大小。此外可以使用<code>font-size</code>属性来调整元素中文本的大小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h4 &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        background-color: rgba(45, 45, 45, 0.1);</span><br><span class="line">        padding: 10px;</span><br><span class="line">        font-size:27px;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728223338.png" alt=""></p><h3 id="卡片元素添加-box-shadow"><a href="#卡片元素添加-box-shadow" class="headerlink" title="卡片元素添加 box-shadow"></a>卡片元素添加 box-shadow</h3><p><code>box-shadow</code> 属性用来给元素添加阴影，该属性值是由逗号分隔的一个或多个阴影列表。</p><p><code>box-shadow</code> 属性按顺序采用以下值：</p><ul><li><code>offset-x</code> （阴影的水平偏移量），</li><li><code>offset-y</code> （阴影的垂直偏移量），</li><li><code>blur-radius</code></li><li><code>spread-radius</code></li><li><code>color</code></li></ul><p>其中<code>blur-radius</code>和<code>spread-radius</code>是可选的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.19</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.23</span>);</span><br></pre></td></tr></table></figure><p>给卡片元素添加 box</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    ...</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#thumbnail</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.19</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.23</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    ...</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fullCard&quot;</span> <span class="attr">id</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cardContent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cardText&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">s</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">s</span>&gt;</span>Alphabet<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Google was founded by Larry Page and Sergey Brin while they were <span class="tag">&lt;<span class="name">u</span>&gt;</span>Ph.D. students<span class="tag">&lt;/<span class="name">u</span>&gt;</span> at <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Stanford University<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cardLinks&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://en.wikipedia.org/wiki/Larry_Page&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links&quot;</span>&gt;</span>Larry Page<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://en.wikipedia.org/wiki/Sergey_Brin&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links&quot;</span>&gt;</span>Sergey Brin<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728223732.png" alt=""></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow">box-shadow - CSS：层叠样式表 | MDN (mozilla.org)</a></p><h3 id="降低元素的透明度"><a href="#降低元素的透明度" class="headerlink" title="降低元素的透明度"></a>降低元素的透明度</h3><p>CSS里的<code>opacity</code>属性用来设置元素的透明度。</p><blockquote><p>属性值为 1 代表完全不透明。<br>属性值为 0.5 代表半透明。<br>属性值为 0 代表完全透明。</p></blockquote><p>透明度会应用到元素内的所有内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.links &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">    color: black;</span><br><span class="line">    opacity: 0.7;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728224905.png" alt=""></p><h3 id="text-transform-属性给文本添加大写效果"><a href="#text-transform-属性给文本添加大写效果" class="headerlink" title="text-transform 属性给文本添加大写效果"></a>text-transform 属性给文本添加大写效果</h3><p>CSS里的<code>text-transform</code>属性可以改变英文字母的大小写。使用这个属性时，我们无需改变HTML元素中的文本也可以统一页面里英文的显示。</p><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left"><code>lowercase</code></td><td style="text-align:left">“transform me”</td></tr><tr><td style="text-align:left"><code>uppercase</code></td><td style="text-align:left">“TRANSFORM ME”</td></tr><tr><td style="text-align:left"><code>capitalize</code></td><td style="text-align:left">“Transform Me”</td></tr><tr><td style="text-align:left"><code>initial</code></td><td style="text-align:left">使用默认值</td></tr><tr><td style="text-align:left"><code>inherit</code></td><td style="text-align:left">使用父元素的 <code>text-transform</code> 值。</td></tr><tr><td style="text-align:left"><code>none</code></td><td style="text-align:left"><strong>Default:</strong>不改变文字。</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h4 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-color: rgba(45, 45, 45, 0.1);</span><br><span class="line">    padding: 10px;</span><br><span class="line">    font-size: 27px;</span><br><span class="line">    text-transform:uppercase;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728225329.png" alt=""></p><h3 id="多个标题元素的-font-size"><a href="#多个标题元素的-font-size" class="headerlink" title="多个标题元素的 font-size"></a>多个标题元素的 font-size</h3><p><code>font-size</code>属性用来指定元素内文字的大小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">68px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">52px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h5</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">21px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h6</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is h1 text<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is h2 text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is h3 text<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>This is h4 text<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>This is h5 text<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>This is h6 text<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728225723.png" alt=""></p><h3 id="多个标题元素的-font-weight"><a href="#多个标题元素的-font-weight" class="headerlink" title="多个标题元素的 font-weight"></a>多个标题元素的 font-weight</h3><p><code>font-weight</code>属性用于设置文本中字体的粗细</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">68px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>:<span class="number">800</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">52px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>:<span class="number">600</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>:<span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h4</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>:<span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h5</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">21px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>:<span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h6</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>:<span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728230102.png" alt=""></p><h3 id="段落文本的-font-size"><a href="#段落文本的-font-size" class="headerlink" title="段落文本的 font-size"></a>段落文本的 font-size</h3><p>CSS的<code>font-size</code>不只限于标题，还可以应用于任何包含文字的元素内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728230258.png" alt=""></p><h3 id="段落的-line-height"><a href="#段落的-line-height" class="headerlink" title="段落的 line-height"></a>段落的 line-height</h3><p>CSS提供<code>line-height</code>属性来设置行间距。行高，即用来设置每行文字所占的垂直空间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>:<span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728230449.png" alt=""></p><h3 id="锚点的悬停状态"><a href="#锚点的悬停状态" class="headerlink" title="锚点的悬停状态"></a>锚点的悬停状态</h3><p>伪类可以添加到选择器上的关键字，用来选择特定状态的元素</p><p>比如，可以使用<code>:hover</code>伪类选择器来选取超链接的悬停状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://freecatphotoapp.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728230717.png" alt=""></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="元素的相对位置"><a href="#元素的相对位置" class="headerlink" title="元素的相对位置"></a>元素的相对位置</h3><p>在CSS中一切html元素皆为盒子，也就是通常说的盒模型。块级元素自动从新的一行开始，行内元素排列在上一个元素后面。元素默认按照这种方式布局称为文档的普通流，同时CSS提供了position属性来覆盖</p><p>当元素的定位设置为 <code>relative</code> 时，它允许你通过 CSS 指定该元素在当前文档流页面下的<em>相对</em>偏移量。 CSS 里控制各个方向偏移量的属性是 <code>left</code>、<code>right</code>、<code>top</code> 和 <code>bottom</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>:<span class="number">15px</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>On Being Well-Positioned<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Move me!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>I still think the h2 is where it normally sits.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728232234.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>:<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>On Being Well-Positioned<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Move me!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>I still think the h2 is where it normally sits.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728232411.png" alt=""></p><h3 id="绝对定位的参照物是元素的父元素"><a href="#绝对定位的参照物是元素的父元素" class="headerlink" title="绝对定位的参照物是元素的父元素"></a>绝对定位的参照物是元素的父元素</h3><p>CSS<code>position</code>属性的取值选项<code>absolute</code>，它的含义是相对于其包含块定位。和<code>relative</code> 定位不一样，绝对定位会将元素从当前的文档流里面移除，周围的元素会忽略它</p><p>绝对定位比较特殊的一点是元素的定位参照于最近的 <em>positioned</em> 祖先元素。 如果它的父元素没有添加定位规则（默认是 <code>position: relative;</code>），浏览器会继续寻找直到默认的 <code>body</code> 标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#searchbar</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;searchbar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;search&quot;</span>&gt;</span>Search:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Go!&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728233209.png" alt=""></p><h3 id="固定定位的参照物是浏览器的窗口"><a href="#固定定位的参照物是浏览器的窗口" class="headerlink" title="固定定位的参照物是浏览器的窗口"></a>固定定位的参照物是浏览器的窗口</h3><p><code>fixed</code>定位，它是一种特殊的绝对定位，将元素相对于浏览器窗口定位。类似于绝对位置，它与偏移属性一起使用，并且也会将元素从当前文档流中移除，其他元素会忽略它的存在。</p><p>但 <code>fixed</code> 和 <code>absolute</code> 的最明显的区别在于，前者定位的元素不会随着屏幕滚动而移动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-height</span>: <span class="number">150vh</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#navbar</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#767676</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>I shift up when the #navbar is fixed to the browser window.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728234029.png" alt=""></p><h3 id="float-属性将元素左浮动或右浮动"><a href="#float-属性将元素左浮动或右浮动" class="headerlink" title="float 属性将元素左浮动或右浮动"></a>float 属性将元素左浮动或右浮动</h3><p><code>float</code>属性。浮动元素不在文档流中，它向<code>left</code>或<code>right</code>浮动，直到它的边缘触碰到包含框或另一个浮动框为止。通常需要<code>width</code>属性来指定浮动元素占据的水平空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">40%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">aside</span>, <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Good stuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sidebar<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Links<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728234408.png" alt=""></p><h3 id="z-index-属性更改重叠元素的位置"><a href="#z-index-属性更改重叠元素的位置" class="headerlink" title="z-index 属性更改重叠元素的位置"></a>z-index 属性更改重叠元素的位置</h3><p>当一些元素在位置上重叠时（例如，使用 <code>position: absolute | relative | fixed | sticky</code> 时），在 HTML 里后出现的元素会默认显示在更早出现的元素的上面。 你可以使用 <code>z-index</code> 属性指定元素的堆叠次序。 <code>z-index</code> 的取值是整数，数值大的元素会叠放到数值小的元素上面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.first</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>:<span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.second</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;second&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728234629.png" alt=""></p><h3 id="margin-属性将元素水平居中"><a href="#margin-属性将元素水平居中" class="headerlink" title="margin 属性将元素水平居中"></a>margin 属性将元素水平居中</h3><p>将一个块级元素水平居中显示。一种常见的实现方式是把块级元素的<code>margin</code>值设置为auto</p><p>同样，这个方法对图片奏效。图片默认是内联元素，但是可以通过设置其<code>display</code>属性为<code>block</code>来把它变成块级元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728234953.png" alt=""></p><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><h3 id="互补色"><a href="#互补色" class="headerlink" title="互补色"></a>互补色</h3><p>色环是我们认识颜色关系的好工具。它是一个近色相邻、异色相离的圆环。 当两个颜色恰好在色环的两端时，这两个颜色就互为补色。 两个互为补色的颜色会在混合后变成灰色。 然而，补色搭配能形成强烈的视觉对比效果。</p><p>下面是一些以 hex 形式表示的补色例子：</p><blockquote><p>红色（#FF0000）和蓝绿色 (#00FFFF)<br>绿色（#00FF00）和品红色（#FF00FF）<br>蓝色（#0000FF）和黄色（#FFFF00）</p></blockquote><p>这与我们许多人在学校学的过时的 RYB 色彩模式不同，RYB 有不同的原色和补色。 现代色彩理论使用 RGB 模型（如在计算机屏幕上）和 CMY（K）模型（如在印刷中）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728235209.png" alt=""></p><h3 id="三次色"><a href="#三次色" class="headerlink" title="三次色"></a>三次色</h3><p>三次色是由原色和二次色相加产生的颜色， 例如，在 RGB 颜色模型中，红色（原色）和黄色（二次色）相加产生橙色（三次色）。 将这六种颜色中相邻的颜色相加，便产生了十二色色环。</p><p>设计里面有很多种颜色搭配方法。 涉及到三次色的一种配色方法是分裂补色搭配法。 选定主色之后，在色环上选择与它的补色相邻的两种颜色与之搭配。 此种搭配既有对比，又不失和谐。</p><p>下面是使用分裂补色搭配法创建的三个颜色：</p><div class="table-container"><table><thead><tr><th style="text-align:left">颜色</th><th style="text-align:left">HEX 颜色码</th></tr></thead><tbody><tr><td style="text-align:left">橙色</td><td style="text-align:left">#FF7F00</td></tr><tr><td style="text-align:left">蓝绿色</td><td style="text-align:left">#00FFFF</td></tr><tr><td style="text-align:left">树莓红</td><td style="text-align:left">#FF007F</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.orange</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#FF7F00</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.cyan</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#00FFFF</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.raspberry</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#FF007F</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;orange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cyan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;raspberry&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728235608.png" alt=""></p><h3 id="元素的颜色调整为互补色"><a href="#元素的颜色调整为互补色" class="headerlink" title="元素的颜色调整为互补色"></a>元素的颜色调整为互补色</h3><p>补色搭配能形成强列的对比效果，让内容更富生机。 但是如果使用不当效果会适得其反：将文字背景色和文字颜色设置为互补色，这样文字会很难看清。 通常的做法是，一种颜色做为主要颜色，然后使用其补色用来装点那些需要用户特别注意的部分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">header</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#09A7A1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0.25em</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:  <span class="number">#09A7A1</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#FF790E</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#09A7A1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0.5em</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Cooking with FCC!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Machine Learning in the Kitchen<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <span class="tag">&lt;<span class="name">code</span>&gt;</span>fetch Pringles<span class="tag">&lt;/<span class="name">code</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Sign Up<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bisection Vegetable Chopping<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Sign Up<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="symbol">&amp;copy;</span> 2018 FCC Kitchen<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728235954.png" alt=""></p><h3 id="颜色的色相"><a href="#颜色的色相" class="headerlink" title="颜色的色相"></a>颜色的色相</h3><p>颜色具有多种特性，包括色相、饱和度和亮度。 CSS3 引入了<code>hsl()</code>函数，作为直接说明这些特征来挑选颜色的替代方法。</p><p><strong>色相</strong> 是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。 以颜色光谱为例，光谱左边从红色开始，移动到中间的绿色，一直到右边的蓝色，色相值就是沿着这条线的取值。 在 <code>hsl()</code> 里面，色相用色环来代替光谱，色相值就是色环里面的颜色对应的从 0 到 360 度的角度值。</p><p><strong>饱和度</strong> 是指色彩的纯度，也就是颜色里灰色的占比。 饱和度越高则灰色占比越少，色彩也就越纯；反之则完全是灰色。 饱和度的取值范围是表示灰色所占百分比的 0 至 100。</p><p><strong>亮度</strong> 决定颜色的明暗程度，也就是颜色里白色或者黑色的占比。 其中，100% 的亮度表示纯白色， 0% 的亮度则表示纯黑色；而 50% 的亮度就表示在色相中选取的颜色。</p><p>下面是一些使用 <code>hsl()</code> 描述颜色的例子，颜色都为满饱和度，中等亮度:</p><div class="table-container"><table><thead><tr><th style="text-align:left">颜色</th><th style="text-align:left">HSL</th></tr></thead><tbody><tr><td style="text-align:left">红</td><td style="text-align:left">hsl(0, 100%, 50%)</td></tr><tr><td style="text-align:left">黄</td><td style="text-align:left">hsl(60, 100%, 50%)</td></tr><tr><td style="text-align:left">绿</td><td style="text-align:left">hsl(120, 100%, 50%)</td></tr><tr><td style="text-align:left">蓝绿</td><td style="text-align:left">hsl(180, 100%, 50%)</td></tr><tr><td style="text-align:left">蓝</td><td style="text-align:left">hsl(240, 100%, 50%)</td></tr><tr><td style="text-align:left">品红</td><td style="text-align:left">hsl(300, 100%, 50%)</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">120</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.cyan</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">180</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">240</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cyan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729001242.png" alt=""></p><h3 id="颜色的色调"><a href="#颜色的色调" class="headerlink" title="颜色的色调"></a>颜色的色调</h3><p><code>hsl()</code>是CSS更改颜色色调更加方便</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">header</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">180</span>, <span class="number">90%</span>, <span class="number">35%</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">nav</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>:<span class="built_in">hsl</span>(<span class="number">180</span>,<span class="number">80%</span>,<span class="number">25%</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-indent</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Cooking with FCC!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Classes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729001515.png" alt=""></p><h3 id="CSS-线性渐变"><a href="#CSS-线性渐变" class="headerlink" title="CSS 线性渐变"></a>CSS 线性渐变</h3><p>HTML元素背景色并不局限于单色。CSS还提供了颜色渐变。可通过 <code>background</code> 里的 <code>linear-gradient()</code> 实现线性渐变</p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(gradient_direction, color <span class="number">1</span>, color <span class="number">2</span>, color <span class="number">3</span>, ...);</span><br></pre></td></tr></table></figure><p>第一个参数指定了颜色过渡的方向——它的值是角度，<code>90deg</code> 表示垂直渐变（从左到右），<code>45deg</code> 表示沿对角线渐变（从左下方到右上方）。 其他参数指定了渐变颜色的顺序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">35deg</span>,<span class="number">#CCFFFF</span>,<span class="number">#FFCCCC</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729001846.png" alt=""></p><h3 id="CSS-线性渐变创建条纹元素"><a href="#CSS-线性渐变创建条纹元素" class="headerlink" title="CSS 线性渐变创建条纹元素"></a>CSS 线性渐变创建条纹元素</h3><p><code>repeating-linear-gradient()</code> 函数和 <code>linear-gradient()</code> 很像，主要区别是前者会重复指定的渐变。 <code>repeating-linear-gradient()</code> 有很多参数，为了便于理解，现在只用到角度值和色标。</p><p>角度就是渐变的方向。 色标代表渐变颜色及发生渐变的位置，由百分比或者像素值表示。</p><p>在代码编辑器的例子里，渐变开始于 0 像素位置的 <code>yellow</code>，然后过渡到距离开始位置 40 像素的 <code>blue</code>。 由于下一个渐变颜色的起始位置也是 40 像素，所以颜色直接渐变成第三个颜色值 <code>green</code>，然后过渡到距离开始位置 80 像素的 <code>red</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:  <span class="number">50</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">      <span class="number">90deg</span>,</span></span><br><span class="line"><span class="language-css">      yellow <span class="number">0px</span>,</span></span><br><span class="line"><span class="language-css">      blue <span class="number">40px</span>,</span></span><br><span class="line"><span class="language-css">      green <span class="number">40px</span>,</span></span><br><span class="line"><span class="language-css">      red <span class="number">80px</span></span></span><br><span class="line"><span class="language-css">    );</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729002601.png" alt=""></p><p>下面的代码可以帮助理解成对的起止渐变颜色值是如何过渡的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0px</span> <span class="selector-attr">[yellow -- blend -- blue]</span> <span class="number">40px</span> <span class="selector-attr">[green -- blend -- red]</span> <span class="number">80px</span></span><br></pre></td></tr></table></figure><p>如果每对起止渐变颜色值的颜色都是相同的，由于是在两个相同的颜色间过渡，那么中间的过渡色也为同色，接着就是同色的过渡色和下一个起止颜色，最终产生的效果就是条纹。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:  <span class="number">50</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">      <span class="number">90deg</span>,</span></span><br><span class="line"><span class="language-css">      yellow <span class="number">0px</span>,</span></span><br><span class="line"><span class="language-css">      yellow <span class="number">40px</span>,</span></span><br><span class="line"><span class="language-css">      black <span class="number">40px</span>,</span></span><br><span class="line"><span class="language-css">      black <span class="number">80px</span></span></span><br><span class="line"><span class="language-css">    );</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729002648.png" alt=""></p><h3 id="添加细微图案作为背景图像来创建纹理"><a href="#添加细微图案作为背景图像来创建纹理" class="headerlink" title="添加细微图案作为背景图像来创建纹理"></a>添加细微图案作为背景图像来创建纹理</h3><p>为了增加背景图的质感，我们可以为它添加一个不那么明显的纹理图案，这样可以让页面更讨喜。 但关键在于，我们需要找到一个平衡点，因为我们不希望背景图抢占了内容的风头，造成喧宾夺主的结果。 <code>background</code> 属性支持使用 <code>url()</code> 函数作为属性值，这让我们可以通过链接的方式引入纹理或样式的图片。 图片链接的地址应写在括号内，一般会用<strong>引号</strong>包起来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png&quot;</span>)</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729003028.png" alt=""></p><h2 id="元素变化"><a href="#元素变化" class="headerlink" title="元素变化"></a>元素变化</h2><h3 id="Transform-scale-属性可以更改元素的大小"><a href="#Transform-scale-属性可以更改元素的大小" class="headerlink" title="Transform scale 属性可以更改元素的大小"></a>Transform scale 属性可以更改元素的大小</h3><p>CSS属性<code>transform</code>里面的<code>scale()</code>函数可以用来改变元素的显示比例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.ball</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">50</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">      <span class="number">35deg</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ccffff</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ffcccc</span></span></span><br><span class="line"><span class="language-css">    );</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#ball1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#ball2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">65%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);&lt;!-把元素放大到原来的<span class="number">1.5</span>倍--&gt;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">id</span>= <span class="string">&quot;ball1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">id</span>= <span class="string">&quot;ball2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Transform-scale-属性在悬停时缩放元素"><a href="#Transform-scale-属性在悬停时缩放元素" class="headerlink" title="Transform scale 属性在悬停时缩放元素"></a>Transform scale 属性在悬停时缩放元素</h3><p><code>transform</code>属性有很多函数可以调用，可以对元素进行调整大小、移动、旋转、翻转等操作。当使用伪类选取元素的指定状态（如 <code>:hover</code>）时，我们可以通过 <code>transform</code> 属性非常方便地给元素添加交互。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:  <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">      <span class="number">53deg</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ccfffc</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ffcccf</span></span></span><br><span class="line"><span class="language-css">    );</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729003553.png" alt=""></p><h3 id="Transform-skex-属性沿X轴倾斜元素"><a href="#Transform-skex-属性沿X轴倾斜元素" class="headerlink" title="Transform skex 属性沿X轴倾斜元素"></a>Transform skex 属性沿X轴倾斜元素</h3><p><code>transform</code> 属性是 <code>skewX()</code>：它使选择的元素沿着 X 轴（横向）倾斜指定的角度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:  <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#top</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">24deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729003730.png" alt=""></p><h3 id="Transform-skex-属性沿Y轴倾斜元素"><a href="#Transform-skex-属性沿Y轴倾斜元素" class="headerlink" title="Transform skex 属性沿Y轴倾斜元素"></a>Transform skex 属性沿Y轴倾斜元素</h3><p><code>skewY</code> 属性使指定元素沿 Y 轴（垂直方向）翻转指定角度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#top</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">skewY</span>(-<span class="number">10deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">24deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729003856.png" alt=""></p><h3 id="CSS-创建一个图形"><a href="#CSS-创建一个图形" class="headerlink" title="CSS 创建一个图形"></a>CSS 创建一个图形</h3><p>通过使用不同的选择器和属性，你可以做出有趣的形状， 一个简单的例子是新月形状。</p><p>首先我们来创建一个圆的、透明的图形，它具有模糊阴影并略微向两边递减。 如你所见，这个阴影其实就是新月形狀。</p><p>为了创建一个圆形的对象，<code>border-radius</code> 应该被设置成 50%。</p><p><code>box-shadow</code> 属性以及它的依次取值 <code>offset-x</code>、<code>offset-y</code>、<code>blur-radius</code>、<code>spread-radius</code> 和 <code>color</code> 值。 其中 <code>blur-radius</code> 和 <code>spread-radius</code> 是可选的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-shadow</span>: <span class="number">25px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729004346.png" alt=""></p><h3 id="CSS-和-HTML-创建更复杂的形状"><a href="#CSS-和-HTML-创建更复杂的形状" class="headerlink" title="CSS 和 HTML 创建更复杂的形状"></a>CSS 和 HTML 创建更复杂的形状</h3><p>用CSS创建一个心形。</p><p>伪元素<code>::before</code> 和 <code>::after</code> 。 <code>::before</code> 创建一个伪元素，它是所选元素的第一个子元素； <code>::after</code> 创建一个伪元素，它是所选元素的最后一个子元素。 </p><p><code>::before</code> 和 <code>::after</code> 必须配合 <code>content</code> 来使用。 这个属性通常用来给元素添加内容诸如图片或者文字。 尽管有时 <code>::before</code> 和 <code>::after</code> 是用来实现形状而非文字，但 <code>content</code> 属性仍然是必需的，此时它的值可以是空字符串。 在上面的例子里，class 为 <code>heart</code> 元素的 <code>::before</code> 伪类添加了一个黄色的长方形，长方形的高和宽分别为 <code>50px</code> 和 <code>70px</code>。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.heart</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.heart</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.heart</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: -<span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729005850.png" alt=""></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::before">::before - CSS：层叠样式表 | MDN (mozilla.org)</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after">::after - CSS：层叠样式表 | MDN (mozilla.org)</a></p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="CSS-的关键帧和动画是如何工作的"><a href="#CSS-的关键帧和动画是如何工作的" class="headerlink" title="CSS 的关键帧和动画是如何工作的"></a>CSS 的关键帧和动画是如何工作的</h3><p>如果要给元素添加动画，需要了解 animation 属性以及 <code>@keyframes</code> 规则。<code>animation</code>属性控制动画的<strong>外观</strong>，<code>@keyframes</code> 规则控制动画中<strong>各阶段的变化</strong>。 总共有 8 个 <code>animation</code> 属性。 为了便于理解，只会暂时涉及到两个最常用的属性。</p><p><code>animation-name</code> 用来设置动画的名称，也就是我们稍后要在 <code>@keyframes</code> 里用到的名称。</p><p><code>animation-duration</code> 设置动画所花费的时间。</p><p><code>@keyframes</code> 可以通过设置特定时间点的行为来创建动画。 为此，我们只需要给持续时间内的特定帧（从 0% 到 100%）加上 CSS 规则。 如果用一部电影来做类比，那么 CSS 里面的 0% 关键帧就像是电影里面的开场镜头；100% 关键帧就像是电影里的片尾，就是那个之后会出现演职人员列表的片尾。 在动画设定的时间内，CSS 会根据关键帧的规则来给元素添加动画效果。 100% 位置的 CSS 属性就是元素最后的样子，相当于电影里的演职员表或者鸣谢镜头。 然后CSS 应用魔法来在给定的时间内转换元素以使其脱离场景。 下面举例说明 <code>@keyframes</code> 和动画属性的用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#anim</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: colorful;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> colorful &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>id 为 <code>anim</code> 的元素，我们在代码中将它的 <code>animation-name</code> 设置为 <code>colorful</code>，同时设置 <code>animation-duration</code> 为 3 秒。 然后我们把 <code>@keyframes</code> 规则添加到名为 <code>colorful</code> 的动画属性上。 在动画开始时（0%）的背景颜色为蓝色，在动画结束时（100%）的背景颜色为黄色。 注意我们不只可以设置开始和结束，而是从 0% 到 100% 间的任意位置都可以设置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#rect</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>:rainbow;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>:<span class="number">4s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> rainbow&#123;</span></span><br><span class="line"><span class="language-css">     <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>:blue;</span></span><br><span class="line"><span class="language-css">     &#125;</span></span><br><span class="line"><span class="language-css">     <span class="number">50%</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>:green;</span></span><br><span class="line"><span class="language-css">     &#125;</span></span><br><span class="line"><span class="language-css">     <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>:yellow;</span></span><br><span class="line"><span class="language-css">     &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;rect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/24860e0e3f9aa87cd0c1bf3491b2751b.gif" alt=""></p><h3 id="CSS动画更改按钮的悬停状态"><a href="#CSS动画更改按钮的悬停状态" class="headerlink" title="CSS动画更改按钮的悬停状态"></a>CSS动画更改按钮的悬停状态</h3><p>以在按钮悬停时使用 <code>@keyframes</code> 改变按钮的颜色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#0F5897</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">8px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: background-color;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">500ms</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> background-color&#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>:<span class="number">#4791d0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/a4cb8977df77e6c767b7f5f9ef0c5c9e.gif" alt=""></p><h3 id="动画的填充模式"><a href="#动画的填充模式" class="headerlink" title="动画的填充模式"></a>动画的填充模式</h3><p>上一个过程中动画在 <code>500ms</code> 之后重置了，所以按钮又变成了之前的颜色。 如果想要的效果是按钮在悬停时始终高亮。</p><p>为此，可以通过把 <code>animation-fill-mode</code> 设置成 <code>forwards</code> 来实现。 <code>animation-fill-mode</code> 指定了在动画结束时元素的样式： ：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-fill-mode</span>: forwards;</span><br></pre></td></tr></table></figure><p>修改动画的填充模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#0F5897</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">8px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: background-color;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">500ms</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-fill-mode</span>: forwards;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> background-color &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#4791d0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/7813c74cf2584f86d83530ac081bd05c.gif" alt=""></p><h3 id="CSS-动画创建动画"><a href="#CSS-动画创建动画" class="headerlink" title="CSS 动画创建动画"></a>CSS 动画创建动画</h3><p>在元素的 <code>position</code> 已有指定值（如 <code>fixed</code> 或者 <code>relative</code>）时，CSS 偏移属性 <code>right</code>、<code>left</code>、<code>top</code>、<code>bottom</code> 可以用在动画规则里创建动作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#rect</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: rainbow;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">4s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> rainbow &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>:<span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>:-<span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;rect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/ded2cfd75bf5814dedd3830d61e9be8c.gif" alt=""></p><h3 id="从左到右淡化元素来创建视觉方向"><a href="#从左到右淡化元素来创建视觉方向" class="headerlink" title="从左到右淡化元素来创建视觉方向"></a>从左到右淡化元素来创建视觉方向</h3><p>需要改变动画元素的 <code>opacity</code> 属性值，使其在到达屏幕右侧时渐隐。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#ball</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">      <span class="number">35deg</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ccffff</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ffcccc</span></span></span><br><span class="line"><span class="language-css">    );</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: fade;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> fade &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>:<span class="number">0.1</span>;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ball&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/ced79b4ac765ce1f4287bbd6321a1afb.gif" alt=""></p><h3 id="无限的动画计数制作永不停止的动画"><a href="#无限的动画计数制作永不停止的动画" class="headerlink" title="无限的动画计数制作永不停止的动画"></a>无限的动画计数制作永不停止的动画</h3><p>常用的动画属性是 <code>animation-iteration-count</code>，这个属性允许你控制动画循环的次数。 下面是一个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>在这里动画会在运行 3 次后停止，如果想让动画一直运行，可以把值设置成 <code>infinite</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#ball</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">      <span class="number">35deg</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ccffff</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ffcccc</span></span></span><br><span class="line"><span class="language-css">    );</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: bounce;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> bounce&#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">130px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ball&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/33c21a54212bf0f46dcb1bf5ab8c1eda.gif" alt=""></p><h3 id="无限的动画计数制作-CSS-心跳"><a href="#无限的动画计数制作-CSS-心跳" class="headerlink" title="无限的动画计数制作 CSS 心跳"></a>无限的动画计数制作 CSS 心跳</h3><p><code>animation-iteration-count</code> 属性创造持续动画的例子，它基于前面创建的心形。</p><p>心跳动画的每一秒包含两个部分。 <code>heart</code> 元素（包括 <code>:before</code> 和 <code>:after</code>）使用 <code>transform</code> 属性改变其大小，背景 <code>div</code> 使用 <code>background</code> 属性改变其颜色。</p><p>使用无限的动画计数制作 CSS 心跳</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.back</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: backdiv;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.heart</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: beat;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.heart</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.heart</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: -<span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> backdiv &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#ffe6f2</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> beat &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>) <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.6</span>) <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/25f8aae01e4d22a9f1dfcb0301319143.gif" alt=""></p><h3 id="可变速率来给元素添加动画"><a href="#可变速率来给元素添加动画" class="headerlink" title="可变速率来给元素添加动画"></a>可变速率来给元素添加动画</h3><p>改变相似元素的动画频率的方法有很多。 目前接触到的就有 <code>animation-iteration-count</code> 和 <code>@keyframes</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.stars</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.star-1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-left</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: twinkle-<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.star-2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-left</span>: <span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: twinkle-<span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> twinkle-<span class="number">1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> twinkle-<span class="number">2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">20%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#back</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(black, <span class="number">#000099</span>, <span class="number">#66c2ff</span>, <span class="number">#ffcccc</span>, <span class="number">#ffeee6</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;back&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;star-1 stars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;star-2 stars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/52775749dedbac7f7b4144655bc1cd51.gif" alt=""></p><h3 id="关键字更改动画定时器"><a href="#关键字更改动画定时器" class="headerlink" title="关键字更改动画定时器"></a>关键字更改动画定时器</h3><p>在 CSS 动画里，<code>animation-timing-function</code> 用来定义动画的速度曲线。 速度曲线决定了动画从一套 CSS 样式变为另一套所用的时间。 如果要描述的动画是一辆车在指定时间内从 A 运动到 B，那么 <code>animation-timing-function</code> 表述的就是车在运动中的加速和减速等过程。</p><p>有一些预定义的关键字可用于常见的选项。 比如，默认值是 <code>ease</code>，动画以低速开始，然后加快，在结束前变慢。 其它常用的值包括 <code>ease-out</code>：动画以高速开始，以低速结束；<code>ease-in</code>，动画以低速开始，以高速结束；<code>linear</code>：动画从头到尾的速度是相同的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.balls</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">      <span class="number">35deg</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ccffff</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ffcccc</span></span></span><br><span class="line"><span class="language-css">    );</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: bounce;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#ball1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>:<span class="number">27%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>:linear;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#ball2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>:<span class="number">56%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>:ease-out;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> bounce &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;balls&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ball1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;balls&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ball2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/ade6d0ca84ec87f12c792a3937272225.gif" alt=""></p><h3 id="贝塞尔曲线的原理"><a href="#贝塞尔曲线的原理" class="headerlink" title="贝塞尔曲线的原理"></a>贝塞尔曲线的原理</h3><p>除了预定义值之外，CSS 还提供了贝塞尔曲线（Bezier curves）来更细致地控制动画的速度曲线。</p><p>在 CSS 动画里，我们可以用 <code>cubic-bezier</code> 来定义贝塞尔曲线。 曲线的形状代表了动画的速度。 曲线在 1 * 1 的坐标系统内， 其中 X 轴代表动画的时间间隔（类似于时间比例尺），Y 轴代表动画的改变。</p><p><code>cubic-bezier</code> 函数包含了 1 * 1 网格里的4个点：<code>p0</code>、<code>p1</code>、<code>p2</code>、<code>p3</code>。 其中 <code>p0</code> 和 <code>p3</code> 是固定值，代表曲线的起始点和结束点，坐标值依次为 (0, 0) 和 (1, 1)。 你只需设置另外两点的 x 值和 y 值，设置的这两点确定了曲线的形状从而确定了动画的速度曲线。 在 CSS 里面通过 <code>(x1, y1, x2, y2)</code> 来确定 <code>p1</code> 和 <code>p2</code>。 以下就是 CSS 贝塞尔曲线的例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.75</span>, <span class="number">0.75</span>);</span><br></pre></td></tr></table></figure><p>在上面的例子里，两个点的 x 和 y 值相等（x1 = 0.25 = y1 和 x2 = 0.75 = y2）。如果你还记得几何课的知识，结果是从原点到点 (1, 1) 的一条直线。 元素在动画中的速度呈线性，效果和使用 <code>linear</code> 关键词的效果一致。 换言之，元素匀速运动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.balls</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">      <span class="number">35deg</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ccffff</span>,</span></span><br><span class="line"><span class="language-css">      <span class="number">#ffcccc</span></span></span><br><span class="line"><span class="language-css">    );</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: bounce;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#ball1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">27%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.75</span>,<span class="number">0.75</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#ball2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">56%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>: ease-out;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> bounce &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;balls&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ball1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;balls&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ball2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/ade6d0ca84ec87f12c792a3937272225.gif" alt="img"></p><h3 id="贝塞尔曲线移动图形"><a href="#贝塞尔曲线移动图形" class="headerlink" title="贝塞尔曲线移动图形"></a>贝塞尔曲线移动图形</h3><p>将一条直线放在范围只有 1 的坐标轴中，并从中间拿 <code>p1</code> 和 <code>p2</code> 两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的贝塞尔速度曲线。 下面是一个使用值来模仿 <code>ease-out</code> 样式的 Bezier 曲线示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.58</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>所有的 <code>cubic-bezier</code> 函数都是从坐标为 (0, 0) 的 <code>p0</code> 开始，在坐标为 (1, 1) 的 <code>p3</code> 结束。 在这个例子里，曲线在 y 轴（从 0 开始，运动到 <code>p1</code> 的 0，然后运动到 <code>p2</code> 的 1）上移动得比在 x 轴（从 0 开始，运动到 <code>p1</code> 的 0，到 <code>p2</code> 的 0.58）上移动得快。 结果是，在这一段动画内元素运动得快。 到曲线的结尾，x 和 y 之间的关系反过来了，y 值保持为 1，没有变化，x 值从 0.58 变为 1，元素运动得慢</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.balls</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: bounce;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">27%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.58</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#blue</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">56%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>: ease-out;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> bounce &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;balls&quot;</span> <span class="attr">id</span>= <span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;balls&quot;</span> <span class="attr">id</span>= <span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/29d252f89ddee28c441f3b78cd7e1063.gif" alt=""></p><h3 id="贝塞尔曲线让运动更加自然"><a href="#贝塞尔曲线让运动更加自然" class="headerlink" title="贝塞尔曲线让运动更加自然"></a>贝塞尔曲线让运动更加自然</h3><p><code>animation-iteration-count</code> 值为 infinite 时，<code>animation-timing-function</code> 会自动循环 keyframe。 由于我们是在动画周期的中间点（<code>50%</code> 处）设置的 keyframe 规则，最终的结果是球向上和球向下是两个同样的动画过程。</p><p>下面的例子模拟了杂耍球运动：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cubic-bezier(<span class="number">0.3</span>, <span class="number">0.4</span>, <span class="number">0.5</span>, <span class="number">1.6</span>);</span><br></pre></td></tr></table></figure><p>注意 y2 的值是大于 1 的。 虽然贝塞尔曲线是在 1*1 的坐标系统内，x 值只能在 0 到 1，但是 y 值是可以大于 1 的。 这样才能模拟杂耍球运动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.balls</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: jump;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>: linear;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#blue</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>: ease-out;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#green</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">75%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.311</span>, <span class="number">0.441</span>, <span class="number">0.444</span>, <span class="number">1.649</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> jump &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">10%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;balls&quot;</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;balls&quot;</span> <span class="attr">id</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;balls&quot;</span> <span class="attr">id</span>=<span class="string">&quot;green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/3aba1eb1e01e5f735093f7944eec7a58.gif" alt=""></p><p>文中内容来自总结和<a href="https://www.freecodecamp.org/learn/">Learn to Code — For Free — Coding Courses for Busy People </a></p>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 应用视觉设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2024/07/27/React/"/>
      <url>/2024/07/27/React/</url>
      
        <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p>React是由fb创建和维护的开源视图库。它是渲染现代Web应用程序用户界面（UI）的工具。</p><p>React使用名为JSX的js语法扩展，可以直接在js中编写html</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>可以使用<code>&#123;/**/&#125;</code>语法来包裹注释文本</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">JSX</span> = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;/*注释*/&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a block of JSX<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s a subtitle<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="JSX元素"><a href="#JSX元素" class="headerlink" title="JSX元素"></a>JSX元素</h2><h3 id="简单的JSX元素"><a href="#简单的JSX元素" class="headerlink" title="简单的JSX元素"></a>简单的JSX元素</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">JSX</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello JSX!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h3 id="复杂的JSX元素"><a href="#复杂的JSX元素" class="headerlink" title="复杂的JSX元素"></a>复杂的JSX元素</h3><p>嵌套的JSX，必须返回单个元素。这个父元素将包裹所有其他级别的嵌套元素</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">JSX</span> = </span><br><span class="line">(<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure><h2 id="渲染-HTML-元素为-DOM-树"><a href="#渲染-HTML-元素为-DOM-树" class="headerlink" title="渲染 HTML 元素为 DOM 树"></a>渲染 HTML 元素为 DOM 树</h2><p>JSX是一种在js中编写可读html的便捷工具。在react中，可以使用它的渲染API将此JSX直接渲染到html dom。</p><p>ReactDOM提供了一个简单的方法来将React元素呈现给DOM</p><p><strong>语法</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(componentToRender, targetNode)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>componentToRender：要渲染的react元素或组件</p><p>targetNode：组件要渲染到的DOM节点</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">JSX</span> = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lets render this to the DOM<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">JSX</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;challenge-node&#x27;</span>));</span><br></pre></td></tr></table></figure><p><code>document.getElementById()</code>选择要渲染的DOM节点</p><h2 id="定义一个-HTML-Class"><a href="#定义一个-HTML-Class" class="headerlink" title="定义一个 HTML Class"></a>定义一个 HTML Class</h2><p>JSX与HTML的一个关键区别。不能再使用<code>class</code>这个单词来作为html的class名，因为class是js的中的关键词。JSX中使用<code>className</code>代替。</p><p>其实JSX中所有的HTML属性和事件引用的命名约定都变成了驼峰式。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">JSX</span> = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&quot;myDiv&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Add a class to this div<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="自闭合-JSX-标签"><a href="#自闭合-JSX-标签" class="headerlink" title="自闭合 JSX 标签"></a>自闭合 JSX 标签</h2><p>在html中几乎所有的标签都有一个开始和结束标签。但是html中有一些被称为“自闭合标签”的特殊实例，它们在另一个标签开始之前，不需要开始和结束标签都存在。例如换行标签可以写作<code>&lt; br &gt;</code>或者<code>&lt; br /&gt;</code>。但不能写为<code>&lt; br &gt; &lt; /br&gt;</code></p><p>在JSX中，规则略有不同。任何JSX元素都可以使用自闭合标签编写，并且每个元素都必须关闭。例如，换行标签必须始终编写为<code>&lt; br /&gt;</code>。另一方面<code>&lt; div &gt;</code>可以写为<code>&lt; div /&gt;</code>或者<code>&lt; div &gt;&lt; / div&gt;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">JSX</span> = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to React!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Be sure to close all tags!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>组件是react的核心。react中的所有内容都是一个组件。有两种方法可以创建react组件。第一种就是js函数</p><h3 id="无状态的函数组件"><a href="#无状态的函数组件" class="headerlink" title="无状态的函数组件"></a>无状态的函数组件</h3><p>要用函数创建组件，只需要写一个返回JSX或<code>null</code>的js函数。注意React要求函数名以大写字母开头。下面是一个无状态功能组件示例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React-组件"><a href="#React-组件" class="headerlink" title="React 组件"></a>React 组件</h3><p>使用ES6的<code>class</code>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组合的方式创建一个-React-组件"><a href="#组合的方式创建一个-React-组件" class="headerlink" title="组合的方式创建一个 React 组件"></a>组合的方式创建一个 React 组件</h3><p>要将这些组件组合在一起，可以创建一个父组件，然后将这三个组件分别渲染为子组件。以下是将两个组件组合的简单方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ChildComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am the child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am the parent<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="React-渲染嵌套组件"><a href="#React-渲染嵌套组件" class="headerlink" title="React 渲染嵌套组件"></a>React 渲染嵌套组件</h3><p>定义了两个功能组件<code>TypesOfFruit</code> 和 <code>Fruits</code>。 用组合或者嵌套把 <code>TypesOfFruit</code> 组件放到 <code>Fruits </code>组件中， 然后把<code> Fruits </code>组件放到<code> TypesOfFood </code>组件中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">TypesOfFruit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Fruits:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blueberries<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Strawberries<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Fruits</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">TypesOfFruit</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TypesOfFood</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Types of Food:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Fruits</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组合-React-组件"><a href="#组合-React-组件" class="headerlink" title="组合 React 组件"></a>组合 React 组件</h3><p>在 <code>Fruits </code>中嵌套两个组件，首先 <code> NonCitrus</code>，然后是  <code>Citrus、， 这两个组件都已经引入。 接下来，将 <code> Fruits</code>类组件嵌套到  <code>TypesOfFood</code> 组件中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fruits</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Fruits:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">NonCitrus</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Citrus</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TypesOfFood</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">     <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Types of Food:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Fruits</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Vegetables</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="class-组件渲染到-DOM-树"><a href="#class-组件渲染到-DOM-树" class="headerlink" title="class 组件渲染到 DOM 树"></a>class 组件渲染到 DOM 树</h3><p><strong>语法</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ComponentToRender</span> /&gt;</span></span>, targetNode)</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TypesOfFood</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Types of Food:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Fruits</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Vegetables</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">TypesOfFood</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;challenge-node&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><h4 id="Props-传递给无状态函数组件"><a href="#Props-传递给无状态函数组件" class="headerlink" title="Props 传递给无状态函数组件"></a>Props 传递给无状态函数组件</h4><p>在React中，可以将属性传递给子组件。有一个名为<code>Calendar</code>的组件，该组件渲染了一个子组件<code>CurrentDate</code>。给<code>CurrentDate</code>组件传递了一个<code>date</code>属性</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Calendar</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">CurrentDate</span> <span class="attr">date</span> = <span class="string">&#123;Date()&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Calendar</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>可以把创建的React支持的自定义html属性传递给组件。将<code>date</code>属性传递给组件<code>CurrentDate</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CurrentDate</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>The current date is:&#123;props.date&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CurrentDate</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>The current date is:&#123;props.date&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calendar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>What date is it?<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">CurrentDate</span> <span class="attr">date</span> = <span class="string">&#123;Date()&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="传递一个数组作为-Props"><a href="#传递一个数组作为-Props" class="headerlink" title="传递一个数组作为 Props"></a>传递一个数组作为 Props</h4><p>有一个名为<code>ToDo</code>的组件，该组件渲染了一个子组件<code>List</code>。给<code>List</code>组件传递了一个<code>tasks</code>属性</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ToDo</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">List</span> <span class="attr">tasks</span> = <span class="string">&#123;[</span>&quot;<span class="attr">walk</span> <span class="attr">dog</span>&quot;, &quot;<span class="attr">workout</span>&quot;,&quot;<span class="attr">e</span>&quot;]&#125;/&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">ToDo</span>&gt;</span><br></pre></td></tr></table></figure><p>可以把创建的React支持的自定义html属性传递给组件。将<code>tasks</code>属性传递给组件<code>List</code>。子组件可以访问数组属性。访问属性时可以使用<code>join()</code>方法，将所有的数组项连接</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">List</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.tasks.join(&#x27;, &#x27;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">List</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.tasks.join(&#x27;, &#x27;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ToDo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>To Do Lists<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Today<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">tasks</span> = <span class="string">&#123;[</span>&quot;<span class="attr">walk</span> <span class="attr">dog</span>&quot;, &quot;<span class="attr">workout</span>&quot;,&quot;<span class="attr">e</span>&quot;]&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tomorrow<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span>  <span class="attr">tasks</span> = <span class="string">&#123;[</span>&quot;<span class="attr">walk</span> <span class="attr">dog</span>&quot;, &quot;<span class="attr">workout</span>&quot;,&quot;<span class="attr">read</span>&quot;]&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用默认的-Props"><a href="#使用默认的-Props" class="headerlink" title="使用默认的 Props"></a>使用默认的 Props</h4><p>React还有一个设置默认props的选项。可以默认props作为组件本身的属性分配给组件，Reacr会在必要时分配默认PROP。如果没有显示的提供任何值，这允许指定prop值应该是什么。定义一个location属性，并且其值在没有另行制定的情况下被设置为字符串。如果props未定义，则React会分配默认props。</p><p>给ShoppingCart组件定义一个默认props</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ShoppingCart</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shopping Cart Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ShoppingCart</span>.<span class="property">defaultProps</span> = &#123;<span class="attr">items</span>:<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="覆盖默认的-Props"><a href="#覆盖默认的-Props" class="headerlink" title="覆盖默认的 Props"></a>覆盖默认的 Props</h4><p>在React中，设置默认的props是一个很有用的特性，显示设置组件的prop值即可覆盖默认props。</p><p>已经有一个默认的<code>quantity</code>prop，其值设置为0,。通过传入数值<code>10</code>来覆盖<code>quantity</code>的默认prop</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Items</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Current Quantity of Items in Cart: &#123;props.quantity&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Items</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">quantity</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShoppingCart</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Items</span> <span class="attr">quantity</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用-PropTypes-来定义-Props-的类型"><a href="#使用-PropTypes-来定义-Props-的类型" class="headerlink" title="使用 PropTypes 来定义 Props 的类型"></a>使用 PropTypes 来定义 Props 的类型</h4><p>React提供了有用的类型检查特性，以验证组件是否接收到了正确类型的props。</p><p>为组件定义<code>propTypes</code>属性</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Item</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">quantity</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>.<span class="property">isRequired</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Items</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Current Quantity of Items in Cart: &#123;props.quantity&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Item</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">quantity</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>.<span class="property">isRequired</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Items</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">quantity</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShoppingCart</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Items</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用-this-props-访问-Props"><a href="#使用-this-props-访问-Props" class="headerlink" title="使用 this.props 访问 Props"></a>使用 this.props 访问 Props</h4><p>如果要引用类组本身，可以使用<code>this</code>关键字。要访问类组件中的props，需要在访问它的代码前面添加<code>this</code></p><p>父组件中<code>App</code>中渲染<code>Welcome</code>组件的一个实例。在这里，给<code>Welcome</code>一个<code>name</code>的prop，并赋值一个字符串。在<code>Welcome</code>的子节点里，访问<code>strong</code>标签内的<code>name</code>prop</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;world&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="有状态的组件"><a href="#有状态的组件" class="headerlink" title="有状态的组件"></a>有状态的组件</h4><p>React中最重要的主题之一是<code>state</code>。state包含应用程序需要了解的任何数据，这些数据可能随时间而变化。应用程序能够响应state的变更，并在必要时显示更新后的UI。React为现代Web应用程序的状态管理提供了一个很好的解决方案。</p><p>可以在类组件的<code>constructor</code>上声明<code>state</code>属性来在React组件中创建state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在组件的整个生命周期内访问 <code>state</code> 对象， 可以更新它、在 UI 中渲染它，也可以将其作为 props 传递给子组件。 <code>state</code> 对象的使用可以很简单，亦可以很复杂，就看你怎么用了。 请注意，必须通过扩展 <code>React.Component</code> 来创建类组件，以便像这样创建 <code>state</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StatefulComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">firstName</span>:<span class="string">&quot;abc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.firstName&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="用户界面中渲染状态"><a href="#用户界面中渲染状态" class="headerlink" title="用户界面中渲染状态"></a>用户界面中渲染状态</h4><p>定义组件初始state之后，就可以在要渲染的UI中显示它。如果组件是有状态的，它将始终可以访问<code>reader()</code>方法中的<code>state</code>数据。就可以使用<code>this.state</code>访问数据</p><p>如果想在render方法的return中访问state值，必须用花括号括起来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;freeCodeCamp&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>state</code> 是 React 组件中最强大的特性之一， 它可以跟踪应用程序中的重要数据，并根据数据的变化渲染 UI。 如果数据发生变化，UI 也会随之改变。 React 使用所谓的虚拟 DOM 来跟踪幕后的变化。 当 state 数据更新时，它会使用该数据触发组件的重新渲染 — 包括接收 prop 数据的子组件。 React 只在必要的时候更新实际的 DOM， 这意味着你不必担心 DOM 的变更， 只需声明 UI 的外观即可。</p><p>注意，如果组件是有状态的，其它组件并不知道它的 <code>state</code>。 它的 <code>state</code> 是完全封装的，或者是局限于组件本身的，除非你将 state 数据作为 <code>props</code> 传递给子组件。 封装 <code>state</code> 的概念非常重要，因为它允许编写特定的逻辑，然后将该逻辑包含并隔离在代码中的某个位置。</p><h4 id="另一种方式的状态渲染"><a href="#另一种方式的状态渲染" class="headerlink" title="另一种方式的状态渲染"></a>另一种方式的状态渲染</h4><p>还有另一种方法可以访问组件中的 <code>state</code>。 在 <code>render()</code> 方法中，在 <code>return</code> 语句之前，可以直接编写 js。 例如，可以声明函数、从 <code>state</code> 或 <code>props</code> 中访问数据、对此数据执行计算等。 然后，可以将任何数据赋值给 <code>return</code> 语句中可以访问的变量。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;freeCodeCamp&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="this-setState-设置状态"><a href="#this-setState-设置状态" class="headerlink" title="this.setState 设置状态"></a>this.setState 设置状态</h4><p>React提供了<code>setState</code>方法来更新组件的<code>state</code>。在组件类中调用<code>setState</code>方法如下：<code>this.setState()</code>，传入键值对的对象空气中键是state的属性，值是state更新会的数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>设置一个<code>button</code>元素添加一个单击处理程序。当接受到单击事件，就触发<code>handleClick</code>方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Initial State&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;React Rocks!&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="this-绑定到-Class-方法上"><a href="#this-绑定到-Class-方法上" class="headerlink" title="this 绑定到 Class 方法上"></a>this 绑定到 Class 方法上</h4><p>除了设置和更新<code>state</code>之外，还可以为组件类定义方法。类方法通常需要<code>this</code>关键字，以便它可以访问方法中的类属性（例如<code>state</code>和<code>props</code>）</p><p>一种常见的方法是在构造函数中显式地绑定 <code>this</code>，这样当组件初始化时，<code>this</code> 就会绑定到类方法。上一部分在构造函数中的 <code>handleClick</code> 方法使用了 <code>this.handleClick = this.handleClick.bind(this)</code>。 然后，当在类方法中调用像 <code>this.setState()</code> 这样的函数时，<code>this</code> 指的是这个类，而不是 <code>undefined</code>。</p><h4 id="使用-State-切换元素"><a href="#使用-State-切换元素" class="headerlink" title="使用 State 切换元素"></a>使用 State 切换元素</h4><p>在更新状态时，可能想知道上一个状态是什么。但是状态更新是异步的，这意味着React可能会把多个<code>setState()</code>集中在一起批量更新。所以计算下一个值<code>this.state</code>或者<code>this.props</code>不能作为当前值。</p><p>正确的做法是，给<code>setState</code>传入一个函数，这个函数可以访问state和props。给<code>setState</code>传入函数可以保证state和props是正确的值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">counter</span>: state.<span class="property">counter</span> + props.<span class="property">increment</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>按钮上有一个单击处理程序，它触发一个名为 <code>toggleVisibility()</code> 的类方法。 给函数传入 <code>setState</code> 来定义此方法，以便 <code>visibility</code> 的 <code>state</code> 在调用方法时切换到相反的值。 如果 <code>visibility</code> 是 <code>false</code>，则该方法将其设置为<code>true</code>，反之亦然。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">visibility</span>: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toggleVisibility</span> = <span class="variable language_">this</span>.<span class="property">toggleVisibility</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toggleVisibility</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setState</span> (<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (state.<span class="property">visibility</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> &#123; <span class="attr">visibility</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> &#123; <span class="attr">visibility</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">visibility</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggleVisibility&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Now you see me!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggleVisibility&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写一个简单的计数器"><a href="#写一个简单的计数器" class="headerlink" title="写一个简单的计数器"></a>写一个简单的计数器</h4><p><code>Counter</code> 组件跟踪 <code>state</code> 中的 <code>count</code> 值。 有两个按钮分别调用 <code>increment()</code> 和 <code>decrement()</code> 方法。使计数器值在单击相应按钮时增加或减少 1。 另外，创建一个 <code>reset()</code> 方法，当单击 reset 按钮时，把计数设置为 0。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">increment</span> = <span class="variable language_">this</span>.<span class="property">increment</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">decrement</span> = <span class="variable language_">this</span>.<span class="property">decrement</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reset</span> = <span class="variable language_">this</span>.<span class="property">reset</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setState</span> (<span class="function">(<span class="params">state</span>)=&gt;</span>(&#123;</span><br><span class="line">      count : state.<span class="property">count</span>+<span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">decrement</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setState</span> (<span class="function">(<span class="params">state</span>)=&gt;</span>(&#123;</span><br><span class="line">      count : state.<span class="property">count</span>-<span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">reset</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setState</span> (<span class="function">(<span class="params">state</span>)=&gt;</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;inc&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>Increment!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;dec&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>Decrement!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;reset&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.reset&#125;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Current Count: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="创建一个可以控制的输入框"><a href="#创建一个可以控制的输入框" class="headerlink" title="创建一个可以控制的输入框"></a>创建一个可以控制的输入框</h4><p>应用程序可能在 <code>state</code> 和渲染的 UI 之间有更复杂的交互。 例如，用于文本输入的表单控件元素（如 <code>input</code> 和 <code>textarea</code>）在用户键入时在 DOM 中维护自己的 state。 通过 React，可以将这种可变 state 转移到 React 组件的 <code>state</code> 中。 用户的输入变成了应用程序 <code>state</code> 的一部分，因此 React 控制该输入字段的值。 通常，如果 React 组件具有用户可以键入的输入字段，那么它将是一个受控的输入表单。</p><p>创建一个名为 <code>handleChange()</code> 的方法，该方法具有一个名为 <code>event</code> 的参数。 方法被调用时，它接收一个 <code>event</code> 对象，该对象包含一个来自 <code>input</code> 元素的字符串文本。 可以使用方法内的 <code>event.target.value</code> 来访问这个字符串。 用这个新字符串更新组件的<code>state</code>的<code>input</code>属性。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ControlledInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>( &#123;</span><br><span class="line">      <span class="attr">input</span>:event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Controlled Input:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.input&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="创建一个可以控制的表单"><a href="#创建一个可以控制的表单" class="headerlink" title="创建一个可以控制的表单"></a>创建一个可以控制的表单</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">submit</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">input</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">submit</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">input</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span>Submit!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.submit&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将-State-作为-Props-传递给子组件"><a href="#将-State-作为-Props-传递给子组件" class="headerlink" title="将 State 作为 Props 传递给子组件"></a>将 State 作为 Props 传递给子组件</h4><p>有状态的组件中包含对程序很重要的<code>state</code>，然后用它渲染子组件。如果想让这些组件能够访问该<code>state</code>的某些部分，就把这些部分作为props传入。</p><p><code>MyApp</code> 组件是有状态的，并将 <code>Navbar</code> 组件渲染为子组件。 将 <code>state</code> 的 <code>name</code> 属性向下传递给子组件，然后在 <code>h1</code> 中显示该 <code>name</code> ，h1 是 <code>Navbar</code> render方法的一部分。 <code>name</code> 应该显示在文本 <code>Hello, my name is:</code> 后面。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;CamperBot&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">Navbar</span> <span class="attr">name</span> = <span class="string">&#123;this.state.name&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Navbar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, my name is: &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第一个是<em>单向数据流</em>， state 沿着应用程序组件树的一个方向流动，从有状态父组件到子组件， 子组件只接收它们需要的 state 数据。 第二，复杂的有状态应用程序可以分解成几个，或者可能是一个单一的有状态组件。 其余组件只是从父组件简单的接收 state 作为 props，并从该 state 渲染 UI。 </p><h4 id="传递回调作为-Props"><a href="#传递回调作为-Props" class="headerlink" title="传递回调作为 Props"></a>传递回调作为 Props</h4><p>可以将 <code>state</code> 作为 props 传递给子组件，但不仅限于传递数据。 也可以将处理函数或在 React 组件中定义的任何方法传递给子组件。 这就是子组件与父组件交互的方式。 可以把方法像普通 prop 一样传递给子组件， 它会被分配一个名字，可以在子组件中的 <code>this.props</code> 下访问该方法的名字。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">inputValue</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">inputValue</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">GetInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">input</span>=<span class="string">&#123;this.state.inputValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">handleChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">RenderInput</span> <span class="attr">input</span>=<span class="string">&#123;this.state.inputValue&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Get Input:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.props.input&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.props.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RenderInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Input Render:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.input&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用生命周期方法"><a href="#使用生命周期方法" class="headerlink" title="使用生命周期方法"></a>使用生命周期方法</h4><p>React 组件有几种特殊方法，可以在组件生命周期的特定点执行操作。 这些称为生命周期方法或生命周期钩子，允许在特定时间点捕获组件。 这可以在渲染之前、更新之前、接收 props 之前、卸载之前等等。 以下是一些主要生命周期方法的列表： <code>componentWillMount()</code> <code>componentDidMount()</code> <code>shouldComponentUpdate()</code> <code>componentDidUpdate()</code> <code>componentWillUnmount()</code> </p><h5 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h5><p>当组件被挂载到DOM时，该方法在<code>render()</code>方法之前被调用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">nstructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h5><h6 id="对API进行调用"><a href="#对API进行调用" class="headerlink" title="对API进行调用"></a>对API进行调用</h6><p>React的最佳实践是在生命周期方法<code>componentDidMount()</code>中对服务器进行API调用或任何其它调用。将组件装载到DOM后会调用此方法。 此处对 <code>setState()</code> 的任何调用都将触发组件的重新渲染。 在此方法中调用 API 并用 API 返回的数据设置 state 时，一旦收到数据，它将自动触发更新。</p><p>函数中有一个模拟API调用。在2.5秒后设置state，以模拟服务器检索数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">activeUsers</span>: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">activeUsers</span>: <span class="number">1273</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Active Users: &#123;this.state.activeUsers&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="添加事件侦听器"><a href="#添加事件侦听器" class="headerlink" title="添加事件侦听器"></a>添加事件侦听器</h6><p><code>componentDidMount()</code> 方法也是添加特定功能所需的任何事件监听器的最佳位置。 React 提供了一个合成事件系统，它封装了浏览器中的事件系统。 这意味着，不管用户用的是什么浏览器，合成事件系统的行为都完全相同 — 即使不同浏览器之间的本地事件的行为可能不同。</p><p>React的合成事件系统非常适合用于在DOM元素上管理的大多数交互。但是如果将事件处理程序附加到document或window对象，则必须直接执行此操作。</p><p>在 <code>componentDidMount()</code> 方法中为 <code>keydown</code> 事件添加事件监听器，并让这些事件触发回调 <code>handleKeyPress()</code>。 可以使用<b><code>document.addEventListener()</code></b>，它将事件（用引号括起来）作为第一个参数，将回调作为第二个参数。</p><p>然后，在 <code>componentWillUnmount()</code> 中移除相同的事件监听器。 可以把相同的参数传递给 <code>document.removeEventListener()</code>。 在卸载和销毁 React 组件之前，最好在这个生命周期方法中对它们进行清理。 移除事件监听器就是这样一个清理操作的例子。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleEnter</span> = <span class="variable language_">this</span>.<span class="property">handleEnter</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleKeyPress</span> = <span class="variable language_">this</span>.<span class="property">handleKeyPress</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>,<span class="variable language_">this</span>.<span class="property">handleKeyPress</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;keydown&quot;</span>,<span class="variable language_">this</span>.<span class="property">handleKeyPress</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleEnter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">message</span>: state.<span class="property">message</span> + <span class="string">&#x27;You pressed the enter key! &#x27;</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleKeyPress</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">keyCode</span> === <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleEnter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="shouldComponentUpdate-优化重新渲染"><a href="#shouldComponentUpdate-优化重新渲染" class="headerlink" title="shouldComponentUpdate 优化重新渲染"></a>shouldComponentUpdate 优化重新渲染</h5><p>目前为止，任何组件接受到新的<code>state</code>或新的<code>props</code>，它会重新渲染自己及其所有的组件。React中提供了一种生命周期方法，当子组件接收到新的<code>state</code>或<code>props</code>时，可以调用该方法，特别声明组件是否应该更新。这个方法就是<code>shouldComponentUpdate ()</code>，它将<code>nextProps</code>和<code>nextState</code>作为参数</p><p>将 <code>shouldComponentUpdate()</code> 方法添加到名为 <code>OnlyEvens</code> 的组件中。  <code>OnlyEvens</code> 仅在其新 props 的 <code>value</code> 为偶数时更新。 单击 <code>Add</code> 按钮，在触发其他生命周期钩子时，在浏览器控制台中查看事件的顺序。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OnlyEvens</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Should I update?&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(nextProps.<span class="property">value</span>%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Component re-rendered.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Controller</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">addValue</span> = <span class="variable language_">this</span>.<span class="property">addValue</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">value</span>: state.<span class="property">value</span> + <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addValue&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">OnlyEvens</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>JSX元素使用<code>style</code>属性，但是鉴于JSX的编译方式，不能将值设置为<code>string</code>（字符串）。相反，应该将其值设置为<code>object</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>:<span class="string">&quot;red&quot;</span>,<span class="attr">fontSize</span>:<span class="string">&quot;72px&quot;</span>&#125;&#125;&gt;<span class="title class_">Big</span> <span class="title class_">Red</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>由于React不支持kebab-case键。所以用驼峰拼写了font-size</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Colorful</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&quot;<span class="attr">red</span>&quot;,<span class="attr">fontSize:</span>&quot;<span class="attr">72px</span>&quot;&#125;&#125;&gt;</span>Big Red<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果有大量的样式，可以将样式<code>object</code>分配给一个常量。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> styles = &#123;</span><br><span class="line">  <span class="attr">color</span>:<span class="string">&quot;purple&quot;</span>,</span><br><span class="line">  <span class="attr">fontSize</span>:<span class="number">40</span>,</span><br><span class="line">  <span class="attr">border</span>:<span class="string">&quot;2px solid purple&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Colorful</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;styles&#125;</span>&gt;</span>Style Me!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="在-React-Render-方法中使用-JavaScript"><a href="#在-React-Render-方法中使用-JavaScript" class="headerlink" title="在 React Render 方法中使用 JavaScript"></a>在 React Render 方法中使用 JavaScript</h2><p>在<code>render</code>中编写js，可以把js直接放在<code>return</code>语句之前，而不必插入大括号中。后续想要引用可以将变量名放入大括号中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputStyle = &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">235</span>,</span><br><span class="line">  <span class="attr">margin</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MagicEightBall</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">userInput</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">randomIndex</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ask</span> = <span class="variable language_">this</span>.<span class="property">ask</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">ask</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">userInput</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">randomIndex</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">20</span>),</span><br><span class="line">        <span class="attr">userInput</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">userInput</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> possibleAnswers = [</span><br><span class="line">      <span class="string">&#x27;It is certain&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;It is decidedly so&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Without a doubt&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Yes, definitely&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;You may rely on it&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;As I see it, yes&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Outlook good&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Yes&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Signs point to yes&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Reply hazy try again&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Ask again later&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Better not tell you now&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Cannot predict now&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Concentrate and ask again&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;Don&#x27;t count on it&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;My reply is no&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;My sources say no&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Most likely&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Outlook not so good&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Very doubtful&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">const</span> answer = possibleAnswers[<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">randomIndex</span>]; </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.userInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;inputStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.ask&#125;</span>&gt;</span>Ask the Magic Eight Ball!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Answer:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;answer&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="If-Else-条件进行渲染"><a href="#If-Else-条件进行渲染" class="headerlink" title="If-Else 条件进行渲染"></a>If-Else 条件进行渲染</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">display</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toggleDisplay</span> = <span class="variable language_">this</span>.<span class="property">toggleDisplay</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toggleDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">display</span>: !state.<span class="property">display</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 修改这行下面的代码</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">display</span> == <span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggleDisplay&#125;</span>&gt;</span>Toggle Display<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Displayed!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggleDisplay&#125;</span>&gt;</span>Toggle Display<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="amp-amp-获得更简洁的条件"><a href="#amp-amp-获得更简洁的条件" class="headerlink" title="&amp;&amp; 获得更简洁的条件"></a>&amp;&amp; 获得更简洁的条件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">display</span> &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Displayed!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125;</span><br></pre></td></tr></table></figure><p>当<code>this.state.display</code>为true的时候，则返回标记。如果为false，则不返回任何内容</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">display</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toggleDisplay</span> = <span class="variable language_">this</span>.<span class="property">toggleDisplay</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toggleDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">display</span>: !state.<span class="property">display</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggleDisplay&#125;</span>&gt;</span>Toggle Display<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         &#123;this.state.display &amp;&amp; <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Displayed!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="三元表达式进行条件渲染"><a href="#三元表达式进行条件渲染" class="headerlink" title="三元表达式进行条件渲染"></a>三元表达式进行条件渲染</h2><p>语法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? expressionIfTrue : expressionIfFalse;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputStyle = &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">235</span>,</span><br><span class="line">  <span class="attr">margin</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CheckUserAge</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">      <span class="attr">input</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">userAge</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">submit</span> = <span class="variable language_">this</span>.<span class="property">submit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">input</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">userAge</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">userAge</span>: state.<span class="property">input</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> buttonOne = <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.submit&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">const</span> buttonTwo = <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>You May Enter<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">const</span> buttonThree = <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>You Shall Not Pass<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Enter Your Age to Continue<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;inputStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&#x27;number&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; this.state.userAge === &#x27;&#x27;?buttonOne: this.state.userAge&gt;=18?buttonTwo:buttonThree&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Props-有条件"><a href="#Props-有条件" class="headerlink" title="Props 有条件"></a>Props 有条件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Results</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; this.props.fiftyFifty ?&quot;You Win!&quot;:&quot;You Lose!&quot;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameOfChance</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">counter</span>: prevState.<span class="property">counter</span>+<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> expression = <span class="title class_">Math</span>.<span class="title function_">random</span>()&gt;=<span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Play Again<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Results</span> <span class="attr">fiftyFifty</span>=<span class="string">&#123;expression&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#x27;Turn: &#x27; + this.state.counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件状态有条件地更改内联-CSS"><a href="#组件状态有条件地更改内联-CSS" class="headerlink" title="组件状态有条件地更改内联 CSS"></a>组件状态有条件地更改内联 CSS</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GateKeeper</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">input</span>: event.<span class="property">target</span>.<span class="property">value</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> inputStyle = &#123;</span><br><span class="line">      <span class="attr">border</span>: <span class="string">&#x27;1px solid black&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">input</span>.<span class="property">length</span> &gt; <span class="number">15</span>)&#123;</span><br><span class="line">      inputStyle = &#123;</span><br><span class="line">      <span class="attr">border</span>: <span class="string">&#x27;3px solid red&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Don&#x27;t Type Too Much:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;inputStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Array-map-动态渲染元素"><a href="#Array-map-动态渲染元素" class="headerlink" title="Array.map() 动态渲染元素"></a>Array.map() 动态渲染元素</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textAreaStyles = &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">235</span>,</span><br><span class="line">  <span class="attr">margin</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyToDoList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">userInput</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">toDoList</span>:[]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> itemsArray = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">userInput</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">toDoList</span>: itemsArray</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">userInput</span>: e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">toDoList</span>.<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;i&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>); <span class="comment">// 修改这一行</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.userInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;textAreaStyles&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">placeholder</span>=<span class="string">&#x27;Separate Items With Commas&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span>Create List<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My &quot;To Do&quot; List:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;items&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同级元素一个唯一的键属性"><a href="#同级元素一个唯一的键属性" class="headerlink" title="同级元素一个唯一的键属性"></a>同级元素一个唯一的键属性</h2><p>这里的同级元素<code>li</code>每一个都有一个属性<code>key</code>其值为它所渲染在浏览器上的值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> frontEndFrameworks = [</span><br><span class="line">  <span class="string">&#x27;React&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Angular&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Ember&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Knockout&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Backbone&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Frameworks</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> renderFrameworks = frontEndFrameworks.<span class="title function_">map</span>(<span class="function"><span class="params">a</span>=&gt;</span><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>  <span class="attr">key</span>=<span class="string">&#123;a&#125;</span>&gt;</span>&#123;a&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>); <span class="comment">// 修改这一行</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Popular Front End JavaScript Frameworks<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;renderFrameworks&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Array-Filter-动态过滤数组"><a href="#Array-Filter-动态过滤数组" class="headerlink" title="Array.Filter() 动态过滤数组"></a>Array.Filter() 动态过滤数组</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">users</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;Jeff&#x27;</span>,</span><br><span class="line">          <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;Alan&#x27;</span>,</span><br><span class="line">          <span class="attr">online</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">          <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;Jim&#x27;</span>,</span><br><span class="line">          <span class="attr">online</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;Sara&#x27;</span>,</span><br><span class="line">          <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;Laura&#x27;</span>,</span><br><span class="line">          <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> usersOnline = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">users</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span>=&gt;</span>user.<span class="property">online</span>);</span><br><span class="line">    <span class="keyword">const</span> renderOnline = usersOnline.<span class="title function_">map</span>(<span class="function"><span class="params">user</span>=&gt;</span><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.username&#125;</span>&gt;</span>&#123;user.username&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Current Online Users:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;renderOnline&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="renderToString-在服务器上渲染-React"><a href="#renderToString-在服务器上渲染-React" class="headerlink" title="renderToString 在服务器上渲染 React"></a>renderToString 在服务器上渲染 React</h2><p>在一些用例中，需要在服务器上渲染一个 React 组件。 由于 React 是一个 JavaScript 视图库，所以通常使用 Node 让 JavaScript 运行在服务器上。 事实上，React 提供了一个可用于此目的的 <code>renderToString()</code> 方法。</p><p>有两个关键原因可以解释为什么服务器上的渲染可能会在真实世界的应用程序中使用。 首先，如果不这样做，当 React 应用程序最初加载到浏览器时，它将包含一个代码量很少的 HTML 文件和一大堆 JavaScript。 这对于搜索引擎来说可能不太理想，因为它们试图为网页内容生成索引，以便人们可以找到这个应用。 如果在服务器上渲染初始 HTML 标记并将其发送到客户端，则初始页面加载的内容包含搜索引擎可以抓取的所有页面标记。 其次，这创造了更快的初始页面加载体验，因为渲染的 HTML 代码量要比整个应用程序的 JavaScript 代码小。 React 仍然能够识别你的应用并在初始加载后进行管理。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOMServer</span>.<span class="title function_">renderToString</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2024/07/26/4%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/07/26/4%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-26</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/reverse-string/description/">LeetCode-344反转字符串</a></p><p><a href="https://leetcode.cn/problems/reverse-string-ii/description/">LeetCode-541反转字符串 II</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-27</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">LeetCode-151反转字符串中的单词</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-（28~30）</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/description/">LeetCode-459重复的子字符串</a></p></div></div></div><h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><h3 id="leetcode-344反转字符串"><a href="#leetcode-344反转字符串" class="headerlink" title="leetcode-344反转字符串"></a>leetcode-344反转字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left,right;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;left &lt; right;left++,right--)&#123;</span><br><span class="line">            <span class="type">char</span> temp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">            <span class="comment">//swap(s[left],s[right]);可以直接使用这个代替</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240726113703.png" alt=""></p><h3 id="leetcode-541反转字符串-II"><a href="#leetcode-541反转字符串-II" class="headerlink" title="leetcode-541反转字符串 II"></a>leetcode-541反转字符串 II</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; s.<span class="built_in">size</span>();i += <span class="number">2</span>*k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+k &lt;= s.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>()+i,s.<span class="built_in">begin</span>()+i+k);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>()+i,s.<span class="built_in">end</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240726131350.png" alt=""></p><h2 id="反转字符串中的单词"><a href="#反转字符串中的单词" class="headerlink" title="反转字符串中的单词"></a>反转字符串中的单词</h2><h3 id="leetcode-151反转字符串中的单词"><a href="#leetcode-151反转字符串中的单词" class="headerlink" title="leetcode-151反转字符串中的单词"></a>leetcode-151反转字符串中的单词</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fast, slow, flag;</span><br><span class="line">        fast = slow = flag = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 去除文本开头的空格</span></span><br><span class="line">        <span class="comment">// while (fast &lt; s.size() &amp;&amp; s[fast] == &#x27; &#x27;) &#123;</span></span><br><span class="line">        <span class="comment">//     fast++;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (; fast &lt; s.<span class="built_in">size</span>(); fast++) &#123; <span class="comment">// 删除多余的空格</span></span><br><span class="line">            <span class="keyword">if</span> (fast &lt; s.<span class="built_in">size</span>() &amp;&amp; s[fast] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (slow != <span class="number">0</span>) &#123;</span><br><span class="line">                    s[slow] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                    slow++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; fast &lt; s.<span class="built_in">size</span>() &amp;&amp; s[fast] != <span class="string">&#x27; &#x27;</span>;) &#123;</span><br><span class="line">                    s[slow] = s[fast];</span><br><span class="line">                    fast++;</span><br><span class="line">                    slow++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">resize</span>(slow); <span class="comment">// 因为slow都要自增所以，slow现在是新字符串的大小</span></span><br><span class="line">        <span class="comment">// 反转整个字符串</span></span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        slow = fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; fast &lt;= s.<span class="built_in">size</span>(); fast++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast == s.<span class="built_in">size</span>() || s[fast] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + slow, s.<span class="built_in">begin</span>() + fast);</span><br><span class="line">                slow = ++fast;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240727163415.png" alt=""></p><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>解决字符串匹配的问题</p><p>前缀表</p><h4 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h4><p>包含首字母，不包含尾字母的所有字符串</p><p><strong>例如</strong>：aabaaf这个字符串</p><p>a、aa、aab、aaba、aabaa都是它的前缀（前缀是连续的）</p><h4 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h4><p>只包含尾字母不包含首字母的子字符串</p><p><strong>例如</strong>：aabaaf这个字符串</p><p>f、af、aaf、baaf、abaaf都是它的后缀</p><h4 id="最长相等前后缀"><a href="#最长相等前后缀" class="headerlink" title="最长相等前后缀"></a>最长相等前后缀</h4><p><strong>例1</strong>：a</p><p>由于没有前缀和后缀即为0</p><p><strong>例2</strong>：aa</p><p>前缀：a   后缀：a</p><p>最长相等前后缀为：1</p><p><strong>例3</strong>：aab</p><p>前缀：aa、a  后缀ab、b</p><p>最长相等前后缀为：0</p><p><strong>例4</strong>：aaba</p><p>前缀：a、aa、aab 后缀：a、ba、aba</p><p>最长相等前后缀为：1</p><p><strong>例5</strong>：aabaa</p><p>前缀：a、aa、aab、aaba  后缀：a、aa、baa、abaa</p><p>最长相等前后缀为：2</p><p><strong>例6</strong>：aabaaf</p><p>前缀：a、aa、aab、aaba、aabaa  后缀：f、af、aaf、baaf、abaaf</p><p>最长相等前后缀为：0</p><p>模式串aabaaf的前缀表</p><div class="table-container"><table><thead><tr><th></th><th>a</th><th>a</th><th>b</th><th>a</th><th>a</th><th>f</th></tr></thead><tbody><tr><td>前缀</td><td>0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>0</td></tr></tbody></table></div><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240728162825.png" alt=""></p><h3 id="求解前缀表next数组"><a href="#求解前缀表next数组" class="headerlink" title="求解前缀表next数组"></a>求解前缀表next数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;next, string s)</span> </span>&#123;<span class="comment">//i指向后缀末尾，j指向前缀末尾（最长相等前后缀的大小）</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) &#123;<span class="comment">//前后缀不相同</span></span><br><span class="line">j = next[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">j++;</span><br><span class="line">next[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">next[i] = <span class="number">0</span>;<span class="comment">//不相等，但是j以及走到了起始位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s = <span class="string">&quot;aabaaf&quot;</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(s.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="built_in">getNext</span>(next, s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240729170002.png" alt=""></p><p><a href="https://blog.csdn.net/yearn520/article/details/6729426">next数组</a></p><h3 id="leetcode-459重复的子字符串"><a href="#leetcode-459重复的子字符串" class="headerlink" title="leetcode-459重复的子字符串"></a>leetcode-459重复的子字符串</h3><h4 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string mode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; s.<span class="built_in">size</span>()/<span class="number">2</span>;i++)&#123;<span class="comment">//拼接字符串的长度一定是小于等于s的，所以子串的长度应该小于s.size()/2</span></span><br><span class="line">            mode += s[i];</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">size</span>()%mode.<span class="built_in">size</span>()==<span class="number">0</span>)&#123;</span><br><span class="line">                string temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; s.<span class="built_in">size</span>()/mode.<span class="built_in">size</span>();j++)&#123;<span class="comment">//可考略类似于幂运算的方式相加字符串，目前不会。</span></span><br><span class="line">                    temp += mode;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(temp == s) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="移动匹配"><a href="#移动匹配" class="headerlink" title="移动匹配"></a>移动匹配</h4><h5 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string S = s+s;</span><br><span class="line">        S.<span class="built_in">erase</span>(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//删掉首字母</span></span><br><span class="line">        S.<span class="built_in">erase</span>(S.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">1</span>);<span class="comment">//删掉尾字母</span></span><br><span class="line">        <span class="keyword">return</span> S.<span class="built_in">contains</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string S = s+s;</span><br><span class="line">        S.<span class="built_in">erase</span>(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//删掉首字母</span></span><br><span class="line">        S.<span class="built_in">erase</span>(S.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">1</span>);<span class="comment">//删掉尾字母</span></span><br><span class="line">        <span class="keyword">if</span>(S.<span class="built_in">find</span>(s) != string::npos)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240730124819.png" alt=""></p><h4 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(s.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j])&#123;</span><br><span class="line">                j = next[j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == s[j])&#123;</span><br><span class="line">                j++;</span><br><span class="line">                next[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(next[s.<span class="built_in">size</span>()<span class="number">-1</span>]!=<span class="number">0</span> &amp;&amp; s.<span class="built_in">size</span>()%(s.<span class="built_in">size</span>()-next[s.<span class="built_in">size</span>()<span class="number">-1</span>]) == <span class="number">0</span>)&#123;<span class="comment">//如果是重复子串组成，那么它的最小重复子串可以被整除</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240730133546.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 和算法斗志斗勇的日子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="/2024/07/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/07/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="函数式编程-1"><a href="#函数式编程-1" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>①功能独立——不依赖于程序的状态（比如可能发生变化的全局变量）</p><p>②纯函数——同一输入永远得到同一输出</p><p>③有限的副作用——可以严格地限制函数外部对状态的更改</p><h2 id="函数编程术语"><a href="#函数编程术语" class="headerlink" title="函数编程术语"></a>函数编程术语</h2><p>①callbacks回调函数：是在被传递到另一个函数中调用函数。</p><p>②头等函数：可以像其他正常值一样，赋值给变量、传递给另一个函数，或从其他函数返回。js中所有的函数都是头等函数。</p><p>③高阶函数：作为参数或将函数作为返回值返回的函数。</p><p>④lambda：函数被传递给另一个函数或从另一个函数返回时。</p><h2 id="避免变化和副作用"><a href="#避免变化和副作用" class="headerlink" title="避免变化和副作用"></a>避免变化和副作用</h2><p>函数式编程的核心原则之一是不改变任何东西。变化会导致错误。如果一个函数不改变传入的参数、全局变量等数据，那么它造成问题的可能性会小很多。</p><h2 id="传递参数避免外部依赖"><a href="#传递参数避免外部依赖" class="headerlink" title="传递参数避免外部依赖"></a>传递参数避免外部依赖</h2><p>函数式编程的另一个原则是：总是显示声明依赖关系。如果函数依赖于一个变量或对象，那么将该变量或对象作为参数直接传递到函数中。</p><p>类似于<code>const newarr = arr;</code>这种，<code>newarr</code>只是一个副本一个引用，当<code>newarr</code>中的内容修改的时候也会修改<code>arr</code>中的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">const</span> bookList = [<span class="string">&quot;The Hound of the Baskervilles&quot;</span>, <span class="string">&quot;On The Electrodynamics of Moving Bodies&quot;</span>, <span class="string">&quot;Philosophiæ Naturalis Principia Mathematica&quot;</span>, <span class="string">&quot;Disquisitiones Arithmeticae&quot;</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">bl,bookName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> book = [...bl];</span><br><span class="line">    book.<span class="title function_">push</span>(bookName);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">bl,bookName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> book = [...bl];</span><br><span class="line">    <span class="keyword">const</span> book_index = book.<span class="title function_">indexOf</span>(bookName);</span><br><span class="line">    <span class="keyword">if</span> (book_index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        book.<span class="title function_">splice</span>(book_index, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(bookList,<span class="string">&quot;a&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">remove</span>(bookList,<span class="string">&quot;The Hound of the Baskervilles&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bookList);</span><br></pre></td></tr></table></figure><h2 id="函数柯里化和局部调用"><a href="#函数柯里化和局部调用" class="headerlink" title="函数柯里化和局部调用"></a>函数柯里化和局部调用</h2><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><p>函数柯里化意思是把接受多个参数的函数变换成接受单一参数的函数。换句话说就是重构函数让它接受一个参数，饭后返回接收下一个参数的函数</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unCurried</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">curried</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="title function_">curried</span>(<span class="number">1</span>)(<span class="number">2</span>)<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>柯里化在不能一次为函数提供所有参数情况下很有用。可以将每个函数的调用保存到一个变量中，该变量将保存返回的函数引用，该引用在下一个参数可用时接受该参数。</p><h3 id="局部调用"><a href="#局部调用" class="headerlink" title="局部调用"></a>局部调用</h3><p>局部调用意思是一次对一个函数应用几个参数，然后返回另一个应用更多参数的函数</p><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">impartial</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> partialFn = impartial.<span class="title function_">bind</span>(<span class="variable language_">this</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">partialFn</span>(<span class="number">10</span>); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><h2 id="数组函数"><a href="#数组函数" class="headerlink" title="数组函数"></a>数组函数</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>数组的<code>map</code>方法（即<code>Array.prototype.map()</code>)。</p><p><code>map</code>方法是迭代数组中的每一项的方式之一。在对每一个元素应用回调函数后，它会创建一个新数组（不改变原来的数组）。</p><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>), thisValue)</span><br></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li>function(currentValue,index,arr)：必须。函数，数组中的每个元素都会执行这个函数<ul><li>currentValue：必须。当前元素值</li><li>index：可选。当前元素的索引值</li><li>arr：可选。当前元素属于的数组对象</li></ul></li><li>thisValue：可选。</li><li>对象作为该执行回调时使用，传递给函数，用作 “this” 的值。<br>如果省略了 thisValue，或者传入 null、undefined，那么回调函数的 this 为全局对象。</li></ul><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;camperCat&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);<span class="comment">//[ &#x27;John&#x27;, &#x27;Amy&#x27;, &#x27;camperCat&#x27; ]</span></span><br></pre></td></tr></table></figure><h5 id="实现自己的map方法"><a href="#实现自己的map方法" class="headerlink" title="实现自己的map方法"></a>实现自己的map方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myMap</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArray = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">Value,index, array</span>)&#123;</span><br><span class="line">    newArray.<span class="title function_">push</span>(<span class="title function_">callback</span>(<span class="title class_">Value</span>,index,array));</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><h5 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>), thisValue)</span><br></pre></td></tr></table></figure><h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><ul><li>function(currentValue,index,arr)：必须。函数，数组中的每个元素都会执行这个函数<ul><li>currentValue：必须。当前元素值</li><li>index：可选。当前元素的索引值</li><li>arr：可选。当前元素属于的数组对象</li></ul></li><li>thisValue：可选。</li><li>对象作为该执行回调时使用，传递给函数，用作 “this” 的值。<br>如果省略了 thisValue，或者传入 null、undefined，那么回调函数的 this 为全局对象。</li></ul><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;camperCat&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> usersUnder30 = users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">age</span> &lt; <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(usersUnder30); <span class="comment">//[ &#123; name: &#x27;Amy&#x27;, age: 20 &#125;, &#123; name: &#x27;camperCat&#x27;, age: 10 &#125; ]</span></span><br></pre></td></tr></table></figure><h5 id="实现自己的filter方法"><a href="#实现自己的filter方法" class="headerlink" title="实现自己的filter方法"></a>实现自己的filter方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFilter</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArray = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value,index,array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">callback</span>(value,index,array))&#123;</span><br><span class="line">      newArray.<span class="title function_">push</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><h5 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">slice</span>(start, end)<span class="comment">//[start,end)</span></span><br></pre></td></tr></table></figure><h5 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h5><p>start：可选。规定从何处开始选取。如果是负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。</p><p>end：可选，规定何处结束选取。如果为负数， 则表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。</p><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;Tiger&quot;</span>, <span class="string">&quot;Zebra&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//[&quot;Dog&quot;, &quot;Tiger&quot;]</span></span><br></pre></td></tr></table></figure><h5 id="slice代替splice"><a href="#slice代替splice" class="headerlink" title="slice代替splice"></a><code>slice</code>代替<code>splice</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">nonMutatingSplice</span>(<span class="params">cities</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cities.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//return cities.splice(3);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p><code>concat</code>方法，在一个数组上调用<code>concat</code>方法，然后提供另一个数组作为参数添加到第一个数组的末尾。返回一个新的数组，不会改变任何一个原始数组。</p><h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">concat</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);<span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h5 id="concat代替push"><a href="#concat代替push" class="headerlink" title="concat代替push"></a><code>concat</code>代替<code>push</code></h5><p><code>push</code>将一个元素添加到调用它的数组末尾，这样会改变数组，因此这并不是函数式编程。所以用<code>concat</code>方法将新的内容添加到数组的末尾。</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><code>reduce</code>是处理数组更通用的方式，而<code>filter</code>和<code>map</code>方法都可以当作是<code>reduce</code>的特殊实现。方法遍历数组的每个项目并返回单个值。这是通过每次迭代中调用一个回调函数来实现的。</p><h5 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), initialValue)</span><br></pre></td></tr></table></figure><h5 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h5><ul><li>function(total, currentValue, currentIndex, arr)：必需。用于执行每个数组元素的函数<ul><li>total：必需。初始值，或者计算结束后的返回值（叠加器，它是上一次迭代中回调函数的返回值）</li><li>currentValue：必需。当前元素</li><li>currentIndex：可选。当前元素索引</li><li>arr：可选。当前元素所属的数组对象</li></ul></li><li>initialValue：可选。传递给函数的初始值（叠加器的初始值），如果没有这个参数，会跳过第一次迭代，第二次迭代给叠加器传入数组的第一个元素</li></ul><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p><code>sort</code>方法可以根据回调函数对数组元素进行排序，<code>sort</code>方法会产生改变原始数组中元素顺序的副作用</p><h5 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">sort</span>(sortfunction)</span><br></pre></td></tr></table></figure><h5 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h5><p>sortfunction：可选。规定排序顺序。必须是函数</p><h5 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ascendingOrder</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ascendingOrder</span>([<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);<span class="comment">//[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseAlpha</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a === b ? <span class="number">0</span> : a &lt; b ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reverseAlpha</span>([<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;s&#x27;</span>]);<span class="comment">//[&#x27;z&#x27;, &#x27;s&#x27;, &#x27;l&#x27;, &#x27;h&#x27;, &#x27;b&#x27;]``</span></span><br></pre></td></tr></table></figure><ul><li>如果 a 应该位于 b 之前(a&lt;b)，则返回一个小于 0 的值（这里返回 1）。</li><li>如果 a 和 b 相等，则返回 0。</li><li>如果 a 应该位于 b 之后(a&gt;b)，则返回一个大于 0 的值（这里返回 -1）。</li></ul><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><h5 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">join</span>(separator)</span><br></pre></td></tr></table></figure><h5 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h5><p>separator：可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符</p><h5 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">urlSlug</span>(<span class="params">title</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = title.<span class="title function_">split</span>(<span class="regexp">/\W/</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">ar</span> =&gt;</span> ar !== <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">    <span class="keyword">let</span> m = arr.<span class="title function_">map</span>(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toLowerCase</span>() + a.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> m.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">urlSlug</span>(<span class="string">&quot;A  Mind Needs Books Like A Sword Needs A Whetstone&quot;</span>));<span class="comment">//a-mind-needs-books-like-a-sword-needs-a-whetstone</span></span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p><code>every</code>方法用于检测数组中所有元素是否都符合指定条件。如果所有元素满足条件，返回布尔值<code>true</code>，反之返回<code>false</code></p><h5 id="语法格式-6"><a href="#语法格式-6" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>), thisValue)</span><br></pre></td></tr></table></figure><h5 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h5><ul><li>function(currentValue,index,arr)：必须。函数，数组中的每个元素都会执行这个函数<ul><li>currentValue：必须。当前元素值</li><li>index：可选。当前元素的索引值</li><li>arr：可选。当前元素属于的数组对象</li></ul></li><li>thisValue：可选。</li><li>对象作为该执行回调时使用，传递给函数，用作 “this” 的值。<br>如果省略了 thisValue，“this”的值为“undefined”</li></ul><h5 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">currentValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p><code>some</code>方法用于检测数组中任何元素是否满足指定条件。如果<strong>有一个元素满足</strong>条件，返回布尔值<code>true</code>，反之返回<code>false</code></p><h5 id="语法格式-7"><a href="#语法格式-7" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>),thisValue)</span><br></pre></td></tr></table></figure><h5 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h5><ul><li>function(currentValue,index,arr)：必须。函数，数组中的每个元素都会执行这个函数<ul><li>currentValue：必须。当前元素值</li><li>index：可选。当前元素的索引值</li><li>arr：可选。当前元素属于的数组对象</li></ul></li><li>thisValue：可选。</li><li>对象作为该执行回调时使用，传递给函数，用作 “this” 的值。<br>如果省略了 thisValue，“this”的值为“undefined”</li></ul><h5 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">220</span>, <span class="number">110</span>, <span class="number">11</span>];</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">currentValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h2><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><h5 id="语法格式-8"><a href="#语法格式-8" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="title function_">split</span>(separator,limit)</span><br></pre></td></tr></table></figure><h5 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h5><p>separator：可选。字符串或正则表达式，从该参数指定的地方分割字符串对象</p><p>limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置改参数，整个字符串都会被分割，不考虑它的长度</p><h5 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> bySpace = str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);<span class="comment">//[&quot;Hello&quot;, &quot;World&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> otherString = <span class="string">&quot;How9are7you2today&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> byDigits = otherString.<span class="title function_">split</span>(<span class="regexp">/\d/</span>);<span class="comment">//[&quot;How&quot;, &quot;are&quot;, &quot;you&quot;, &quot;today&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&quot;Hello World,I-am code&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> byOther = s.<span class="title function_">split</span>(<span class="regexp">/\W/</span>);<span class="comment">//[ &#x27;Hello&#x27;, &#x27;World&#x27;, &#x27;I&#x27;, &#x27;am&#x27;, &#x27;code&#x27; ]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2024/07/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/07/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式中不需要引号</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>测试正则表达式的方法<code>.test()</code>方法。该方法会把编写的正则表达式和字符串匹配，如果成功匹配到字符，则返回<code>true</code>，反之，返回<code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myString = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/Hello/</span>;</span><br><span class="line"><span class="keyword">let</span> result = myRegex.<span class="title function_">test</span>(myString);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>可以使用<code>.match()</code>方法来提取找到的实际匹配项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> extractStr = <span class="string">&quot;Extract the word &#x27;coding&#x27; from this string.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> codingRegex = <span class="regexp">/coding/</span>;</span><br><span class="line"><span class="keyword">let</span> result = extractStr.<span class="title function_">match</span>(codingRegex);<span class="comment">//[&quot;coding&quot;]</span></span><br></pre></td></tr></table></figure><p><code>match</code>和<code>test</code>语法使用时相反的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;string&#x27;.match(/regex/);</span><br><span class="line">/regex/.test(&#x27;string&#x27;);</span><br></pre></td></tr></table></figure><h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><h3 id="匹配文字字符串"><a href="#匹配文字字符串" class="headerlink" title="匹配文字字符串"></a>匹配文字字符串</h3><h4 id="单模式"><a href="#单模式" class="headerlink" title="单模式"></a>单模式</h4><p>若是匹配<code>“Waldo”</code>字符串，所以正则表达式是<code>/Waldo/</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> waldoIsHiding = <span class="string">&quot;Somewhere Waldo is hiding in this text.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> waldoRegex = <span class="regexp">/Waldo/</span>; </span><br><span class="line"><span class="keyword">let</span> result = waldoRegex.<span class="title function_">test</span>(waldoIsHiding);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="多模式"><a href="#多模式" class="headerlink" title="多模式"></a>多模式</h4><p>可以使用<code>or</code>操作符搜索多个模式：<code>|</code></p><p>匹配到bird、cat、fish、dog</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> petString = <span class="string">&quot;James has a pet cat.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> petRegex = <span class="regexp">/bird|cat|fish|dog/</span>;</span><br><span class="line"><span class="keyword">let</span> result = petRegex.<span class="title function_">test</span>(petString);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="忽略大小"><a href="#忽略大小" class="headerlink" title="忽略大小"></a>忽略大小</h4><p>忽略大小写的标志——<code>i</code>。可以通过附加到正则表达式之后来使用它</p><p>匹配到字符串<code>freeCodeCamp</code>，并且忽略大小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myString = <span class="string">&quot;freeCodeCamp&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> fccRegex = <span class="regexp">/freeCodeCamp/i</span>; </span><br><span class="line"><span class="keyword">let</span> result = fccRegex.<span class="title function_">test</span>(myString);</span><br></pre></td></tr></table></figure><h4 id="全局匹配"><a href="#全局匹配" class="headerlink" title="全局匹配"></a>全局匹配</h4><p>到目前为止所有的匹配都是一次模式匹配。要多次搜索或提取模型，可以使用全局搜索标志<code>g</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> twinkleStar = <span class="string">&quot;Twinkle, twinkle, little star&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> starRegex = <span class="regexp">/Twinkle/gi</span>; </span><br><span class="line"><span class="keyword">let</span> result = twinkleStar.<span class="title function_">match</span>(starRegex);<span class="comment">//[ &#x27;Twinkle&#x27;, &#x27;twinkle&#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>如果不知道确切的字符。或者匹配的完整单词出现部分错误。可以用通配符<code>.</code>来处理这种情况。通配符将匹配任何一个字符</p><p>这里匹配所有的sun、run、fun等字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> exampleStr = <span class="string">&quot;Let&#x27;s have fun with regular expressions!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> unRegex = <span class="regexp">/.un/</span>;</span><br><span class="line"><span class="keyword">let</span> result = unRegex.<span class="title function_">test</span>(exampleStr);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p>可以使用字符集更灵活的匹配字符。可以把字符集放在方括号(<code>[</code>和<code>]</code>)之间来定义一组需要匹配的字符串。</p><p>这里匹配元音字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quoteSample = <span class="string">&quot;Beware of bugs in the above code; I have only proved it correct, not tried it.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> vowelRegex = <span class="regexp">/[aeiou]/ig</span>; </span><br><span class="line"><span class="keyword">let</span> result = quoteSample.<span class="title function_">match</span>(vowelRegex); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#x27;e&#x27;, &#x27;a&#x27;, &#x27;e&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;i&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;e&#x27;, &#x27;a&#x27;, &#x27;o&#x27;, &#x27;e&#x27;, &#x27;o&#x27;, &#x27;e&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;I&#x27;, &#x27;a&#x27;, &#x27;e&#x27;, &#x27;o&#x27;, &#x27;o&#x27;, &#x27;e&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;i&#x27;, &#x27;o&#x27;, &#x27;e&#x27;, &#x27;o&#x27;, &#x27;i&#x27;, &#x27;e&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;i&#x27;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="连字符"><a href="#连字符" class="headerlink" title="连字符"></a>连字符</h4><p>当需要匹配大量字符（例如：字母表中的每个字母）。在字符集中，可以使用连字符（<code>-</code>）来定义要匹配的字符范围。</p><h5 id="匹配字母"><a href="#匹配字母" class="headerlink" title="匹配字母"></a>匹配字母</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quoteSample = <span class="string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> alphabetRegex = <span class="regexp">/[a-z]/ig</span>; </span><br><span class="line"><span class="keyword">let</span> result = quoteSample.<span class="title function_">match</span>(alphabetRegex); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#x27;T&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;q&#x27;, &#x27;u&#x27;, &#x27;i&#x27;, &#x27;c&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;k&#x27;, &#x27;b&#x27;, &#x27;r&#x27;, &#x27;o&#x27;, &#x27;w&#x27;, &#x27;n&#x27;, &#x27;f&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;o&#x27;, &#x27;x&#x27;, &#x27;j&#x27;, &#x27;u&#x27;, &#x27;m&#x27;, &#x27;p&#x27;, &#x27;s&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;o&#x27;, &#x27;v&#x27;, &#x27;e&#x27;, &#x27;r&#x27;, &#x27;t&#x27;, &#x27;h&#x27;, &#x27;e&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;l&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;y&#x27;, &#x27;d&#x27;, &#x27;o&#x27;, &#x27;g&#x27;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="匹配数字"><a href="#匹配数字" class="headerlink" title="匹配数字"></a>匹配数字</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quoteSample = <span class="string">&quot;Blueberry 3.141592653s are delicious.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/[h-s2-6]/ig</span>;</span><br><span class="line"><span class="keyword">let</span> result = quoteSample.<span class="title function_">match</span>(myRegex);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#x27;l&#x27;, &#x27;r&#x27;, &#x27;r&#x27;, &#x27;3&#x27;, &#x27;4&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;5&#x27;, &#x27;2&#x27;, &#x27;6&#x27;, &#x27;5&#x27;, &#x27;3&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;s&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;i&#x27;, &#x27;i&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;o&#x27;, &#x27;s&#x27;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>查找数字字符的缩写是<code>\d</code>，等同于元字符<code>[0-9]</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> movieName = <span class="string">&quot;2001: A Space Odyssey&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> numRegex = <span class="regexp">/\d/g</span>; </span><br><span class="line"><span class="keyword">let</span> result = movieName.<span class="title function_">match</span>(numRegex).<span class="property">length</span>;\\<span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="匹配所有非数字"><a href="#匹配所有非数字" class="headerlink" title="匹配所有非数字"></a>匹配所有非数字</h5><p>查找非数字字符的缩写是<code>\D</code>。这等同于</p><p><sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> movieName = <span class="string">&quot;2001: A Space Odyssey&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> noNumRegex = <span class="regexp">/\D/g</span>; </span><br><span class="line"><span class="keyword">let</span> result = movieName.<span class="title function_">match</span>(noNumRegex).<span class="property">length</span>;<span class="comment">//17</span></span><br></pre></td></tr></table></figure><h5 id="匹配所有的字母和数字"><a href="#匹配所有的字母和数字" class="headerlink" title="匹配所有的字母和数字"></a>匹配所有的字母和数字</h5><p>可以使用<code>[a-z]</code>搜寻字母表中的所有字母。这种元字符（短语元字符）是很常见的，它有一个缩写，但这个缩写也包含额外的字符</p><p>js中与zimupip最接近的元字符是<code>\w</code>。这个缩写等同于<code>[A-Za-z0-9_]</code>。此字符类匹配大小写字母和小写字母以及数字。这类字符也包含下划线字符（<code> _ </code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quoteSample = <span class="string">&quot;The five boxing wizards jump quickly.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> alphabetRegexV2 = <span class="regexp">/\w/g</span>; </span><br><span class="line"><span class="keyword">let</span> result = quoteSample.<span class="title function_">match</span>(alphabetRegexV2).<span class="property">length</span>;<span class="comment">//31</span></span><br></pre></td></tr></table></figure><h5 id="匹配除了字母和数字的所有符号"><a href="#匹配除了字母和数字的所有符号" class="headerlink" title="匹配除了字母和数字的所有符号"></a>匹配除了字母和数字的所有符号</h5><p>使用缩写<code>\w</code>来匹配字母和数字<code>[A-Za-z0-9_]</code>。可以使用<code>\W</code>搜寻和<code>\w</code>相反的匹配模式。</p><p><sup><a href="#fn_A-Za-z0-9\_" id="reffn_A-Za-z0-9\_">A-Za-z0-9\_</a></sup>的缩写\W</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quoteSample = <span class="string">&quot;The five boxing wizards jump quickly.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> nonAlphabetRegex = <span class="regexp">/\W/g</span>; </span><br><span class="line"><span class="keyword">let</span> result = quoteSample.<span class="title function_">match</span>(nonAlphabetRegex).<span class="property">length</span>;<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h4 id="单个未指定字符"><a href="#单个未指定字符" class="headerlink" title="单个未指定字符"></a>单个未指定字符</h4><p>不想匹配的字符集合。这类型的字符集称为否定字符集。</p><p>要创建否定字符集，需要在开始括号后面和不想匹配的字符前面放置脱字符（即<code>^</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quoteSample = <span class="string">&quot;3 blind mice.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/[^3 .]/gi</span>; </span><br><span class="line"><span class="keyword">let</span> result = quoteSample.<span class="title function_">match</span>(myRegex); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#x27;b&#x27;, &#x27;l&#x27;, &#x27;i&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;n&#x27;, &#x27;d&#x27;, &#x27;m&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;i&#x27;, &#x27;c&#x27;, &#x27;e&#x27;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="一次或多次"><a href="#一次或多次" class="headerlink" title="一次或多次"></a>一次或多次</h4><p>可以使用<code>+</code>符号来检查，出现一次或者连续多次的字符（或字符组）。这意味着它至少出现一次，并且可能重复出现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> difficultSpelling = <span class="string">&quot;Mississippi&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/s+/ig</span>; </span><br><span class="line"><span class="keyword">let</span> result = difficultSpelling.<span class="title function_">match</span>(myRegex);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[ &#x27;ss&#x27;, &#x27;ss&#x27; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="零次或多次"><a href="#零次或多次" class="headerlink" title="零次或多次"></a>零次或多次</h4><p>可以通过<code>*</code>来匹配零次或多次出现的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> chewieRegex = <span class="regexp">/Aa*/g</span>;</span><br><span class="line"><span class="keyword">let</span> result = chewieQuote.<span class="title function_">match</span>(chewieRegex);</span><br><span class="line"><span class="comment">//会匹配到A，Aaaaa等字符串</span></span><br></pre></td></tr></table></figure><h4 id="惰性匹配"><a href="#惰性匹配" class="headerlink" title="惰性匹配"></a>惰性匹配</h4><p>正则表达式中贪婪匹配会匹配到符合正则表达式匹配模式字符串的最长可能得部分，并作为匹配项返回。</p><p>另一种方案称为懒惰匹配，会匹配到满足正则表达式的字符串的最小可能部分。可以使用<code>?</code>字符来惰性匹配</p><p><strong>贪婪匹配</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;&lt;h1&gt;Winter is coming&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/&lt;.?&gt;/</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">match</span>(myRegex);<span class="comment">//&lt;h1&gt;Winter is coming&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure><p><strong>懒惰匹配</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;&lt;h1&gt;Winter is coming&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/&lt;.*?&gt;/</span>; </span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">match</span>(myRegex);<span class="comment">//[&#x27;&lt;h1&gt;&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="匹配字符串的开头"><a href="#匹配字符串的开头" class="headerlink" title="匹配字符串的开头"></a>匹配字符串的开头</h4><p>除了在字符集中使用外，插入符号（<code>^</code>）用于匹配文本是否在字符串的开始位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rickyAndCal = <span class="string">&quot;Cal and Ricky both like racing.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> calRegex = <span class="regexp">/^Cal/</span>;</span><br><span class="line"><span class="keyword">let</span> result = calRegex.<span class="title function_">test</span>(rickyAndCal);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="匹配字符串的末尾"><a href="#匹配字符串的末尾" class="headerlink" title="匹配字符串的末尾"></a>匹配字符串的末尾</h4><p>可以使用美元符号<code>$</code>来搜索字符串的结尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> caboose = <span class="string">&quot;The last car on a train is the caboose&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> lastRegex = <span class="regexp">/caboose$/</span>; </span><br><span class="line"><span class="keyword">let</span> result = lastRegex.<span class="title function_">test</span>(caboose);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="限制可能的用户名"><a href="#限制可能的用户名" class="headerlink" title="限制可能的用户名"></a>限制可能的用户名</h4><p>一些规则编写正则表达式</p><ul><li>用户名仅能使用数字字母。</li><li>用户名中的数字必须在最后。 数字可以有零个或多个。 用户名不能以数字开头。</li><li>用户名字母可以是小写字母和大写字母。</li><li>用户名长度必须至少为两个字符。 两位用户名只能使用字母。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> username = <span class="string">&quot;JackOfAllTrades&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> userCheck = <span class="regexp">/^[a-z]([a-z]+[0-9]*|[0-9][0-9]+)$/i</span>;</span><br><span class="line"><span class="keyword">let</span> result = userCheck.<span class="title function_">test</span>(username);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="匹配空白字符"><a href="#匹配空白字符" class="headerlink" title="匹配空白字符"></a>匹配空白字符</h4><p>可以使用<code>\s</code>搜索空格。此匹配模式将匹配空格、回车符、制表符、换页符和换行符。可以认为这类似于元字符<code>[ \r\t\f\n\v]</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sample = <span class="string">&quot;Whitespace is important in separating words&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> countWhiteSpace = <span class="regexp">/\s/g</span>;</span><br><span class="line"><span class="keyword">let</span> result = sample.<span class="title function_">match</span>(countWhiteSpace);</span><br><span class="line"><span class="comment">//[ &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="匹配非空白字符"><a href="#匹配非空白字符" class="headerlink" title="匹配非空白字符"></a>匹配非空白字符</h4><p>使用<code>\S</code>搜寻非空白字符。词匹配模式将不匹配空格、回车符、制表符、换页符和换行。可以认为类似于元字符</p><p><sup><a href="#fn_ \r\t\f\n\v" id="reffn_ \r\t\f\n\v"> \r\t\f\n\v</a></sup></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sample = <span class="string">&quot;Men are from Mars and women are from Venus.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> countNonWhiteSpace = <span class="regexp">/\S/g</span>;</span><br><span class="line"><span class="keyword">let</span> result = sample.<span class="title function_">match</span>(countNonWhiteSpace).<span class="property">length</span>;<span class="comment">//35</span></span><br></pre></td></tr></table></figure><h4 id="指定匹配限制"><a href="#指定匹配限制" class="headerlink" title="指定匹配限制"></a>指定匹配限制</h4><h5 id="指定上限和下限"><a href="#指定上限和下限" class="headerlink" title="指定上限和下限"></a>指定上限和下限</h5><p>可以使用数量说明符指定匹配模式的上下限。数量说明符与花括号（<code>&#123;</code>和<code>&#125;</code>）一起使用。可以在花括号之间放两个数字，这两个数字代表匹配模式的上限和下限</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ohStr = <span class="string">&quot;Ohhh no&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> ohRegex = <span class="regexp">/Oh&#123;3,6&#125; no/</span>; </span><br><span class="line"><span class="keyword">let</span> result = ohRegex.<span class="title function_">test</span>(ohStr);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="指定下限"><a href="#指定下限" class="headerlink" title="指定下限"></a>指定下限</h5><p>可以使用带有花括号的数量说明符来指定匹配模式的上下限。但有时候只想指定匹配模式的下限而不需要指定上限</p><p>为此，在第一个数字后面跟一个逗号即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> haStr = <span class="string">&quot;Hazzzzah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> haRegex = <span class="regexp">/Haz&#123;4,&#125;ah/</span>; </span><br><span class="line"><span class="keyword">let</span> result = haRegex.<span class="title function_">test</span>(haStr);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="确切数量"><a href="#确切数量" class="headerlink" title="确切数量"></a>确切数量</h5><p>要指定一定数量的匹配模式，只需在大括号之间放置一个数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timStr = <span class="string">&quot;Timmmmber&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> timRegex = <span class="regexp">/Tim&#123;4&#125;ber/</span>;</span><br><span class="line"><span class="keyword">let</span> result = timRegex.<span class="title function_">test</span>(timStr);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="检查全部或无"><a href="#检查全部或无" class="headerlink" title="检查全部或无"></a>检查全部或无</h4><p>有时，想要搜寻的匹配模式可能有不确定是否存在的部分。尽管如此，还是想检查它们。为此，可以使用问号<code>?</code>指定可能存在的元素。这将检查前面的零个或一个元素，可以将此符号视为前面的元素是可选的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> favWord = <span class="string">&quot;favourite&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> favRegex = <span class="regexp">/favou?rite/</span>; </span><br><span class="line"><span class="keyword">let</span> result = favRegex.<span class="title function_">test</span>(favWord);<span class="comment">//true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let favWord = &quot;favorite&quot;;//true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h4><h5 id="正向先行断言"><a href="#正向先行断言" class="headerlink" title="正向先行断言"></a>正向先行断言</h5><p>正向先行断言会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。正向先行断言的用法是<code>(?=…)</code>，其中<code>…</code>就是需要存在但不会被匹配的部分</p><h5 id="负向先行断言"><a href="#负向先行断言" class="headerlink" title="负向先行断言"></a>负向先行断言</h5><p>负向先行断言会查看并确保搜索匹配模式中的元素不存在。负向先行断言的用法是<code>(?!…)</code>，其中，<code>…</code>是希望不存在的匹配模式。如果负向先行断言部分不存在，将返回匹配模式的其余部分</p><p>先行断言用途是检查一个字符串中的两个或更多匹配模式。</p><p>匹配大于 5 个字符且有两个连续数字的密码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sampleWord = <span class="string">&quot;astronaut&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pwRegex = <span class="regexp">/(?=\w&#123;5,&#125;)(?=\D+\d&#123;2&#125;)/</span>; </span><br><span class="line"><span class="keyword">let</span> result = pwRegex.<span class="title function_">test</span>(sampleWord);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>3 到 6 个字符且至少包含一个数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> password = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> checkPass = <span class="regexp">/(?=\w&#123;3,6&#125;)(?=\D*\d)/</span>;</span><br><span class="line">checkPass.<span class="title function_">test</span>(password);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="检查混合字符组"><a href="#检查混合字符组" class="headerlink" title="检查混合字符组"></a>检查混合字符组</h4><p>正则表达式里的括号<code>()</code>来检查字符组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myString = <span class="string">&quot;Franklin D. Roosevelt&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/(Franklin|Eleanor).* Roosevelt/</span>; </span><br><span class="line"><span class="keyword">let</span> result = myRegex.<span class="title function_">test</span>(myString);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h4><h5 id="重用模式"><a href="#重用模式" class="headerlink" title="重用模式"></a>重用模式</h5><p>捕获组是通过把要捕获的正则表达式放在括号中来构建的。</p><p>分组匹配的子字符串被保存在一个临时“变量”，可以使用同一正则表达式和反斜线及捕获组的编号来访问它（例如：\1）。捕获组按其开头括号的位置自动编号（从左到右），从1开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> repeatRegex = <span class="regexp">/(\w+) \1 \1/</span>;</span><br><span class="line">repeatRegex.<span class="title function_">test</span>(repeatStr); <span class="comment">// Returns true</span></span><br><span class="line">repeatStr.<span class="title function_">match</span>(repeatRegex); <span class="comment">// Returns [&quot;row row row&quot;, &quot;row&quot;]</span></span><br></pre></td></tr></table></figure><p><code>.match()</code> 方法将返回一个数组，其中包含它最终匹配到的子字符串及其捕获组。</p><p>匹配一个只由相同的数字重复三次组成的由空格分隔字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> repeatNum = <span class="string">&quot;42 42 42&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reRegex = <span class="regexp">/^(\d+) \1 \1$/</span>; </span><br><span class="line"><span class="keyword">let</span> result = reRegex.<span class="title function_">test</span>(repeatNum);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h5><p><code>.replace()</code>方法来搜索并替换字符串中的文本。</p><p>第一个参数：想要搜索的正则表达式匹配模式</p><p>第二个参数：用于替换匹配的字符串或用于执行某些操作的函数</p><p>可以用<code>$</code>符号访问替换字符串中的捕获组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Code Camp&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/(\w+)\s(\w+)/</span>, <span class="string">&#x27;$2 $1&#x27;</span>);<span class="comment">//Camp Code</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;one two three&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> fixRegex = <span class="regexp">/(\w+) (\w+) (\w+)/</span>; </span><br><span class="line"><span class="keyword">let</span> replaceText = <span class="string">&quot;$3 $2 $1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = str.<span class="title function_">replace</span>(fixRegex, replaceText);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//three two one</span></span><br></pre></td></tr></table></figure><h4 id="删除开头和结尾的空白"><a href="#删除开头和结尾的空白" class="headerlink" title="删除开头和结尾的空白"></a>删除开头和结尾的空白</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">&quot;   Hello, World!  &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> wsRegex = <span class="regexp">/^( +)|( +)$/g</span>;</span><br><span class="line"><span class="keyword">let</span> result = hello.<span class="title function_">replace</span>(wsRegex,<span class="string">&quot;&quot;</span>);<span class="comment">//&quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础数据结构</title>
      <link href="/2024/07/23/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/07/23/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> simpleArray = [<span class="string">&#x27;one&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>, , <span class="literal">null</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(simpleArray.<span class="property">length</span>);<span class="comment">//输出：7</span></span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(simpleArray[<span class="number">0</span>]);<span class="comment">//输出：&#x27;one&#x27;</span></span><br><span class="line">simpleArray[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(simpleArray);<span class="comment">//输出：[ &#x27;one&#x27;, 3, &#x27;three&#x27;, true, false, &lt;1 empty item&gt;, null ]</span></span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p><code>push()</code>方法将元素插入数组的末尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simpleArray.<span class="title function_">push</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(simpleArray);<span class="comment">//输出：[ &#x27;one&#x27;, 3, &#x27;three&#x27;, true, false, &lt;1 empty item&gt;, null, &#x27;two&#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><p><code>unshift()</code>方法会将元素插入数字的开头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simpleArray.<span class="title function_">unshift</span>(<span class="string">&quot;four&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(simpleArray);<span class="comment">//输出：[ &#x27;four&#x27;, &#x27;one&#x27;, 3, &#x27;three&#x27;, true, false, &lt;1 empty item&gt;, null, &#x27;two&#x27; ]</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mixedNumbers</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">unshift</span>(<span class="string">&quot;I&quot;</span>, <span class="number">2</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">7</span>, <span class="string">&quot;VIII&quot;</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mixedNumbers</span>([<span class="string">&#x27;IV&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;six&#x27;</span>]));<span class="comment">//&#x27;three&#x27;, &#x27;IV&#x27;,5,&#x27;six&#x27;, 7, &#x27;VIII&#x27;, 9]</span></span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><p><code>pop()</code>会从数组末尾移除一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = simpleArray.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(simpleArray,b);<span class="comment">//输出：[ &#x27;four&#x27;, &#x27;one&#x27;, 3, &#x27;three&#x27;, true, false, &lt;1 empty item&gt;, null ] two</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><p><code>shift()</code>会从数组的开头移走一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = simpleArray.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(simpleArray,a);<span class="comment">//输出：[ &#x27;one&#x27;, 3, &#x27;three&#x27;, true, false, &lt;1 empty item&gt;, null ] four</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">popShift</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> popped = arr.<span class="title function_">pop</span>(); </span><br><span class="line">    <span class="keyword">let</span> shifted = arr.<span class="title function_">shift</span>(); </span><br><span class="line">    <span class="keyword">return</span> [shifted, popped];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">popShift</span>([<span class="string">&#x27;challenge&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;complete&#x27;</span>]));<span class="comment">//[ &#x27;challenge&#x27;, &#x27;complete&#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p><code>splice()</code>可以从数组的任意位置<strong>连续删除任意数量的元素</strong>。</p><p>语法格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">splice</span>(index,howmany,item1,.....,itemX)</span><br></pre></td></tr></table></figure><p>参数：</p><p>index：必需。从数组的这个索引位置开始</p><p>howmany：可选。规定删除多少个元素（如果未规定该参数，直接从索引开始删除到末尾）</p><p>item1,…..,itemX：可选。要添加的新元素</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[ 2, 5, 2, 1 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">htmlColorNames</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 只修改这一行下面的代码</span></span><br><span class="line">  arr.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&quot;DarkSalmon&quot;</span>,<span class="string">&quot;BlanchedAlmond&quot;</span>);</span><br><span class="line">  <span class="comment">// 只修改这一行上面的代码</span></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">htmlColorNames</span>([<span class="string">&#x27;DarkGoldenRod&#x27;</span>, <span class="string">&#x27;WhiteSmoke&#x27;</span>, <span class="string">&#x27;LavenderBlush&#x27;</span>, <span class="string">&#x27;PaleTurquoise&#x27;</span>, <span class="string">&#x27;FireBrick&#x27;</span>]));<span class="comment">//[ &#x27;DarkSalmon&#x27;,&#x27;BlanchedAlmond&#x27;,&#x27;LavenderBlush&#x27;, &#x27;PaleTurquoise&#x27;, &#x27;FireBrick&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="复制元素"><a href="#复制元素" class="headerlink" title="复制元素"></a>复制元素</h3><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p><code>slice()</code>不会修改数组，而是会复制，或者说提取给定数量的元素到一个新的数组</p><p>语法格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">slice</span>(start, end)<span class="comment">//[start,end)</span></span><br></pre></td></tr></table></figure><p>参数：</p><p>start：可选。规定从何处开始选取。如果是负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。</p><p>end：可选，规定何处结束选取。如果为负数， 则表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">forecast</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  arr = arr.<span class="title function_">slice</span>(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">forecast</span>([<span class="string">&#x27;cold&#x27;</span>, <span class="string">&#x27;rainy&#x27;</span>, <span class="string">&#x27;warm&#x27;</span>, <span class="string">&#x27;sunny&#x27;</span>, <span class="string">&#x27;cool&#x27;</span>, <span class="string">&#x27;thunderstorms&#x27;</span>]));<span class="comment">//[ &#x27;warm&#x27;, &#x27;sunny&#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><p>展开语法：<code>…</code></p><p>1.复制数组</p><p>2.合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> thisArray = [<span class="literal">true</span>, <span class="literal">true</span>, , <span class="literal">false</span>, <span class="literal">null</span>];</span><br><span class="line"><span class="keyword">let</span> thatArray = [...thisArray];<span class="comment">//将thisArray中的元素复制到thatArray中</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>复制数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copyMachine</span>(<span class="params">arr, num</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = [];</span><br><span class="line">    <span class="keyword">while</span> (num &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>([...arr]);</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">copyMachine</span>([<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>], <span class="number">2</span>));<span class="comment">//[ [ true, false, true ], [ true, false, true ] ]</span></span><br></pre></td></tr></table></figure><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">spreadOut</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fragment = [<span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> sentence = [<span class="string">&quot;learning&quot;</span>, ...fragment, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;fun&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> sentence;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">spreadOut</span>());<span class="comment">//[&#x27;learning&#x27;,&#x27;to&#x27;,&#x27;code&#x27;, &#x27;is&#x27;, &#x27;fun&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="是否存在"><a href="#是否存在" class="headerlink" title="是否存在"></a>是否存在</h3><p>由于数组随时可以发生变化，很难保证数据的位置，甚至无法保证其是否在数组中。<code>indexOf()</code>方法接受一个元素作为输入参数，并返回该元素在数组中的位置（<strong>索引</strong>）；若不存在返回<strong>-1</strong></p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickCheck</span>(<span class="params">arr, elem</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="title function_">indexOf</span>(elem) != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickCheck</span>([<span class="string">&#x27;squash&#x27;</span>, <span class="string">&#x27;onions&#x27;</span>, <span class="string">&#x27;shallots&#x27;</span>], <span class="string">&#x27;mushrooms&#x27;</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">filteredArray</span>(<span class="params">arr, elem</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j &lt; arr[i].<span class="property">length</span>;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i][j] == elem)&#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag  == <span class="number">0</span>)&#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">filteredArray</span>([[<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">13</span>, <span class="number">26</span>], [<span class="number">19</span>, <span class="number">3</span>, <span class="number">9</span>]], <span class="number">3</span>));<span class="comment">//[]</span></span><br></pre></td></tr></table></figure><h3 id="复杂多维数组"><a href="#复杂多维数组" class="headerlink" title="复杂多维数组"></a>复杂多维数组</h3><p>多维数组，或嵌套数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nestedArray = [</span><br><span class="line">  [<span class="string">&#x27;deep&#x27;</span>],</span><br><span class="line">  [</span><br><span class="line">    [<span class="string">&#x27;deeper&#x27;</span>], [<span class="string">&#x27;deeper&#x27;</span>] </span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    [</span><br><span class="line">      [<span class="string">&#x27;deepest&#x27;</span>], [<span class="string">&#x27;deepest&#x27;</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        [<span class="string">&#x27;deepest-est?&#x27;</span>]</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="将键值对添加到对象"><a href="#将键值对添加到对象" class="headerlink" title="将键值对添加到对象"></a>将键值对添加到对象</h4><p>对象本质上是键值对的集合。唯一的标识符叫做属性或者键；数据叫做值。</p><p>有一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alphabet = &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.<code>alphabet.c = 3;</code></p><p>2.<code>alphabet[‘d’] = 4;</code></p><p>3.<code>let letters = ‘e’;</code></p><p><code>alphabet[letters] = 5;</code></p><p>执行完以上步骤之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> alphabet = &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="number">1</span>,    </span><br><span class="line">   <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">   <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">   <span class="attr">d</span>:<span class="number">4</span>,</span><br><span class="line">   <span class="attr">e</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foods = &#123;</span><br><span class="line">  <span class="attr">apples</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">oranges</span>: <span class="number">32</span>,</span><br><span class="line">  <span class="attr">plums</span>: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line">foods[<span class="string">&#x27;bananas&#x27;</span>] = <span class="number">13</span>;</span><br><span class="line">foods.<span class="property">grapes</span> = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="string">&#x27;strawberries&#x27;</span>;</span><br><span class="line">foods[f] = <span class="number">27</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foods);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  apples: 25,</span></span><br><span class="line"><span class="comment">  oranges: 32,</span></span><br><span class="line"><span class="comment">  plums: 28,</span></span><br><span class="line"><span class="comment">  bananas: 13,</span></span><br><span class="line"><span class="comment">  grapes: 35,</span></span><br><span class="line"><span class="comment">  strawberries: 27</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="修改嵌套在对象中的对象"><a href="#修改嵌套在对象中的对象" class="headerlink" title="修改嵌套在对象中的对象"></a>修改嵌套在对象中的对象</h4><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userActivity = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">23894201352</span>,</span><br><span class="line">  <span class="attr">date</span>: <span class="string">&#x27;January 1, 2017&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">totalUsers</span>: <span class="number">51</span>,</span><br><span class="line">    <span class="attr">online</span>: <span class="number">42</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">userActivity.<span class="property">data</span>.<span class="property">online</span> = <span class="number">45</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userActivity);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  id: 23894201352,</span></span><br><span class="line"><span class="comment">  date: &#x27;January 1, 2017&#x27;,</span></span><br><span class="line"><span class="comment">  data: &#123; totalUsers: 51, online: 45 &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="方括号访问属性名称"><a href="#方括号访问属性名称" class="headerlink" title="方括号访问属性名称"></a>方括号访问属性名称</h4><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foods = &#123;</span><br><span class="line">  <span class="attr">apples</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">oranges</span>: <span class="number">32</span>,</span><br><span class="line">  <span class="attr">plums</span>: <span class="number">28</span>,</span><br><span class="line">  <span class="attr">bananas</span>: <span class="number">13</span>,</span><br><span class="line">  <span class="attr">grapes</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="attr">strawberries</span>: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkInventory</span>(<span class="params">scannedItem</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> foods[scannedItem];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkInventory</span>(<span class="string">&quot;apples&quot;</span>));<span class="comment">//25</span></span><br></pre></td></tr></table></figure><h4 id="delete删除对象属性"><a href="#delete删除对象属性" class="headerlink" title="delete删除对象属性"></a>delete删除对象属性</h4><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foods = &#123;</span><br><span class="line">  <span class="attr">apples</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">oranges</span>: <span class="number">32</span>,</span><br><span class="line">  <span class="attr">plums</span>: <span class="number">28</span>,</span><br><span class="line">  <span class="attr">bananas</span>: <span class="number">13</span>,</span><br><span class="line">  <span class="attr">grapes</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="attr">strawberries</span>: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">delete</span> foods.<span class="property">oranges</span>;</span><br><span class="line"><span class="keyword">delete</span> foods.<span class="property">plums</span>;</span><br><span class="line"><span class="keyword">delete</span> foods.<span class="property">strawberries</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foods);<span class="comment">//&#123; apples: 25, bananas: 13, grapes: 35 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="检查对象是否具有某个属性"><a href="#检查对象是否具有某个属性" class="headerlink" title="检查对象是否具有某个属性"></a>检查对象是否具有某个属性</h4><p>一个users对象是否有Alan属性</p><h5 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h5><p><code>hasOwnProperty()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;Alan&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="in关键字"><a href="#in关键字" class="headerlink" title="in关键字"></a>in关键字</h5><p><code>in</code>关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Alan&#x27;</span> <span class="keyword">in</span> users;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = &#123;</span><br><span class="line">  <span class="title class_">Alan</span>: &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">27</span>,</span><br><span class="line">    <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">Jeff</span>: &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">32</span>,</span><br><span class="line">    <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">Sarah</span>: &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">48</span>,</span><br><span class="line">    <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">Ryan</span>: &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEveryoneHere</span>(<span class="params">userObj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!(<span class="string">&#x27;Alan&#x27;</span> <span class="keyword">in</span> userObj) || !(<span class="string">&#x27;Sarah&#x27;</span> <span class="keyword">in</span> userObj) || !(<span class="string">&#x27;Jeff&#x27;</span> <span class="keyword">in</span> userObj) || !(<span class="string">&#x27;Ryan&#x27;</span> <span class="keyword">in</span> userObj) )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEveryoneHere</span>(users));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> refrigerator = &#123;</span><br><span class="line">  <span class="string">&#x27;milk&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;eggs&#x27;</span>: <span class="number">12</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> food <span class="keyword">in</span> refrigerator) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(food, refrigerator[food]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">milk 1</span></span><br><span class="line"><span class="comment">eggs 12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = &#123;</span><br><span class="line">  <span class="title class_">Alan</span>: &#123;</span><br><span class="line">    <span class="attr">online</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">Jeff</span>: &#123;</span><br><span class="line">    <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">Sarah</span>: &#123;</span><br><span class="line">    <span class="attr">online</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countOnline</span>(<span class="params">allUsers</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> user <span class="keyword">in</span> allUsers)&#123;</span><br><span class="line">    <span class="keyword">if</span>(allUsers[user] == <span class="literal">true</span>)&#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countOnline</span>(users));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="Obiect-keys"><a href="#Obiect-keys" class="headerlink" title="Obiect.keys()"></a>Obiect.keys()</h4><p><code>Obiect.keys()</code>生成由对象的所有属性组成的数字，即向该方法传入一个对象作为参数，来生成包含对象所有键的数组</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = &#123;</span><br><span class="line">    <span class="title class_">Alan</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">27</span>,</span><br><span class="line">        <span class="attr">online</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">Jeff</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">32</span>,</span><br><span class="line">        <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">Sarah</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">48</span>,</span><br><span class="line">        <span class="attr">online</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">Ryan</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="attr">online</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArrayOfUsers</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getArrayOfUsers</span>(users));<span class="comment">//[ &#x27;Alan&#x27;, &#x27;Jeff&#x27;, &#x27;Sarah&#x27;, &#x27;Ryan&#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="修改存储在对象中的数组"><a href="#修改存储在对象中的数组" class="headerlink" title="修改存储在对象中的数组"></a>修改存储在对象中的数组</h4><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Kenneth&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;kennethCodesAllDay&#x27;</span>,</span><br><span class="line">        <span class="attr">joinDate</span>: <span class="string">&#x27;March 26, 2016&#x27;</span>,</span><br><span class="line">        <span class="attr">organization</span>: <span class="string">&#x27;freeCodeCamp&#x27;</span>,</span><br><span class="line">        <span class="attr">friends</span>: [</span><br><span class="line">            <span class="string">&#x27;Sam&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Kira&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Tomo&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">location</span>: &#123;</span><br><span class="line">            <span class="attr">city</span>: <span class="string">&#x27;San Francisco&#x27;</span>,</span><br><span class="line">            <span class="attr">state</span>: <span class="string">&#x27;CA&#x27;</span>,</span><br><span class="line">            <span class="attr">country</span>: <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addFriend</span>(<span class="params">userObj, friend</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> f = userObj.<span class="property">data</span>.<span class="property">friends</span>;</span><br><span class="line">    f.<span class="title function_">push</span>(friend);</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFriend</span>(user, <span class="string">&#x27;Pete&#x27;</span>));<span class="comment">//[ &#x27;Sam&#x27;, &#x27;Kira&#x27;, &#x27;Tomo&#x27;, &#x27;Pete&#x27; ]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 基础数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2024/07/23/jQuery/"/>
      <url>/2024/07/23/jQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p>JavaScript框架——jQuery</p><h2 id="jQuery引入"><a href="#jQuery引入" class="headerlink" title="jQuery引入"></a>jQuery引入</h2><p>1.本地导入</p><p>进入官网下载jQuery源码，并在</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;文件路径.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.线上导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Animate"><a href="#Animate" class="headerlink" title="Animate"></a>Animate</h2><p>线上导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span>&gt;</span>An animated element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://animate.style/">Animate使用</a></p><h2 id="jQuery基本格式"><a href="#jQuery基本格式" class="headerlink" title="jQuery基本格式"></a>jQuery基本格式</h2><p>使用jQuery前必须在html页面中添加一些东西。首先，在页面顶部添加<code>script</code>标签，浏览器会运行<code>script</code>标签所有的JavaScript脚本包括jQuery。</p><p>在 script 标签中添加代码 <code>$(document).ready(function() &#123;</code>。 然后在后面（仍在该 script 标签内）用<code> &#125;);</code>;闭合它。</p><p>在浏览器加载页面后，你放入此 function 的代码将立即运行。</p><p>如果没有 document ready function，代码将在 HTML 页面呈现之前运行，这可能会导致错误。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><p>所有的jQuery函数都以<code>$</code>开头</p><p>jQuery通常选取操作带有选择器的HTML标签。</p><p>假设给button元素添加跳跃效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).addClass(&quot;animate__animated animate__bounce&quot;);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">            <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;button&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animate__animated animate__bounce&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Only change code above this line --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-primary text-center&quot;</span>&gt;</span>jQuery Playground<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span>&gt;</span>An animated element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span> = <span class="string">&quot;animate__animated animate__bounce&quot;</span>&gt;</span>#left-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left-well&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target1&quot;</span>&gt;</span>#target1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target2&quot;</span>&gt;</span>#target2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target3&quot;</span>&gt;</span>#target3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#right-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right-well&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target4&quot;</span>&gt;</span>#target4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target5&quot;</span>&gt;</span>#target5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target6&quot;</span>&gt;</span>#target6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h3><p>在标签class为xxx的标签下添加动画抖动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.xxx&quot;).addClass(&quot;animate__animated animate__shakeX&quot;);</span><br></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>在标签id为xxx的标签下添加动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#xxx&quot;).addClass(&quot;animate__animated animate__fadeOut&quot;);</span><br></pre></td></tr></table></figure><h3 id="多个jQuery选择器选择同一元素"><a href="#多个jQuery选择器选择同一元素" class="headerlink" title="多个jQuery选择器选择同一元素"></a>多个jQuery选择器选择同一元素</h3><p>三个选择器给<code>#target1</code>添加三个class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;button&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.btn&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;shake&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;btn-primary&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Only change code above this line --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-primary text-center&quot;</span>&gt;</span>jQuery Playground<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#left-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left-well&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target1&quot;</span>&gt;</span>#target1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target2&quot;</span>&gt;</span>#target2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target3&quot;</span>&gt;</span>#target3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#right-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right-well&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target4&quot;</span>&gt;</span>#target4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target5&quot;</span>&gt;</span>#target5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target6&quot;</span>&gt;</span>#target6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该脚本中的动画类引入是Animate.css 3.x版本的引入方式，4.x的引入方式，参照前文脚本</p><h2 id="从元素中移除class"><a href="#从元素中移除class" class="headerlink" title="从元素中移除class"></a>从元素中移除class</h2><p>和jQuery的<code>addClass()</code>方法给标签添加类一样，也是利用jQuery的<code>removeClass()</code>方法移除</p><p>从xxx选择器选择的内容中移除，yyy class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;xxx&quot;).removeClass(&quot;yyy&quot;);</span><br></pre></td></tr></table></figure><h2 id="使用jQuery更改元素CSS"><a href="#使用jQuery更改元素CSS" class="headerlink" title="使用jQuery更改元素CSS"></a>使用jQuery更改元素CSS</h2><p>jQuery有一个<code>.css</code>方法，能改变标签的CSS。</p><p>加色吧以下代码变蓝</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target1&quot;).css(&quot;color&quot;, &quot;blue&quot;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-禁用元素"><a href="#jQuery-禁用元素" class="headerlink" title="jQuery 禁用元素"></a>jQuery 禁用元素</h2><p>jQuery有一个<code>.prop()</code>方法，可以用其调整标签属性</p><p>当禁用按钮时，按钮会变成灰色无法点击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).prop(&quot;disabled&quot;, true);</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;disabled&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Only change code above this line --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-primary text-center&quot;</span>&gt;</span>jQuery Playground<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#left-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left-well&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target1&quot;</span>&gt;</span>#target1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target2&quot;</span>&gt;</span>#target2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target3&quot;</span>&gt;</span>#target3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240723200038.png" alt=""></p><p>target1这个按钮变为了灰色，无法点击</p><h2 id="jQuery-更改元素内部的文本"><a href="#jQuery-更改元素内部的文本" class="headerlink" title="jQuery 更改元素内部的文本"></a>jQuery 更改元素内部的文本</h2><p>jQuery有一个<code>.html()</code>函数，能用其在标签里添加HTML标签和文本，函数提供的内容将完全替换之前标签的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;h3&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;em&gt;jQuery Playground&lt;/em&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="jQuery删除元素"><a href="#jQuery删除元素" class="headerlink" title="jQuery删除元素"></a>jQuery删除元素</h2><p>jQuery中有一个名为<code>.remove()</code>的函数，它将完全删除一个html元素</p><p>假设移除一个id=target4的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target4&quot;).remove();</span><br></pre></td></tr></table></figure><h2 id="appendTo-方法移动元素"><a href="#appendTo-方法移动元素" class="headerlink" title="appendTo 方法移动元素"></a>appendTo 方法移动元素</h2><p>把一个标签移到另一个地方，jQuery有一个<code>appendTo()</code>方法，可以选取html标签将其添加到另一个标签里面</p><p>把target2从left-well移动到right-well</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target2&quot;).appendTo(&quot;#right-well&quot;);</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target4&quot;</span>).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target2&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;#right-well&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Only change code above this line --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-primary text-center&quot;</span>&gt;</span>jQuery Playground<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#left-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left-well&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target1&quot;</span>&gt;</span>#target1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target2&quot;</span>&gt;</span>#target2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target3&quot;</span>&gt;</span>#target3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#right-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right-well&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target4&quot;</span>&gt;</span>#target4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target5&quot;</span>&gt;</span>#target5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target6&quot;</span>&gt;</span>#target6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240723201728.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240723201752.png" alt=""></p><h2 id="jQuery-克隆元素"><a href="#jQuery-克隆元素" class="headerlink" title="jQuery 克隆元素"></a>jQuery 克隆元素</h2><p>除了移动标签，也可以把一个元素从一个地方复制到另一个地方。jQuery有一个<code>clone()</code>方法，可以复制标签</p><p>把target5克隆一份并移动到了left-well</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target5&quot;).clone().appendTo(&quot;#left-well&quot;);</span><br></pre></td></tr></table></figure><p>这里两个jQuery函数连在一起了，被称为<strong>链式调用</strong></p><p>示例：代码和上面一致，只对&lt; script &gt;中的内容进行了修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target4&quot;</span>).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target2&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;#right-well&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target5&quot;</span>).<span class="title function_">clone</span>().<span class="title function_">appendTo</span>(<span class="string">&quot;#right-well&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240723202147.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240723202302.png" alt=""></p><h2 id="jQuery选择元素"><a href="#jQuery选择元素" class="headerlink" title="jQuery选择元素"></a>jQuery选择元素</h2><h3 id="选择父元素"><a href="#选择父元素" class="headerlink" title="选择父元素"></a>选择父元素</h3><p>每个html标签都默认继承其父标签的CSS属性</p><p>jQuery有一个<code>parent()</code>方法，可以访问被选取标签的父标签</p><p>使用<code>parent()</code>方法把<code>#target1</code>元素的父元素背景色设置成红色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target1&quot;).parent().css(&quot;background-color&quot;,&quot;red&quot;);</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target4&quot;</span>).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target2&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;#right-well&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target5&quot;</span>).<span class="title function_">clone</span>().<span class="title function_">appendTo</span>(<span class="string">&quot;#left-well&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240723203515.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240723203556.png" alt=""></p><h3 id="选择子元素"><a href="#选择子元素" class="headerlink" title="选择子元素"></a>选择子元素</h3><p>把html标签放到另一个级别的标签里，这些html标签被称为该标签的子标签。</p><p>jQuery有一个<code>children()</code>方法，可以访问被选取标签的子标签</p><p>把<code>#right-well</code>子标签的文字颜色修改为橙色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#right-well&quot;).children().css(&quot;color&quot;,&quot;orange&quot;);</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target4&quot;</span>).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target2&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;#right-well&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target5&quot;</span>).<span class="title function_">clone</span>().<span class="title function_">appendTo</span>(<span class="string">&quot;#left-well&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#right-well&quot;</span>).<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;orange&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240723204019.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240723204043.png" alt=""></p><h3 id="选择特定子元素"><a href="#选择特定子元素" class="headerlink" title="选择特定子元素"></a>选择特定子元素</h3><p>jQuery可以用CSS选择器选取标签。</p><p>给每个区域(well)的第二个标签添加弹跳动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.target:nth-child(2)&quot;).addClass(&quot;animated bounce);</span><br></pre></td></tr></table></figure><h3 id="选择偶数元素"><a href="#选择偶数元素" class="headerlink" title="选择偶数元素"></a>选择偶数元素</h3><p>可以基于位置的奇<code>:odd</code>和偶<code>:even</code>选择器选取标签</p><p>jQuery是零索引的，意味着第一个标签的位置编号为0</p><p>给所有target class元素的偶数元素并给他们设置振动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.target:even&quot;).addClass(&quot;animated shake&quot;);</span><br></pre></td></tr></table></figure><h2 id="jQuery修改整个页面"><a href="#jQuery修改整个页面" class="headerlink" title="jQuery修改整个页面"></a>jQuery修改整个页面</h2><p>给整个<code>body</code>标签添加animated和hinge类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;body&quot;).addClass(&quot;animated hinge&quot;);</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target4&quot;</span>).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target2&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;#right-well&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target5&quot;</span>).<span class="title function_">clone</span>().<span class="title function_">appendTo</span>(<span class="string">&quot;#left-well&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#right-well&quot;</span>).<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#left-well&quot;</span>).<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;green&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.target:nth-child(2)&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated bounce&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.target:even&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated shake&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;body&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated hinge&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2024/07/20/JavaScript/"/>
      <url>/2024/07/20/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h4 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is an in-line comment.</span></span><br></pre></td></tr></table></figure><h4 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This is a</span></span><br><span class="line"><span class="comment">multi-line comment */</span></span><br></pre></td></tr></table></figure><h2 id="let与const"><a href="#let与const" class="headerlink" title="let与const"></a>let与const</h2><h4 id="var"><a href="#var" class="headerlink" title="var"></a>var</h4><p>使用var关键字声明变量，可以声明同名变量覆盖原变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camper = <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> camper = <span class="string">&quot;David&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(camper);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240719121024.png" alt=""></p><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p>使用let关键字声明变量，同名变量只能声明一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> camper = <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> camper = <span class="string">&quot;David&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(camper);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240719121128.png" alt=""></p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>const声明相当于是一个常量值，一旦赋值，就无法重新赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">FAV_PET</span> = <span class="string">&quot;Cats&quot;</span>;</span><br><span class="line"><span class="variable constant_">FAV_PET</span> = <span class="string">&quot;Dogs&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240719121633.png" alt=""></p><h2 id="未初始化变量"><a href="#未初始化变量" class="headerlink" title="未初始化变量"></a>未初始化变量</h2><p>当变量被声明的时候，程序内部会给一个初始值，当对一个为空的初始值进行运算操作的时候，会得到NAN。如果用一个空变量（任意类型变量）连接一个空字符串会得到一个空字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Only change code below this line</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line"><span class="keyword">let</span> c;</span><br><span class="line"><span class="comment">// Only change code above this line</span></span><br><span class="line"></span><br><span class="line">a = a + <span class="number">1</span>;</span><br><span class="line">b = b + <span class="number">5</span>;</span><br><span class="line">c = c + <span class="string">&quot; String!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240719153345.png" alt=""></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>js有七种主要的数据类型，分为：<strong>原始数据类型</strong>和<strong>引用数据类型</strong></p><h4 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h4><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><p><strong>常见操作</strong></p><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">连接</button><button type="button" class="tab " data-href="test4-2">长度</button><button type="button" class="tab " data-href="test4-3">提取字符</button><button type="button" class="tab " data-href="test4-4">查找</button><button type="button" class="tab " data-href="test4-5">替换</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p>类似于C++中的String拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let res = str1 + str2;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="property">length</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-3"><p>索引提取，类似于数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-4"><p>查找子字符串在主字符串中的位置，indexOf()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">str.<span class="title function_">indexOf</span>(<span class="string">&quot;def&quot;</span>);<span class="comment">//返回:3</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-5"><p>replace()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;JavaScript is awesome&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> newStr = str.<span class="title function_">replace</span>(<span class="string">&quot;awesome&quot;</span>, <span class="string">&quot;great&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr); <span class="comment">// 输出: JavaScript is great</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h5 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h5><p>只有一种数字类型，浮点小数和整数一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x1 = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">let</span> x2 = <span class="number">50.3</span>;</span><br></pre></td></tr></table></figure><h5 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isTrue = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> isFalse = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h5 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> emptyValue = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><h5 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象 (Object)"></a><strong>对象 (Object)</strong></h5><p>用于存储多个值的集合，每个值都有对应的键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">isAdmin</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// 输出: John</span></span><br></pre></td></tr></table></figure><h5 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 (Array)"></a>数组 (Array)</h5><p>用于存储多个值的有序集合，每个值都有对应的索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="property">length</span>); <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure><h4 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h4><p>获取数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> operand;<span class="comment">//operand：要检测其类型的操作数。</span></span><br></pre></td></tr></table></figure><p><code> </code>：如果操作数是未定义的值。<br><code>boolean</code>：如果操作数是布尔值。<br><code>number</code>：如果操作数是数值。<br><code>string</code>：如果操作数是字符串。<br><code>bigint</code>：如果操作数是大整数。<br><code>symbol</code>：如果操作数是符号。<br><code>object</code>：如果操作数是对象或 null。<br><code>function</code>：如果操作数是函数。</p><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object <span class="keyword">instanceof</span> constructor</span><br></pre></td></tr></table></figure><p><code>object</code>：要检查的对象</p><p><code>constructor</code>：要检查的对象是否是其实例的构造函数</p><p>返回值：返回一个布尔值，表示对象是否是指定构造函数的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true，数组也是对象的一种</span></span><br></pre></td></tr></table></figure><p><code>instanceof</code>虽然可以用来检测数组，但是需要注意的是，如果在多个全局执行上下文之间使用了多个 JavaScript 引擎实例（如在 Web Worker 中），那么可能会出现 instanceof不正确的情况。因此，如果需要检测对象是否是数组，最好使用 <strong>Array.isArray()</strong> 方法，它更可靠。</p><h2 id="使用模板字面量创建字符串"><a href="#使用模板字面量创建字符串" class="headerlink" title="使用模板字面量创建字符串"></a>使用模板字面量创建字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Zodiac Hasbro&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">56</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, my name is <span class="subst">$&#123;person.name&#125;</span>!</span></span><br><span class="line"><span class="string">I am <span class="subst">$&#123;person.age&#125;</span> years old.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br></pre></td></tr></table></figure><p>这个例子:</p><p>①使用反引号<code>`</code>将字符串括起来。</p><p>②其次多行的字符串没有使用<code>\n</code>，而是直接换行了</p><p>③其次使用了<code>$&#123;variable&#125;</code>占位符，则要添加变量的时候不需使用<code>+</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = &#123;</span><br><span class="line">    <span class="attr">success</span>: [<span class="string">&quot;max-length&quot;</span>, <span class="string">&quot;no-amd&quot;</span>, <span class="string">&quot;prefer-arrow-functions&quot;</span>],</span><br><span class="line">    <span class="attr">failure</span>: [<span class="string">&quot;no-var&quot;</span>, <span class="string">&quot;var-on-top&quot;</span>, <span class="string">&quot;linebreak&quot;</span>],</span><br><span class="line">    <span class="attr">skipped</span>: [<span class="string">&quot;no-extra-semi&quot;</span>, <span class="string">&quot;no-dup-keys&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeList</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="comment">// Only change code below this line</span></span><br><span class="line">    <span class="keyword">const</span> failureItems = [];</span><br><span class="line">    <span class="comment">// Only change code above this line</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        failureItems.<span class="title function_">push</span>(<span class="string">`&lt;li class=&quot;text-warning&quot;&gt;<span class="subst">$&#123;arr[i]&#125;</span>&lt;/li&gt;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> failureItems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> failuresList = <span class="title function_">makeList</span>(result.<span class="property">failure</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;failuresList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(failuresList[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240719171700.png" alt=""></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>一维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sandwich = [<span class="string">&quot;peanut butter&quot;</span>, <span class="string">&quot;jelly&quot;</span>, <span class="string">&quot;bread&quot;</span>];</span><br></pre></td></tr></table></figure><p>多维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> teams = [[<span class="string">&quot;Bulls&quot;</span>, <span class="number">23</span>], [<span class="string">&quot;White Sox&quot;</span>, <span class="number">45</span>]];</span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  [[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>可以使用索引访问数组的内容，和其他语言的数组访问类似</p><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&quot;Stimpson&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;cat&quot;</span>];</span><br><span class="line">arr2.<span class="title function_">push</span>([<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;joy&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240719172509.png" alt=""></p><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> threeArr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> oneDown = threeArr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oneDown);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(threeArr);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240719172642.png" alt=""></p><p>以上的push和pop的内容和c++的vector容器的操作相似</p><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><p>作用类似于pop但是移除的是<strong>第一个元素</strong>，而不是最后一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [<span class="string">&quot;Stimpson&quot;</span>, <span class="string">&quot;J&quot;</span>, [<span class="string">&quot;cat&quot;</span>]];</span><br><span class="line"><span class="keyword">const</span> removedFromOurArray = ourArray.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removedFromOurArray);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240719172952.png" alt=""></p><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><p>作用类似于push，但是在数组的第一位存入数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [<span class="string">&quot;Stimpson&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;cat&quot;</span>];</span><br><span class="line">ourArray.<span class="title function_">shift</span>();</span><br><span class="line">ourArray.<span class="title function_">unshift</span>(<span class="string">&quot;Happy&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ourArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ourArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240719173342.png" alt=""></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="一般"><a href="#一般" class="headerlink" title="一般"></a>一般</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//执行代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带参函数"><a href="#带参函数" class="headerlink" title="带参函数"></a>带参函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testFun</span>(<span class="params">param1, param2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(param1, param2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionWithArgs</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x+y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">functionWithArgs</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//输出3</span></span><br><span class="line"><span class="title function_">functionWithArgs</span>(<span class="number">7</span>,<span class="number">9</span>);<span class="comment">//输出16</span></span><br></pre></td></tr></table></figure><h5 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h5><p>传递的是值的副本，函数内部的操作不会影响到原始变量。</p><h5 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h5><p>传递的是值的引用，函数内部的操作会直接影响到原始变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateArray</span>(<span class="params">arr,index,element</span>)&#123;</span><br><span class="line"><span class="comment">// Setup</span></span><br><span class="line">    arr[index] = element;</span><br><span class="line"><span class="comment">// Only change code below this line</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myList = [<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;t&quot;</span>]</span><br><span class="line"><span class="title function_">updateArray</span>(myList,<span class="number">2</span>,<span class="string">&quot;tiger&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myList)<span class="comment">//输出[ &#x27;cat&#x27;, &#x27;dog&#x27;, &#x27;tiger&#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="带返回值函数"><a href="#带返回值函数" class="headerlink" title="带返回值函数"></a>带返回值函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timesFive</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num*<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">timesFive</span>(<span class="number">5</span>));<span class="comment">//25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">timesFive</span>(<span class="number">2</span>));<span class="comment">//10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">timesFive</span>(<span class="number">0</span>));<span class="comment">//0</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>遇到不需要给函数命名的时候，尤其是需要将一个函数作为参数传递给另一函数的时候。创建匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> myVar = <span class="string">&quot;value&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p>ES6中提供的语法糖，<strong>箭头函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> myVar = <span class="string">&quot;value&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不需要函数体，只返回一个值的时候，箭头函数允许省略return关键字和外面的大括号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;value&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="带参箭头函数"><a href="#带参箭头函数" class="headerlink" title="带参箭头函数"></a><strong>带参箭头函数</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doubler</span> = (<span class="params">item</span>) =&gt; item*<span class="number">2</span>;</span><br><span class="line"><span class="title function_">doubler</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//当只有一个参数的时候</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doubler</span> = item =&gt; item*<span class="number">2</span>;</span><br><span class="line"><span class="comment">//同时也可以传递多个参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiplier</span> = (<span class="params">item,multi</span>) =&gt; item*multi;</span><br></pre></td></tr></table></figure><h5 id="ES6编写简洁的函数声明"><a href="#ES6编写简洁的函数声明" class="headerlink" title="ES6编写简洁的函数声明"></a>ES6编写简洁的函数声明</h5><h6 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h6><p>在ES5中，需要在对象中定义一个函数的时候，必须像这样使用<code>function</code>关键字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Taylor&quot;</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello! My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h6><p>可以删除<code>function</code>关键词和冒号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Taylor&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello! My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="全局作用域和window"><a href="#全局作用域和window" class="headerlink" title="全局作用域和window"></a>全局作用域和window</h4><p>当未使用<code>let</code>或<code>const</code>关键字声明变量时，会在<code>global</code>范围内自动创建，如果在其他地方无意间定义一个同名变量，就会出现问题。</p><p>在JavaScript中，如果变量或函数在任何函数体外部定义，则它们属于全局作用域。这意味着它们可以在代码的任何地方被访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> globalVar = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><p>window对象：在浏览器中，全局作用域中定义的所有变量和函数都是window对象的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">globalVar</span>);<span class="comment">//Hello</span></span><br></pre></td></tr></table></figure><h4 id="局部作用域和函数"><a href="#局部作用域和函数" class="headerlink" title="局部作用域和函数"></a>局部作用域和函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> loc = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(loc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myTest</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(loc);<span class="comment">//这里这个loc是局部，会抛出错误</span></span><br></pre></td></tr></table></figure><h2 id="创建js对象"><a href="#创建js对象" class="headerlink" title="创建js对象"></a>创建js对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Whiskers&quot;</span>,</span><br><span class="line">  <span class="string">&quot;legs&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&quot;tails&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;enemies&quot;</span>: [<span class="string">&quot;Water&quot;</span>, <span class="string">&quot;Dogs&quot;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在此示例中，所有属性都存储为字符串，例如 name、legs 和 tails。 然而，你也可以使用<strong>数字</strong>作为属性。 你甚至可以省略单字字符串属性中的引号，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anotherObject = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">&quot;five&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;focus&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><strong>算数运算符</strong></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240720172153.png" alt=""></p><p><strong>赋值运算符</strong></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240720172229.png" alt=""></p><p><strong>字符串的+运算符</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">txt1=<span class="string">&quot;What a very&quot;</span>;</span><br><span class="line">txt2=<span class="string">&quot;nice day&quot;</span>;</span><br><span class="line">txt3=txt1+txt2;</span><br></pre></td></tr></table></figure><p><strong>字符串和数字进行加法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span>+<span class="number">5</span>; <span class="comment">//10</span></span><br><span class="line">y=<span class="string">&quot;5&quot;</span>+<span class="number">5</span>; <span class="comment">//55</span></span><br><span class="line">z=<span class="string">&quot;Hello&quot;</span>+<span class="number">5</span>; <span class="comment">//Hello5</span></span><br></pre></td></tr></table></figure><p><strong>比较运算符</strong></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240720172854.png" alt=""></p><p><strong>逻辑运算符</strong></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240720172931.png" alt=""></p><p><strong>条件运算符</strong></p><p>即三元运算符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &gt; b ? a : b;</span><br></pre></td></tr></table></figure><p><strong>空值合并运算符</strong></p><p><code>??</code>是一个逻辑运算符，当左操作数为null或者<code> </code>时，返回右操作数，否则返回左操作数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="literal">null</span> ?? <span class="string">&#x27;default string&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line"><span class="comment">// 输出: &quot;default string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = <span class="number">0</span> ?? <span class="number">42</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz);</span><br><span class="line"><span class="comment">// 输出: 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当使用逻辑或运算符时，0会当作假值，就会返回右侧值</span></span><br><span class="line"><span class="keyword">const</span> sec = <span class="number">0</span> || <span class="number">42</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sec);</span><br><span class="line"><span class="comment">// 输出: 42</span></span><br></pre></td></tr></table></figure><p>所以<code>??</code>防止把不为空值的识别为假，不把<code>0</code>和<code> </code></p><h2 id="if-else"><a href="#if-else" class="headerlink" title="if..else"></a>if..else</h2><p>略</p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>略</p><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>略</p><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>略</p><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><p>略</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h4 id="通过点号访问对象属性"><a href="#通过点号访问对象属性" class="headerlink" title="通过点号访问对象属性"></a>通过点号访问对象属性</h4><p>和访问数组类似，访问对象属性有两种方式：点号表示法和方括号表示法，如果已经知道访问的属性名，使用点号表示法更方便。</p><p>如果访问的属性名中包含空格，必须使用方括号表示法来获取它的属性值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  <span class="string">&quot;Space Name&quot;</span>: <span class="string">&quot;Kirk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;More Space&quot;</span>: <span class="string">&quot;Spock&quot;</span>,</span><br><span class="line">  <span class="string">&quot;NoSpace&quot;</span>: <span class="string">&quot;USS Enterprise&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObj[<span class="string">&quot;Space Name&quot;</span>];</span><br><span class="line">myObj[<span class="string">&#x27;More Space&#x27;</span>];</span><br><span class="line">myObj[<span class="string">&quot;NoSpace&quot;</span>];</span><br></pre></td></tr></table></figure><p><strong>可选链运算符</strong>(?.)</p><p>允许读取位于连接对象链深处的属性值，而不必明确验证链中的每个引用是否有效。功能类似于.链式运算符，不同之处在于，在引用为空的情况下不会引起错误，该表达式短路返回值是<code> </code>。与函数调用一起使用时，如果给定的函数不存在，则返回<code> </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> adventurer = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">cat</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Dinah&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(adventurer.<span class="property">dog</span>?.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// 输出:undefine</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(adventurer.<span class="property">dog</span> &amp;&amp; adventurer.<span class="property">dog</span>.<span class="property">name</span>);</span><br><span class="line"><span class="comment">//输出:undefine</span></span><br></pre></td></tr></table></figure><h4 id="通过变量访问对象属性"><a href="#通过变量访问对象属性" class="headerlink" title="通过变量访问对象属性"></a>通过变量访问对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dogs = &#123;</span><br><span class="line">  <span class="title class_">Fido</span>: <span class="string">&quot;Mutt&quot;</span>,</span><br><span class="line">  <span class="title class_">Hunter</span>: <span class="string">&quot;Doberman&quot;</span>,</span><br><span class="line">  <span class="title class_">Snoopie</span>: <span class="string">&quot;Beagle&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myDog = <span class="string">&quot;Hunter&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> myBreed = dogs[myDog];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBreed);</span><br></pre></td></tr></table></figure><h4 id="更新对象属性"><a href="#更新对象属性" class="headerlink" title="更新对象属性"></a>更新对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dogs = &#123;</span><br><span class="line">  <span class="title class_">Fido</span>: <span class="string">&quot;Mutt&quot;</span>,</span><br><span class="line">  <span class="title class_">Hunter</span>: <span class="string">&quot;Doberman&quot;</span>,</span><br><span class="line">  <span class="title class_">Snoopie</span>: <span class="string">&quot;Beagle&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dogs[<span class="string">&quot;Fido&quot;</span>] = <span class="string">&quot;m&quot;</span>;</span><br><span class="line"><span class="comment">//dogs.Fido = &quot;m&quot;;</span></span><br></pre></td></tr></table></figure><h4 id="给对象添加新的属性"><a href="#给对象添加新的属性" class="headerlink" title="给对象添加新的属性"></a>给对象添加新的属性</h4><p>给上面的dogs对象添加bark属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dog.<span class="property">bark</span> = <span class="string">&quot;wow&quot;</span>;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dog[<span class="string">&quot;bark&quot;</span>] = <span class="string">&quot;wow&quot;</span></span><br></pre></td></tr></table></figure><h4 id="删除对象属性"><a href="#删除对象属性" class="headerlink" title="删除对象属性"></a>删除对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> dog.<span class="property">bark</span>;</span><br></pre></td></tr></table></figure><h4 id="访问嵌套对象"><a href="#访问嵌套对象" class="headerlink" title="访问嵌套对象"></a>访问嵌套对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myStorage = &#123;</span><br><span class="line">    <span class="string">&quot;car&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;inside&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;glove box&quot;</span>: <span class="string">&quot;maps&quot;</span>,</span><br><span class="line">            <span class="string">&quot;passenger seat&quot;</span>: <span class="string">&quot;crumbs&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;outside&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;trunk&quot;</span>: <span class="string">&quot;jack&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gloveBoxContents = myStorage.<span class="property">car</span>.<span class="property">inside</span>[<span class="string">&quot;glove box&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gloveBoxContents);<span class="comment">//maps</span></span><br></pre></td></tr></table></figure><h2 id="解构赋值操作对象"><a href="#解构赋值操作对象" class="headerlink" title="解构赋值操作对象"></a>解构赋值操作对象</h2><h4 id="使用解构赋值来获取对象值"><a href="#使用解构赋值来获取对象值" class="headerlink" title="使用解构赋值来获取对象值"></a>使用解构赋值来获取对象值</h4><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">ES5</button><button type="button" class="tab " data-href="test4-2">ES6</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = user.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">const</span> age = user.<span class="property">age</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = user;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="使用解构赋值从对象中分配变量"><a href="#使用解构赋值从对象中分配变量" class="headerlink" title="使用解构赋值从对象中分配变量"></a>使用解构赋值从对象中分配变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: userName, <span class="attr">age</span>: userAge &#125; = user;</span><br><span class="line"><span class="comment">//userName = user.name，即值为John Doe</span></span><br></pre></td></tr></table></figure><h4 id="使用解构赋值从嵌套对象中分配变量"><a href="#使用解构赋值从嵌套对象中分配变量" class="headerlink" title="使用解构赋值从嵌套对象中分配变量"></a>使用解构赋值从嵌套对象中分配变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">johnDoe</span>: &#123; </span><br><span class="line">    <span class="attr">age</span>: <span class="number">34</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;johnDoe@freeCodeCamp.com&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解构对象的属性赋值给具有相同名字的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">johnDoe</span>: &#123; age, email &#125;&#125; = user;</span><br></pre></td></tr></table></figure><p>将对象的属性值赋值给具有不同名字的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">johnDoe</span>: &#123; <span class="attr">age</span>: userAge, <span class="attr">email</span>: userEmail &#125;&#125; = user;</span><br></pre></td></tr></table></figure><h4 id="使用解构赋值从数组中分配变量"><a href="#使用解构赋值从数组中分配变量" class="headerlink" title="使用解构赋值从数组中分配变量"></a>使用解构赋值从数组中分配变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b,,, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">8</span>, b = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// Only change code below this line</span></span><br><span class="line">[a,b] = [b,a];</span><br></pre></td></tr></table></figure><h4 id="rest参数解构"><a href="#rest参数解构" class="headerlink" title="rest参数解构"></a>rest参数解构</h4><p>rest参数只能对数组列表最后的元素起作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, ...arr] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">[ 3, 4, 5, 7 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Array.prototype.slice() 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(source.<span class="title function_">slice</span>(<span class="number">2</span>));<span class="comment">//[ 3, 4, 5, 7 ]</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值在函数参数中的基本用法"><a href="#解构赋值在函数参数中的基本用法" class="headerlink" title="解构赋值在函数参数中的基本用法"></a>解构赋值在函数参数中的基本用法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组解构赋值作为函数参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoordinates</span>(<span class="params">[x, y]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Coordinates: (<span class="subst">$&#123;x&#125;</span>, <span class="subst">$&#123;y&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不使用解构</span></span><br><span class="line"><span class="comment">function printCoordinates(point) &#123;</span></span><br><span class="line"><span class="comment">const [x,y] = point;</span></span><br><span class="line"><span class="comment">    console.log(`Coordinates: ($&#123;x&#125;, $&#123;y&#125;)`);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> point = [<span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="title function_">printCoordinates</span>(point); <span class="comment">// 输出 &quot;Coordinates: (3, 7)&quot;</span></span><br></pre></td></tr></table></figure><p><strong>默认值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组解构赋值和默认值作为函数参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greetUser</span>(<span class="params">[name = <span class="string">&#x27;Guest&#x27;</span>]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greetUser</span>([]); <span class="comment">// 输出 &quot;Hello, Guest!&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象解构赋值和默认值作为函数参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greetPerson</span>(<span class="params">&#123; name = <span class="string">&#x27;Guest&#x27;</span>, age = <span class="number">18</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>! You are <span class="subst">$&#123;age&#125;</span> years old.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greetPerson</span>(&#123;&#125;); <span class="comment">// 输出 &quot;Hello, Guest! You are 18 years old.&quot;</span></span><br></pre></td></tr></table></figure><p><strong>剩余操作符</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象解构赋值和剩余操作符作为函数参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printDetails</span>(<span class="params">&#123; name, ...rest &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Additional details:&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span> &#125;;</span><br><span class="line"><span class="title function_">printDetails</span>(person);</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// Name: John</span></span><br><span class="line"><span class="comment">// Additional details:</span></span><br><span class="line"><span class="comment">// &#123; age: 30, city: &#x27;New York&#x27; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stats = &#123;</span><br><span class="line">    <span class="attr">max</span>: <span class="number">56.78</span>,</span><br><span class="line">    <span class="attr">standard_deviation</span>: <span class="number">4.34</span>,</span><br><span class="line">    <span class="attr">median</span>: <span class="number">34.54</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="number">23.87</span>,</span><br><span class="line">    <span class="attr">min</span>: -<span class="number">0.75</span>,</span><br><span class="line">    <span class="attr">average</span>: <span class="number">35.85</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only change code below this line</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">half</span> = (<span class="params">&#123;max,min&#125;</span>) =&gt; (max + min) / <span class="number">2.0</span>;</span><br><span class="line"><span class="comment">// Only change code above this line</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">half</span>(stats));</span><br></pre></td></tr></table></figure><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用（地址），所以改变新对象，就对象也会改变，因为新旧对象共享同一块内存。</p><h5 id="直接赋值"><a href="#直接赋值" class="headerlink" title="直接赋值"></a>直接赋值</h5><p>在 JavaScript 中，直接赋值是一种浅拷贝的方式。对<code>原始数据类型</code>，直接赋值会创建一个值的副本，而对于<code>引用类型数据</code>，直接赋值会创建一个新的引用，但是新旧引用指向同一个对象。所以，原始类型数据是浅拷贝，引用数据类型是浅拷贝。</p><h5 id="object-assign-拷贝"><a href="#object-assign-拷贝" class="headerlink" title="object.assign()拷贝"></a>object.assign()拷贝</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">a</span> = <span class="number">10</span>;</span><br><span class="line">obj2.<span class="property">b</span>.<span class="property">c</span> = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">// &#123; a: 1, b: &#123; c: 20 &#125; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// &#123; a: 10, b: &#123; c: 20 &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>当对象只有一级属性为深拷贝</p></li><li><p>当对象有多级属性时，二级属性后就是浅拷贝</p></li></ul><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>深拷贝复制并创建一个一模一样的对象，但是不共享内存，修改新对象，旧对象保持不变</p><p>js中实现深拷贝通常需要递归地遍历对象，并复制其属性及属性值。可以通过多种方式实现深拷贝，比如手动递归、使用JSON.parse(JSON.stringify(obj))、使用第三方库等。</p><h5 id="JSON对象实现"><a href="#JSON对象实现" class="headerlink" title="JSON对象实现"></a>JSON对象实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1));</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">a</span> = <span class="number">10</span>;</span><br><span class="line">obj2.<span class="property">b</span>.<span class="property">c</span> = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// &#123; a: 10, b: &#123; c: 20 &#125; &#125;</span></span><br></pre></td></tr></table></figure><h5 id="扩展运算符实现"><a href="#扩展运算符实现" class="headerlink" title="扩展运算符实现"></a>扩展运算符实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> b=[...a];</span><br><span class="line">b.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//1,2,3,4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure><h2 id="遍历数组-对象"><a href="#遍历数组-对象" class="headerlink" title="遍历数组/对象"></a>遍历数组/对象</h2><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><p><strong>基本语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">currentValue, index, array</span>) &#123;</span><br><span class="line">    <span class="comment">// 对当前元素执行的操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>currentValue：当前遍历的数组元素的值。<br>index：当前遍历的数组元素的索引。<br>array：调用 forEach() 方法的数组。<br><strong>箭头函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">forEach</span>(<span class="function">(<span class="params">currentValue, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 对当前元素执行的操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">number, index</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Index <span class="subst">$&#123;index&#125;</span>: <span class="subst">$&#123;number&#125;</span>`</span>);</span><br><span class="line">    sum += number</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Sum: <span class="subst">$&#123;sum&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Index 0: 1</span></span><br><span class="line"><span class="comment">// Index 1: 2</span></span><br><span class="line"><span class="comment">// Index 2: 3</span></span><br><span class="line"><span class="comment">// Index 3: 4</span></span><br><span class="line"><span class="comment">// Index 4: 5</span></span><br><span class="line"><span class="comment">// Sum: 15</span></span><br></pre></td></tr></table></figure><h5 id="数组遍历map"><a href="#数组遍历map" class="headerlink" title="数组遍历map"></a>数组遍历map</h5><p><strong>基本语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">currentValue, index, array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> xxx;<span class="comment">// 返回新数组的每个元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>currentValue：当前遍历的数组元素的值。<br>index：当前遍历的数组元素的索引。<br>array：调用 map() 方法的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doubledNumbers = numbers.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> number*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubledNumbers); <span class="comment">// 输出 [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p><strong>箭头函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doubledNumbers = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">number</span> =&gt;</span> number * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubledNumbers); <span class="comment">// 输出 [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><ul><li>map()方法创建一个新数组，原数组不受影响</li><li>map方法中的回调函数可以访问当前元素的值、索引以及原始数组本身</li><li>map方法返回的新数组的长度和原始数组相同</li><li>map方法返回的新数组中的元素是根据原始数组中的每个元素经过回调函数处理后得到的结果</li></ul><p>使用map方法时，要确保回调函数不会修改原始数组的元素，因为map方法创建的是一个新数组，而不是对原始数组的直接修改。</p><h5 id="For-In循环"><a href="#For-In循环" class="headerlink" title="For/In循环"></a>For/In循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person=&#123;<span class="attr">fname</span>:<span class="string">&quot;Bill&quot;</span>,<span class="attr">lname</span>:<span class="string">&quot;Gates&quot;</span>,<span class="attr">age</span>:<span class="number">56</span>&#125;; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person)  <span class="comment">// x 为属性名</span></span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="for-of遍历可迭代对象"><a href="#for-of遍历可迭代对象" class="headerlink" title="for of遍历可迭代对象"></a>for of遍历可迭代对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> number <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> infoObj = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:<span class="string">&quot;123&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;JavaScript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avatar&quot;</span>:<span class="string">&quot;Alice&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> infoArr = []</span><br><span class="line"><span class="keyword">let</span> lengthArr = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only change code below this line</span></span><br><span class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> infoObj)&#123;</span><br><span class="line">    infoArr.<span class="title function_">push</span>(infoObj[x]);</span><br><span class="line">&#125;</span><br><span class="line">lengthArr = infoArr.<span class="title function_">map</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// Only change code below this line</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(infoArr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lengthArr)</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"><span class="comment">//body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myUser = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;Jon Snow&#x27;</span>,<span class="number">21</span>);</span><br><span class="line">user1.<span class="property">name</span>; <span class="comment">// =&gt; &#x27;Jon Snow&#x27;</span></span><br><span class="line">user1.<span class="property">age</span>;  <span class="comment">// =&gt; 21</span></span><br></pre></td></tr></table></figure><h4 id="类方法-1"><a href="#类方法-1" class="headerlink" title="类方法"></a>类方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;…&#125;</span><br><span class="line"><span class="title function_">method1</span>(<span class="params">name,age</span>)&#123;…&#125;</span><br><span class="line"><span class="title function_">method2</span>(<span class="params">name,age</span>)&#123;…&#125;</span><br><span class="line"><span class="title function_">method3</span>(<span class="params">name,age</span>)&#123;…&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Only change code below this line</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vegetable</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getname</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`The name of this vegetable is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Only change code above this line</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> carrot = <span class="keyword">new</span> <span class="title class_">Vegetable</span>(<span class="string">&#x27;carrot&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> tomato = <span class="keyword">new</span> <span class="title class_">Vegetable</span>(<span class="string">&#x27;tomato&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(carrot.<span class="title function_">getname</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tomato.<span class="title function_">getname</span>());</span><br></pre></td></tr></table></figure><h4 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h4><p><code>getter</code>函数作用是可以让对象返回一个私有变量，而不是直接访问私有变量</p><p><code>setter</code>函数的作用是可以基于传进参数来修改对象中私有变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">author</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_author</span> = author;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getter</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">writer</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_author</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// setter</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">writer</span>(<span class="params">updatedAuthor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_author</span> = updatedAuthor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> novel = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&#x27;anonymous&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(novel.<span class="property">writer</span>);</span><br><span class="line">novel.<span class="property">writer</span> = <span class="string">&#x27;newAuthor&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(novel.<span class="property">writer</span>);</span><br></pre></td></tr></table></figure><p>注意：通常会在私有变量前添加下划线<code>_</code>。但是这种做法并不是将变量变为私有的。</p><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Only change code below this line</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thermostat</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">F</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_F</span> = F;<span class="comment">//接受华氏温度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">temperature</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>/<span class="number">9</span>*(<span class="variable language_">this</span>.<span class="property">_F</span> - <span class="number">32</span>);<span class="comment">//华氏温度变为摄氏温度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">temperature</span>(<span class="params">t</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_F</span> = t*<span class="number">9.0</span>/<span class="number">5</span> + <span class="number">32</span>;<span class="comment">//摄氏温度变为华氏温度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Only change code above this line</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thermos = <span class="keyword">new</span> <span class="title class_">Thermostat</span>(<span class="number">76</span>); <span class="comment">// Setting in Fahrenheit scale</span></span><br><span class="line"><span class="keyword">let</span> temp = thermos.<span class="property">temperature</span>; <span class="comment">// 24.44 in Celsius</span></span><br><span class="line">thermos.<span class="property">temperature</span> = <span class="number">26</span>;</span><br><span class="line">temp = thermos.<span class="property">temperature</span>; <span class="comment">// 26 in Celsius</span></span><br></pre></td></tr></table></figure><h4 id="继承：extends"><a href="#继承：extends" class="headerlink" title="继承：extends"></a>继承：extends</h4><p>子类会从父类中继承构造函数\字段和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  name;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContentWriter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">User</span> &#123;  </span><br><span class="line">    posts = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> writer = <span class="keyword">new</span> <span class="title class_">ContentWriter</span>(<span class="string">&#x27;John Smith&#x27;</span>);</span><br><span class="line"></span><br><span class="line">writer.<span class="property">name</span>;      <span class="comment">// =&gt; &#x27;John Smith&#x27;</span></span><br><span class="line">writer.<span class="title function_">getName</span>(); <span class="comment">// =&gt; &#x27;John Smith&#x27;</span></span><br><span class="line">writer.<span class="property">posts</span>;     <span class="comment">// =&gt; []</span></span><br></pre></td></tr></table></figure><h5 id="super"><a href="#super" class="headerlink" title="super"></a>super</h5><h6 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  name;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContentWriter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">User</span> &#123;</span><br><span class="line">  posts = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, posts</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">posts</span> = posts;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> writer = <span class="keyword">new</span> <span class="title class_">ContentWriter</span>(<span class="string">&#x27;John Smith&#x27;</span>, [<span class="string">&#x27;Why I like JS&#x27;</span>]);</span><br><span class="line">writer.<span class="property">name</span>; <span class="comment">// =&gt; &#x27;John Smith&#x27;</span></span><br><span class="line">writer.<span class="property">posts</span> <span class="comment">// =&gt; [&#x27;Why I like JS&#x27;]</span></span><br></pre></td></tr></table></figure><h6 id="父类"><a href="#父类" class="headerlink" title="父类"></a>父类</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  name;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContentWriter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">User</span> &#123;</span><br><span class="line">  posts = [];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, posts</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">posts</span> = posts;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="variable language_">super</span>.<span class="title function_">getName</span>();  </span><br><span class="line">    <span class="keyword">if</span> (name === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Unknwon&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> writer = <span class="keyword">new</span> <span class="title class_">ContentWriter</span>(<span class="string">&#x27;&#x27;</span>, [<span class="string">&#x27;Why I like JS&#x27;</span>]);</span><br><span class="line">writer.<span class="title function_">getName</span>(); <span class="comment">// =&gt; &#x27;Unknwon&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line">    name;</span><br><span class="line">    food;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,food</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">food</span> = food;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> love to eat <span class="subst">$&#123;<span class="variable language_">this</span>.food&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only change code below this line</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">animal</span>&#123;</span><br><span class="line">    color;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,food,color</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name,food);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getcolor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`The color of this rabbit is <span class="subst">$&#123;<span class="variable language_">this</span>.color&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Only change code above this line</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> k = <span class="keyword">new</span> <span class="title function_">rabbit</span>(<span class="string">&#x27;rabbit&#x27;</span>,<span class="string">&#x27;grass&#x27;</span>,<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">eat</span>())<span class="comment">//rabbit love to eat grass</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">getcolor</span>())<span class="comment">//The color of this rabbit is white</span></span><br></pre></td></tr></table></figure><h4 id="export重用代码块"><a href="#export重用代码块" class="headerlink" title="export重用代码块"></a>export重用代码块</h4><p><strong>导出单个函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x,y</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>导出多个函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x,y</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span>&#123;add&#125;;<span class="comment">//这里面用逗号隔开多个函数和对象即可</span></span><br></pre></td></tr></table></figure><p>导出变量和函数后，就可以在其他文件里导入使用避免代码冗余</p><h5 id="export-default创建默认导出"><a href="#export-default创建默认导出" class="headerlink" title="export default创建默认导出"></a>export default创建默认导出</h5><p>当文件只有<strong>一个值</strong>需要导出的时候，会使用这种语法。常用于文件或者模块创建返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul><li><p>默认导出</p><ul><li>一个模块只能默认导出一个值或对象</li><li>在导出时不需要使用特定名称，可以使用任意变量名作为导出标识符。导入时也一样</li><li>适用于模块只有一个主要导出项</li></ul></li><li><p>普通导出</p><ul><li>一个模块可以导出多个值和对象</li><li>每个导出项和导入项名称必须固定</li><li>模块有多个导出项</li></ul></li></ul><h4 id="import复用"><a href="#import复用" class="headerlink" title="import复用"></a>import复用</h4><h5 id="部分导入"><a href="#部分导入" class="headerlink" title="部分导入"></a>部分导入</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&#x27;./math_functions.js&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="全部导入"><a href="#全部导入" class="headerlink" title="*全部导入"></a>*全部导入</h5><p>全部导入使用<code>import * as</code>语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myMathModule <span class="keyword">from</span> <span class="string">&quot;./math_functions.js&quot;</span>;</span><br></pre></td></tr></table></figure><p>import语句创建了一个叫做<code>myMathModule</code>的对象，将<code>math_functions.js</code>文件中的所有内容导入该对象</p><h5 id="导入一个默认导出"><a href="#导入一个默认导出" class="headerlink" title="导入一个默认导出"></a>导入一个默认导出</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&#x27;./math_functions.js&#x27;</span>;</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/471745983">知乎-js模块导入导出</a></p><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><p>this是一个指针型变量，它指向当前函数的运行环境。即所在函数的调用者</p><h4 id="不同的this指向"><a href="#不同的this指向" class="headerlink" title="不同的this指向"></a>不同的this指向</h4><p><strong>全局上下文中</strong></p><p>在任何函数外部，this指向全局对象，通常在浏览器中指向widow对象</p><p><strong>函数调用</strong></p><p>函数独立调用时，this指向全局对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">myFunction</span>(); <span class="comment">// 输出 window（浏览器环境下）</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greetFunction = obj.<span class="property">greet</span>;<span class="comment">//这里obj对象中提取了greet方法的引用</span></span><br><span class="line"><span class="title function_">greetFunction</span>();<span class="comment">//作为独立函数调用</span></span><br></pre></td></tr></table></figure><p><strong>方法调用</strong></p><p>当函数最为对象的方法调用时，this指向调用该方法的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 输出 John</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure><p><strong>构造函数</strong></p><p>当函数作为构造函数使用（通过new关键词调用），this指向新创建的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>); <span class="comment">// 输出 Alice</span></span><br></pre></td></tr></table></figure><p><strong>class类</strong></p><p>this指向实例化的对象，即类的实例化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">person1.<span class="title function_">greet</span>(); <span class="comment">// 输出 Hello, Alice</span></span><br></pre></td></tr></table></figure><p>注意：如果在类方法中使用普通函数，那么函数内部会失去this上下文，并可能指向全局对象或者<code> </code>(空)，这时需要箭头函数绑定上下文</p><h4 id="调整this指向"><a href="#调整this指向" class="headerlink" title="调整this指向"></a>调整this指向</h4><p><strong>关键字转为变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xiaoming = &#123;</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"><span class="attr">introuduce</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> $this = <span class="variable language_">this</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($this.<span class="property">age</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xiaoming.<span class="title function_">introduce</span>()</span><br></pre></td></tr></table></figure><h5 id="绑定函数this"><a href="#绑定函数this" class="headerlink" title="绑定函数this"></a>绑定函数this</h5><h6 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a><strong>bind()方法</strong></h6><p>每一个函数都有一个bind()方法，作用固定函数的this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设有一个对象叫a</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">test.<span class="title function_">bind</span>(a);<span class="comment">//这样就固定了test的this指向为a</span></span><br><span class="line"><span class="comment">//但是bind()函数并未对函数做出改造，而是生成一个新的函数并返回</span></span><br><span class="line"><span class="comment">//因此需要接收函数</span></span><br><span class="line"><span class="keyword">let</span> newTest = test.<span class="title function_">bind</span>(a);</span><br></pre></td></tr></table></figure><h6 id="箭头函数-1"><a href="#箭头函数-1" class="headerlink" title="箭头函数"></a><strong>箭头函数</strong></h6><p>箭头函数不会对this指向造成影响，不希望改变时可以使用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xiaoming = &#123;</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"><span class="attr">introuduce</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xiaoming.<span class="title function_">introduce</span>()</span><br></pre></td></tr></table></figure><p><strong>setTimeout()函数</strong>：setTimeout(要执行的代码, 等待的毫秒数)/setTimeout(JavaScript 函数, 等待的毫秒数)。用于指定的毫秒数后调用函数或者计算表达式</p><h6 id="call-apply方法"><a href="#call-apply方法" class="headerlink" title="call/apply方法"></a>call/apply方法</h6><p>任何函数都可调用这个方法，这个方法是一次性的，只针对当次调用有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数test</span></span><br><span class="line">test.<span class="title function_">call</span>();<span class="comment">//相当于test()</span></span><br><span class="line">test.<span class="title function_">call</span>(a);<span class="comment">//当向其传入参数，就相当于a.test()</span></span><br><span class="line"><span class="comment">//如果当前test有参数</span></span><br><span class="line">test.<span class="title function_">call</span>(a,参数<span class="number">1</span>,参数<span class="number">2</span>,…)</span><br><span class="line">test.<span class="title function_">apply</span>(a,[参数<span class="number">1</span>,参数<span class="number">2</span>,…])</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>函数及其词法环境组合</p><h4 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a><strong>词法作用域</strong></h4><p>词法作用域即静态作用域，即作用域代码中函数声明的位置决定。函数内部可以访问函数外部定义的变量，但是外部函数不能访问内部函数的变量</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>闭包就是函数和其词法环境的组合，它允许函数访问外部作用域中的变量，即使函数在外部作用域执行完毕后仍然能够访问这些变量，闭包使得函数有了“记忆力，可以记住创建它的上下文</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> outerVariable = <span class="string">&#x27;I am outer!&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVariable); <span class="comment">// 内部函数可以访问外部函数的变量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> innerFunction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inner = <span class="title function_">outerFunction</span>();</span><br><span class="line"><span class="title function_">inner</span>(); <span class="comment">// 输出 &quot;I am outer!&quot;</span></span><br></pre></td></tr></table></figure><p><code>innerFunction</code>是一个闭包，它可以访问外部函数<code>outerFunction</code>的变量<code>outerVariable</code>（就是两者是在相同上下文中定义的）。即使是<code>outerFunction</code>执行完毕，<code>innerFunction</code>依然可以访问到<code>outerVariable</code></p><h4 id="属性私有化"><a href="#属性私有化" class="headerlink" title="属性私有化"></a>属性私有化</h4><p>使属性私有化最简单的方法就是在构造函数中创建变量。可以将该变量范围限定在构造函数中，而不全局可用。这样只能由构造函数中的方法访问和更改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> hatchedEgg = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getHatchedEggCount</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> hatchedEgg;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ducky = <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">ducky.<span class="title function_">getHatchedEggCount</span>();</span><br></pre></td></tr></table></figure><p>这里的<code>getHatchedEggCount</code>是一种特权方法，因为可以访问私有属性<code>hatchedEgg</code>。这是因为<code>hatchedEgg</code>和<code>getHatchedEggCount</code>在相同的上下文中声明。</p><h4 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h4><p>闭包在 JavaScript 中有许多应用场景，常见的包括隐藏数据、封装代码、模块化开发等。</p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>一种函数类型的值</p></li><li><p>作为参数传递给其他函数，以便在特定的事件发生时调用</p></li><li><p>通常用于处理异步操作的结果或处理事件响应</p></li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>处理异步操作：当需要处理耗时的操作（例如网络请求、文件读取等）时，可以将回调函数作为异步操作的回调，在操作完成后执行。<br>事件处理：在事件驱动的编程中，可以将回调函数注册为事件的处理函数，在事件发生时执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理异步操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟异步操作，延迟1秒钟</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟获取数据</span></span><br><span class="line">        <span class="keyword">let</span> data = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;;</span><br><span class="line">        <span class="comment">// 调用回调函数并传递数据</span></span><br><span class="line">        <span class="title function_">callback</span>(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用箭头函数传入，获取到数据后，执行打印数据操作</span></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="string">&#x27;https://example.com/data&#x27;</span>, <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Get Data：&quot;</span> , res)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>回调函数<code> res=&gt;&#123;&#125;</code> 用于处理异步操作 <code>fetchData</code> 的结果，回调函数在异步操作完成后被调用。另外，回调函数也被用作事件处理函数，在按钮点击事件发生时执行。</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise是异步编程的一种解决方案-它在未来的某时会生成一个值。任务完成，分执行成功和执行失败两种情况。<code>Promise</code>是一种构造器函数，需要通过<code>new</code>关键词来创建。构造器参数是一个函数，该函数有两个参数-<code>resolve</code>和<code>reject</code>。通过它们来判断promise的执行结果</p><h4 id="promise对象创建"><a href="#promise对象创建" class="headerlink" title="promise对象创建"></a>promise对象创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="resolve和reject完成Promise"><a href="#resolve和reject完成Promise" class="headerlink" title="resolve和reject完成Promise"></a>resolve和reject完成Promise</h4><p>ES6中的Promise是一种用于处理异步操作的对象，它代表了一个异步操作的最终完成或失败，以及其结果值。Promise对象有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。当Promise对象的状态从pending转变为fulfilled或rejected时，将会执行相应的回调函数。</p><p>Promise 提供的 resolve 和 reject 参数就是用来结束 promise 的。 Promise 成功时调用<code> resolve</code>，promise 执行失败时调用<code> reject</code>， 如下文所述，这些方法需要有一个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(condition here) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;Promise was fulfilled&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;Promise was rejected&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="then处理完成结果"><a href="#then处理完成结果" class="headerlink" title="then处理完成结果"></a>then处理完成结果</h4><p>当程序需要花费未知时间才能完成时（比如一些异步操作），一般是服务器请求，promise很有用。服务器请求会花费一些时间，当结束时，需要根据服务器响应执行一些操作。这可以用<code>then</code>方法来实现，当promise完成<code>resolve</code>时会触发then方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myPromise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>result</code>就是传入<code>resolve</code>方法的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makeServerRequest = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// responseFromServer is set to true to represent a successful response from a server</span></span><br><span class="line">  <span class="keyword">let</span> responseFromServer = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(responseFromServer) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;We got the data&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;Data not received&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">makeServerRequest.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//打印We got the data，因为这里执行的是resolve方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="catch处理promise失败"><a href="#catch处理promise失败" class="headerlink" title="catch处理promise失败"></a>catch处理promise失败</h4><p>当 promise 失败时会调用 <code>catch</code> 方法。 当 promise 的 reject 方法执行时会直接调用。 用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myPromise.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>error</code> 是传入 <code>reject </code>方法的参数。</p><h4 id="Promise进阶"><a href="#Promise进阶" class="headerlink" title="Promise进阶"></a>Promise进阶</h4><p>Promise对象也可以链式调用，每个<code>then()</code>或<code>catch()</code>方法都可以返回一个新的Promise对象，因此可以串联多个异步操作。这种机制被称为Promise链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;Step 1 data&#x27;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;Caught error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myPromise.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Step 1:&#x27;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Step 2 data&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Step 2:&#x27;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;Step 3 data&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Step 3:&#x27;</span>, data);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Caught error:&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，每个 then() 返回的是一个新的Promise对象，可以在其中执行新的异步操作，并在下一个 then() 中处理其结果。</p><h5 id="Promise-all-和-Promise-race-："><a href="#Promise-all-和-Promise-race-：" class="headerlink" title="Promise.all() 和 Promise.race()："></a>Promise.all() 和 Promise.race()：</h5><p><code>Promise.all()</code> 接收一个Promise数组作为参数，当所有Promise都成功时，返回一个包含所有Promise结果的数组；如果任何一个Promise失败，立即返回失败状态。</p><p><code>Promise.race()</code> 接收一个Promise数组作为参数，返回第一个完成的Promise的结果或失败原因。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Promise 1&#x27;</span>);</span><br><span class="line"><span class="comment">//let promise1 = Promise.reject(&#x27;Promise 1&#x27;);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Error: Promise 1</span></span><br><span class="line"><span class="comment">Error: Promise 1</span></span><br><span class="line"><span class="comment">最终输出结果这种情况下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;Promise 2&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All promises resolved:&#x27;</span>, values);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;First promise resolved:&#x27;</span>, value);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*输出：</span></span><br><span class="line"><span class="comment">First promise resolved: Promise 1</span></span><br><span class="line"><span class="comment">All promises resolved: [ &#x27;Promise 1&#x27;, &#x27;Promise 2&#x27; ]*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2024/07/19/3%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2024/07/19/3%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-19</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/valid-anagram/description/">LeetCode-242有效的字母异位词</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-20</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/description/">LeetCode-349两个数组的交集</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-22</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/two-sum/description/">LeetCode-1两数之和</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-23</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/4sum-ii/description/">LeetCode-454四数相加II</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-24</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/3sum/description/">LeetCode-15三数之和</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-25</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/4sum/description/">LeetCode-18四数之和</a></p></div></div></div><h2 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h2><h3 id="leetcode-242有效的字母异位词"><a href="#leetcode-242有效的字母异位词" class="headerlink" title="leetcode-242有效的字母异位词"></a>leetcode-242有效的字母异位词</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            hash[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 第一个字符串++统计字母数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            hash[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二个字符串--判断第二个字符串字母数量是否一致</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            hash[t[i] - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><h3 id="leetcode-349两个数组的交集"><a href="#leetcode-349两个数组的交集" class="headerlink" title="leetcode-349两个数组的交集"></a>leetcode-349两个数组的交集</h3><div class="tabs" id="test"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test-1">Set</button><button type="button" class="tab " data-href="test-2">数组</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">hash</span><span class="params">(nums<span class="number">1.</span>begin(),nums<span class="number">1.</span>end())</span></span>;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums<span class="number">2.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash.<span class="built_in">find</span>(nums2[i] )!= hash.<span class="built_in">end</span>())&#123;</span><br><span class="line">                res.<span class="built_in">insert</span>(nums2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">hash</span><span class="params">(<span class="number">1005</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums<span class="number">1.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            hash[nums1[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums<span class="number">2.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[nums2[i]] == <span class="number">1</span>)&#123;</span><br><span class="line">                res.<span class="built_in">insert</span>(nums2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><h3 id="leetcode-1两数之和"><a href="#leetcode-1两数之和" class="headerlink" title="leetcode-1两数之和"></a>leetcode-1两数之和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="type">int</span> temp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.<span class="built_in">find</span>(temp) != map.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; map.<span class="built_in">find</span>(temp)-&gt;second , i &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(nums[i],i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><h3 id="leetcode-15三数之和"><a href="#leetcode-15三数之和" class="headerlink" title="leetcode-15三数之和"></a>leetcode-15三数之和</h3><div class="tabs" id="test"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test-1">哈希</button><button type="button" class="tab " data-href="test-2">双指针</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>在311/313个通过测试样例中超时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">find</span>(nums[i]) != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> temp = <span class="number">0</span> - nums[i];</span><br><span class="line">                s.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">                unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">int</span> t = temp - nums[j];</span><br><span class="line">                        <span class="keyword">if</span> (map.<span class="built_in">find</span>(t) != map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                            vector&lt;<span class="type">int</span>&gt; arr = &#123;nums[i], nums[j], t&#125;;</span><br><span class="line">                            <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line">                            v.<span class="built_in">push_back</span>(arr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        map.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(nums[j], j));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; V;</span><br><span class="line">        set&lt;vector&lt;<span class="type">int</span>&gt;&gt; a = set&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">        V = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//a的一个数与前一个数重合</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = i<span class="number">+1</span>;</span><br><span class="line">            <span class="type">int</span> right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(right &gt; left)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[left] +nums[right] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] + nums[left] + nums[right] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[i],nums[left],nums[right]&#125;);</span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left<span class="number">+1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right<span class="number">-1</span>] == nums[right]) right--;</span><br><span class="line">                    <span class="comment">//当同时收获了结果的时候需要left和right向中间移动</span></span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240724125430.png" alt=""></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="四数相加"><a href="#四数相加" class="headerlink" title="四数相加"></a>四数相加</h2><h3 id="leetcode-454四数相加-II"><a href="#leetcode-454四数相加-II" class="headerlink" title="leetcode-454四数相加 II"></a>leetcode-454四数相加 II</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; map;<span class="comment">//第一个存放value，a+b的值，第二个存放a+b这个值出现的次数</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a: nums1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> b:nums2)&#123;</span><br><span class="line">                map[a+b]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> c:nums3)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> d:nums4)&#123;</span><br><span class="line">                <span class="type">int</span> temp = <span class="number">0</span> - (c+d);</span><br><span class="line">                <span class="keyword">if</span>(map.<span class="built_in">find</span>(temp) != map.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    count += map[temp];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h2><h3 id="leetcode-18四数之和"><a href="#leetcode-18四数之和" class="headerlink" title="leetcode-18四数之和"></a>leetcode-18四数之和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> flag = target;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; nums.<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[k] &gt; target &amp;&amp; nums[k] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = k + <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; k + <span class="number">1</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="comment">//和k那边一个原理，同样第一个i的取值不能跳过</span></span><br><span class="line">                <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="type">long</span> result = (<span class="type">long</span> <span class="type">long</span>)nums[k] + (<span class="type">long</span> <span class="type">long</span>)nums[i] + (<span class="type">long</span> <span class="type">long</span>)nums[right] + (<span class="type">long</span> <span class="type">long</span>)nums[left];<span class="comment">//这里的原因是，测试样例中的nums = [0,0,0,1000000000,1000000000,1000000000,1000000000],target = 1000000000这组数据，，所以long long类型转换后再进行比较</span></span><br><span class="line">                    <span class="keyword">if</span> (result &gt; flag) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; flag) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (result == flag) &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(</span><br><span class="line">                            &#123;nums[k], nums[i], nums[left], nums[right]&#125;);</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left + <span class="number">1</span>] == nums[left])<span class="comment">//务必left&lt;right在前，如果在后可能导致left在nums.size()这个位置了，然后left+1索引越界</span></span><br><span class="line">                            left++;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right - <span class="number">1</span>] == nums[right])</span><br><span class="line">                            right--;</span><br><span class="line">                        <span class="comment">//当同时收获了结果的时候需要left和right向中间移动</span></span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 和算法斗志斗勇的日子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flexbox</title>
      <link href="/2024/07/17/flexbox/"/>
      <url>/2024/07/17/flexbox/</url>
      
        <content type="html"><![CDATA[<h1 id="flexbox"><a href="#flexbox" class="headerlink" title="flexbox"></a>flexbox</h1><p>将元素变成flex容器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>:flex</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717210252.png" alt=""></p><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717210335.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717210436.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717210550.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717210642.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./CSS/day7-1.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;item&quot;</span>&gt;</span>item 111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            item 4 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            item 4 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            item 4 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex容器"><a href="#flex容器" class="headerlink" title="flex容器"></a>flex容器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="comment">/*display: flex;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717213641.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717213938.png" alt=""></p><h4 id="max-content"><a href="#max-content" class="headerlink" title="max-content"></a>max-content</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="comment">/*display: flex;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>:max-content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717214144.png" alt=""></p><p>由上面两图可以知道，当flex容器中的内容没有超过原本容器大小的时候，每个元素的宽度即max-content</p><h4 id="min-content"><a href="#min-content" class="headerlink" title="min-content"></a>min-content</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="comment">/*width:min-content;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717215234.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="comment">/*display: flex;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>:min-content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717215337.png" alt=""></p><p>如果超出容器的范围，就会是min-content</p><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>flex即flex-basis、flex-shrink、flex-grow的简写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*flex: grow shrink basis*/</span></span><br><span class="line"><span class="comment">/*默认*/</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> auto;</span><br><span class="line"><span class="attribute">flex</span>: initial;</span><br><span class="line"><span class="comment">/*flex: 1 1 auto*/</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*flex: 1 1 100px*/</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span> <span class="number">100px</span>;</span><br><span class="line"><span class="comment">/*flex: 1 1 auto*/</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span>;</span><br><span class="line"><span class="attribute">flex</span>: auto;</span><br><span class="line"><span class="comment">/*flex: 0 0 auto*/</span></span><br><span class="line"><span class="attribute">flex</span>:  none;</span><br></pre></td></tr></table></figure><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>auto和max-content效果一致</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717220624.png" alt=""></p><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    5*(50px+1x) = 500px</span></span><br><span class="line"><span class="comment">    x = 50px</span></span><br><span class="line"><span class="comment">    所以每一个内容又分配了50px的宽度</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717220747.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    4*(50px+1x) + 50px + 6x = 500px</span></span><br><span class="line"><span class="comment">    x = 25px</span></span><br><span class="line"><span class="comment">    所以每一个内容又分配了50px的宽度</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717221118.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个元素是后面元素的六倍</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717221517.png" alt=""></p><p>但如果是以这种情况如果倍数过大是无法体现的，为了保持内容的可读性，有一个min-content限制</p><p>所以</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717221833.png" alt=""></p><h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p><strong>flex-shrink:0</strong>当子元素超过容器大小的时候，不会缩小子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718133953.png" alt=""></p><p><strong>flex-shrink:其他值</strong>当子元素超过父元素容器大小的时候会缩放子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">   <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    flex-shrink:2;</span></span><br><span class="line"><span class="comment">    1000px - 5 * (2x) = 500px</span></span><br><span class="line"><span class="comment">    x = 50px</span></span><br><span class="line"><span class="comment">    200px - 2*50px = 100px</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    flex-shrink:1;</span></span><br><span class="line"><span class="comment">    1000px - 5 * (1x) = 500px</span></span><br><span class="line"><span class="comment">    x = 100px;</span></span><br><span class="line"><span class="comment">    200px - 1 * 100px = 100px;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718134531.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    flex-shrink:2;</span></span><br><span class="line"><span class="comment">    1000px - 5 * (2x) = 500px</span></span><br><span class="line"><span class="comment">    x = 50px</span></span><br><span class="line"><span class="comment">    200px - 2*50px = 100px</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    flex-shrink:1;</span></span><br><span class="line"><span class="comment">    1000px - 5 * (1x) = 500px</span></span><br><span class="line"><span class="comment">    x = 100px;</span></span><br><span class="line"><span class="comment">    200px - 1 * 100px = 100px;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1000px - 4*(2x) - 1*(1x) = 500px</span></span><br><span class="line"><span class="comment">    x = 500/9 ≈ 55.56</span></span><br><span class="line"><span class="comment">    1:200px - 500/9 * 1 ≈ 144.44</span></span><br><span class="line"><span class="comment">    2/3/4/5:200px - 500/9*2 ≈ 88.88</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718141423.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718141519.png" alt=""></p><h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>flex元素换行</p><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">nowrap默认</button><button type="button" class="tab " data-href="test4-2">wrap</button><button type="button" class="tab " data-href="test4-3">wrap-reverse</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p>不换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="comment">/*flex-shrink: 1;*/</span>因为有个默认值，所以是缩放状态</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718163011.png" alt=""></p></div><div class="tab-item-content" id="test4-2"><p>不缩放，直接超过容器换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718163209.png" alt=""></p></div><div class="tab-item-content" id="test4-3"><p>换行反转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap-reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718164201.png" alt=""></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>交叉轴对齐</p><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">stretch默认</button><button type="button" class="tab " data-href="test4-2">flex-end</button><button type="button" class="tab " data-href="test4-3">flex-start</button><button type="button" class="tab " data-href="test4-4">center</button><button type="button" class="tab " data-href="test4-5">baseline</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p>所有元素拉成统一行高（行高最大的元素），交叉轴上的对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: stretch;<span class="comment">/*默认，所有元素拉成统一行高（行高最大的元素），交叉轴上的对齐*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718144503.png" alt=""></p></div><div class="tab-item-content" id="test4-2"><p>交叉轴终点对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718144642.png" alt=""></p></div><div class="tab-item-content" id="test4-3"><p>交叉轴起点对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718144753.png" alt=""></p></div><div class="tab-item-content" id="test4-4"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/image-20240718144847683.png" alt=""></p></div><div class="tab-item-content" id="test4-5"><p>以文字基线对齐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">    border: 2px dashed black;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    display: flex;</span><br><span class="line">    width:500px;</span><br><span class="line">    align-items: baseline;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line">    background-color: deepskyblue;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.item:nth-child(1)&#123;</span><br><span class="line">    font-size: 36px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718145051.png" alt=""></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>主轴对齐</p><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">flex-start默认</button><button type="button" class="tab " data-href="test4-2">flex-end</button><button type="button" class="tab " data-href="test4-3">center</button><button type="button" class="tab " data-href="test4-4">space-between</button><button type="button" class="tab " data-href="test4-5">space-around</button><button type="button" class="tab " data-href="test4-6">space-evenly</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p>主轴起点对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="comment">/*align-items: baseline;*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718145453.png" alt=""></p></div><div class="tab-item-content" id="test4-2"><p>主轴终点对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="comment">/*align-items: baseline;*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718145644.png" alt=""></p></div><div class="tab-item-content" id="test4-3"><p>主轴居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="comment">/*align-items: baseline;*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718145803.png" alt=""></p></div><div class="tab-item-content" id="test4-4"><p>贴紧容器主轴起点终点，均匀分布</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="comment">/*align-items: baseline;*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718145929.png" alt=""></p></div><div class="tab-item-content" id="test4-5"><p>不贴紧容器主轴起点终点，均匀分布，但中间距离是首位距离的两倍</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="comment">/*align-items: baseline;*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718150135.png" alt=""></p></div><div class="tab-item-content" id="test4-6"><p>不贴紧容器主轴起点终点，均匀分布，中间距离，首位距离相等</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="comment">/*align-items: baseline;*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718150431.png" alt=""></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p>flex多轴之间对齐</p><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">normal默认</button><button type="button" class="tab " data-href="test4-2">flex-start</button><button type="button" class="tab " data-href="test4-3">flex-end</button><button type="button" class="tab " data-href="test4-4">center</button><button type="button" class="tab " data-href="test4-5">space-around</button><button type="button" class="tab " data-href="test4-6">space-between</button><button type="button" class="tab " data-href="test4-7">space-evenly</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718164857.png" alt=""></p></div><div class="tab-item-content" id="test4-2"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718165013.png" alt=""></p></div><div class="tab-item-content" id="test4-3"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718165142.png" alt=""></p></div><div class="tab-item-content" id="test4-4"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718165627.png" alt=""></p></div><div class="tab-item-content" id="test4-5"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718165314.png" alt=""></p></div><div class="tab-item-content" id="test4-6"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718165449.png" alt=""></p></div><div class="tab-item-content" id="test4-7"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718165832.png" alt=""></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>调整单个元素的对齐方式，而不会影响到全部子元素</p><p>因为 float、clear 和 vertical-align 等调整对齐方式的属性都不能应用于 flex 子元素。</p><p>可设置的值和align-items值一致，并且覆盖其值</p><p>示例1:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box-1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-self</span>:center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box-2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orangered;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-self</span>:flex-end;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718172110.png" alt=""></p><p>示例2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: flex-end;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box-1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*align-self:center;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box-2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orangered;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718172500.png" alt=""></p><p><strong>覆盖align-items</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: flex-end;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box-1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-self</span>:center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box-2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orangered;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718172551.png" alt=""></p><h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./CSS/day8-4.css&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;item&quot;</span>&gt;</span>12月6日<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;item&quot;</span>&gt;</span>深圳市<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;item&quot;</span>&gt;</span>11-15℃<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718170647.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718170742.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718170934.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> flexbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2024/07/14/2%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/07/14/2%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-14</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">LeetCode-75移除链表元素</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-15</p></div></div><div class='timeline-item-content'><p><a href="(https://leetcode.cn/problems/design-linked-list/description/">LeetCode-707设计链表</a>)</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-16</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">LeetCode-206反转链表</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-17</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">LeetCode-24两两交换链表中的节点</a></p><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">LeetCode-19删除链表的倒数第 N 个结点</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-18</p></div></div><div class='timeline-item-content'><p><a href="https://leetcode.cn/problems/swapping-nodes-in-a-linked-list/description/">LeetCode-1721交换链表中的节点</a></p><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">LeetCode-142环形链表 II</a></p></div></div></div><h2 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h2><h3 id="leetcode-75移除链表元素"><a href="#leetcode-75移除链表元素" class="headerlink" title="leetcode-75移除链表元素"></a>leetcode-75移除链表元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy_head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        ListNode* current = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        <span class="comment">//虚拟节点</span></span><br><span class="line">        dummy_head-&gt;next = head;</span><br><span class="line">        <span class="comment">//当前节点是dummy_head</span></span><br><span class="line">        current = dummy_head;</span><br><span class="line">        <span class="keyword">while</span>(current-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(current-&gt;next-&gt;val == val)&#123;</span><br><span class="line">                <span class="comment">//临时存放被删除的节点</span></span><br><span class="line">                ListNode* temp = current-&gt;next;</span><br><span class="line">                current-&gt;next = current-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> temp;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                current = current-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* newHead = dummy_head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummy_head;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240714134000.png" alt=""></p><h2 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h2><h3 id="leetcode-707设计链表"><a href="#leetcode-707设计链表" class="headerlink" title="leetcode-707设计链表"></a>leetcode-707设计链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        LinkNode* next;</span><br><span class="line">        <span class="built_in">LinkNode</span>(<span class="type">int</span> val) : <span class="built_in">val</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        dummy_head = <span class="keyword">new</span> <span class="built_in">LinkNode</span>(<span class="number">0</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        LinkNode* current;</span><br><span class="line">        <span class="comment">// 如果未在索引范围之内</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="comment">// 索引范围之内</span></span><br><span class="line">        current = dummy_head-&gt;next;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == index) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkNode</span>(val);</span><br><span class="line">        newNode-&gt;next = dummy_head-&gt;next;</span><br><span class="line">        dummy_head-&gt;next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkNode* current;</span><br><span class="line">        LinkNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkNode</span>(val);</span><br><span class="line">        current = dummy_head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        current-&gt;next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size|| index &lt; <span class="number">0</span>) &#123;<span class="comment">//index可以到size-1，因为题目中提到，当index等于长度的时候，添加到末尾</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkNode</span>(val);</span><br><span class="line">        LinkNode* current;</span><br><span class="line">        current = dummy_head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode-&gt;next = current-&gt;next;</span><br><span class="line">        current-&gt;next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkNode* current;</span><br><span class="line">        current = dummy_head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkNode* temp;</span><br><span class="line">        temp = current-&gt;next;</span><br><span class="line">        current-&gt;next = current-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    LinkNode* dummy_head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList* obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(index);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240715200039.png" alt=""></p><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><h3 id="leetcode-206反转链表"><a href="#leetcode-206反转链表" class="headerlink" title="leetcode-206反转链表"></a>leetcode-206反转链表</h3><div class="tabs" id="test"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test-1">双指针</button><button type="button" class="tab " data-href="test-2">递归</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* cur;</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            ListNode* tmp;</span><br><span class="line">            tmp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716152234.png" alt=""></p></div><div class="tab-item-content" id="test-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* cur,ListNode* pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>) <span class="keyword">return</span> pre;</span><br><span class="line">        ListNode* tmp = cur-&gt;next;</span><br><span class="line">        cur-&gt; next = pre;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(tmp,cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(head,<span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="两两交换链表中的节点"><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a>两两交换链表中的节点</h2><h3 id="leetcode-24两两交换链表中的节点"><a href="#leetcode-24两两交换链表中的节点" class="headerlink" title="leetcode-24两两交换链表中的节点"></a>leetcode-24两两交换链表中的节点</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy_head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        dummy_head-&gt;next= head;</span><br><span class="line">        ListNode* cur;</span><br><span class="line">        cur = dummy_head;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">nullptr</span>)&#123;<span class="comment">//偶数个&amp;&amp;奇数个</span></span><br><span class="line">            ListNode* tmp = cur-&gt;next;<span class="comment">//交换节点的第一个</span></span><br><span class="line">            ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next;<span class="comment">//交换对后的第一个</span></span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">            cur-&gt;next-&gt;next = tmp;</span><br><span class="line">            tmp-&gt;next = tmp1;</span><br><span class="line">            cur = cur-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* res = dummy_head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummy_head;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717134220.png" alt=""></p><h3 id="leetcode-1721交换链表中的节点"><a href="#leetcode-1721交换链表中的节点" class="headerlink" title="leetcode-1721交换链表中的节点"></a>leetcode-1721交换链表中的节点</h3><div class="tabs" id="test"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test-1">交换节点</button><button type="button" class="tab " data-href="test-2">交换节点值</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapNodes</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy_head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        dummy_head-&gt;next = head;</span><br><span class="line">        ListNode* fast;</span><br><span class="line">        ListNode* slow;</span><br><span class="line">        ListNode* first;</span><br><span class="line">        first = dummy_head;</span><br><span class="line">        fast = dummy_head;</span><br><span class="line">        slow = dummy_head;</span><br><span class="line">        <span class="type">int</span> f = k;</span><br><span class="line">        <span class="comment">// 移动到k值的前一个位置</span></span><br><span class="line">        <span class="keyword">while</span> (k-- &amp;&amp; fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f == k + <span class="number">1</span>) &#123;</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">                first = first-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (first-&gt;next == slow) &#123;</span><br><span class="line">            ListNode* tmp = first-&gt;next;</span><br><span class="line">            ListNode* tmp1 = slow-&gt;next;</span><br><span class="line">            ListNode* tmp2 = slow-&gt;next-&gt;next;</span><br><span class="line">            first-&gt;next = tmp1;</span><br><span class="line">            tmp1-&gt;next = tmp;</span><br><span class="line">            tmp-&gt;next = tmp2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (slow-&gt;next == first) &#123;</span><br><span class="line">            ListNode* tmp = slow-&gt;next;</span><br><span class="line">            ListNode* tmp1 = first-&gt;next;</span><br><span class="line">            ListNode* tmp2 = first-&gt;next-&gt;next;</span><br><span class="line">            slow-&gt;next = tmp1;</span><br><span class="line">            tmp1-&gt;next = tmp;</span><br><span class="line">            tmp-&gt;next = tmp2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ListNode* tmp = first-&gt;next;</span><br><span class="line">            ListNode* tmp0 = first-&gt;next-&gt;next;</span><br><span class="line">            ListNode* tmp1 = slow-&gt;next;</span><br><span class="line">            ListNode* tmp2 = slow-&gt;next-&gt;next;</span><br><span class="line">            first-&gt;next = tmp1;</span><br><span class="line">            first-&gt;next-&gt;next = tmp0;</span><br><span class="line">            slow-&gt;next = tmp;</span><br><span class="line">            slow-&gt;next-&gt;next = tmp2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy_head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718200212.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718200242.png" alt=""></p></div><div class="tab-item-content" id="test-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapNodes</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy_head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        dummy_head-&gt;next = head;</span><br><span class="line">        ListNode* fast;</span><br><span class="line">        ListNode* slow;</span><br><span class="line">        ListNode* first;</span><br><span class="line">        ListNode* second;</span><br><span class="line">        fast = dummy_head;</span><br><span class="line">        slow = dummy_head;</span><br><span class="line">        <span class="comment">// 移动到k值的前一个位置</span></span><br><span class="line">        <span class="keyword">while</span> (k-- &amp;&amp; fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        first = fast;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        second = slow-&gt;next;</span><br><span class="line">        <span class="built_in">swap</span>(first-&gt;val,second-&gt;val);</span><br><span class="line">        <span class="keyword">return</span> dummy_head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="删除链表倒数第三个节点"><a href="#删除链表倒数第三个节点" class="headerlink" title="删除链表倒数第三个节点"></a>删除链表倒数第三个节点</h2><h3 id="leetcode-19删除链表的倒数第三个结点"><a href="#leetcode-19删除链表的倒数第三个结点" class="headerlink" title="leetcode-19删除链表的倒数第三个结点"></a>leetcode-19删除链表的倒数第三个结点</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy_head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        dummy_head-&gt;next = head;</span><br><span class="line">        ListNode* fast = dummy_head;</span><br><span class="line">        ListNode* slow = dummy_head;</span><br><span class="line">        <span class="keyword">while</span>(n-- &amp;&amp; fast != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tmp = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">        <span class="keyword">return</span> dummy_head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240717143600.png" alt=""></p><h2 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h2><h3 id="leetcode-142环形链表-II"><a href="#leetcode-142环形链表-II" class="headerlink" title="leetcode-142环形链表 II"></a>leetcode-142环形链表 II</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                ListNode* index1 = head;</span><br><span class="line">                ListNode* index2 = fast;</span><br><span class="line">                <span class="keyword">while</span>(index1 != index2)&#123;</span><br><span class="line">                    index1 = index1-&gt;next;</span><br><span class="line">                    index2 = index2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240718211708.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 和算法斗志斗勇的日子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2024/07/14/css/"/>
      <url>/2024/07/14/css/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>①元素选择器</p><p>②class选择器</p><p>③id选择器：通过id选择器可以改变单个元素的样式，因为广泛认可id是唯一的，所以不要给多个元素设置相同的id。</p><p>④type属性选择器</p><p>⑤:root选择器:是一个伪类选择器，它用于选取文档的根元素，即&lt; html &gt;元素，通常定义整个文档范围内都可以使用的自定义属性（即CSS变量）</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>①行内 CSS 设置 元素的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②使用元素选择器来设置元素的样式</p><p>在代码的顶部，创建一个 style 声明区域，如下方所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--这里用的h2元素选择器--&gt;</span></span></span><br><span class="line"><span class="language-xml">  h2 &#123;</span></span><br><span class="line"><span class="language-xml">    color: blue;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③使用 class 选择器设置单个元素的样式</p><p>在标签中创建一个class选择器，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--这里用的是.red-text class选择器--&gt;</span></span></span><br><span class="line"><span class="language-xml">  .red-text &#123;</span></span><br><span class="line"><span class="language-xml">    color: red;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;red-text&quot;</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过 CSS class 选择器，多个 HTML 元素可以使用相同的 CSS 样式规则。</li></ul><p>④使用id选择器设置单个元素的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#cat-photo-form</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>:green</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://freecatphotoapp.com/submit-cat-photo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cat-photo-form&quot;</span>&gt;</span></span><br><span class="line">… </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716003325.png" alt=""></p><p>⑤使用type选择器设置元素样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[type=<span class="string">&#x27;checkbox&#x27;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-top</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>:<span class="number">15px</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://freecatphotoapp.com/submit-cat-photo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cat-photo-form&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;indoor-outdoor&quot;</span> <span class="attr">checked</span>&gt;</span> Indoor<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;indoor-outdoor&quot;</span>&gt;</span> Outdoor<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;personality&quot;</span> <span class="attr">checked</span>&gt;</span> Loving<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;personality&quot;</span>&gt;</span> Lazy<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;personality&quot;</span>&gt;</span> Energetic<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;cat photo URL&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716175630.png" alt=""></p><h3 id="样式优先级"><a href="#样式优先级" class="headerlink" title="样式优先级"></a>样式优先级</h3><p>h1继承于body的样式</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716190008.png" alt=""></p><p>①Class选择器优先级高于继承样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: monospace;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.pink-text</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;pink-text&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716185934.png" alt=""></p><p>②在style标签中，之后的声明样式会覆盖之前的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: monospace;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.pink-text</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.blue-text</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;pink-text blue-text&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716190225.png" alt=""></p><p>③id选择器优先级高于class选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: monospace;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.pink-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.blue-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#orange-text</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;pink-text blue-text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;orange-text&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716190437.png" alt=""></p><p>④内联样式优先级高于id选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: monospace;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#orange-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.pink-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.blue-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;orange-text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pink-text blue-text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:white&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716190702.png" alt=""></p><p>⑤important优先级最高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: monospace;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#orange-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.pink-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: pink <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.blue-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;orange-text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pink-text blue-text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: white&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/image-20240716190852562.png" alt=""></p><h3 id="CSS变量一次更改多个元素"><a href="#CSS变量一次更改多个元素" class="headerlink" title="CSS变量一次更改多个元素"></a>CSS变量一次更改多个元素</h3><p>使用<strong>var()</strong>函数用于插入自定义的属性值，如果属性值在多出被使用时即很有用。自定义属性名称必须以—开头，value值可选（此值选择后，默认为该样式）。即当未定义属性值的时候使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.penguin</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* Only change code below this line */</span></span></span><br><span class="line"><span class="language-css">    <span class="attr">--penguin-skin</span>: gray;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.penguin-top</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">var</span>(--penguin-skin, gray);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">45%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.penguin-bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">var</span>(--penguin-skin, gray);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">53%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">45%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>自定义一个CSS变量</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.penguin</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--penguin-skin</span>: gray;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.penguin-top</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: gray;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">45%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用一个自定义的CSS变量</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.penguin</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--penguin-skin</span>: gray;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.penguin-top</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">var</span>(--penguin-skin);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">45%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>给CSS变量设置备用值</strong></p><p>当由于某些原因变量不生效时，设置备用值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.penguin</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--penguin-skin</span>: gray;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.penguin-top</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">var</span>(--penguin-skin,black);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">45%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过浏览器降级提高兼容性"><a href="#通过浏览器降级提高兼容性" class="headerlink" title="通过浏览器降级提高兼容性"></a>通过浏览器降级提高兼容性</h3><p>当浏览器解析页面的 CSS 时，会自动忽视不能识别或者不支持的属性。 举个栗子，如果使用 CSS 变量来指定站点的背景色，IE 浏览器由于不支持 CSS 变量而会忽略背景色。 此时，浏览器会尝试使用其它值。 但如果没有找到其它值，则会使用默认值，也就是没有背景色。</p><p>这意味着如果想提供浏览器降级方案，在声明之前提供另一个更宽泛的值即可。 这样老旧的浏览器会降级使用这个方案，新的浏览器会在后面的声明里覆盖降级方案。</p><p>通过浏览器降级提高兼容性<br>我们使用了 CSS 变量来定义 .red-box 的背景色。 现在，我们通过在现有的声明之前添加另一个 background 声明，并将它的值设置为 red，来提升浏览器的兼容性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--red-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.red-box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">var</span>(--red-color);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="更改特定区域的变量"><a href="#更改特定区域的变量" class="headerlink" title="更改特定区域的变量"></a>更改特定区域的变量</h3><p>在:root中创建变量时，这些变量作用于整个页面，可以通过一个特定的选择器（包含想改变变量在内的标签的选择器）中再次设置这些变量来重写</p><h3 id="媒体查询中使用变量"><a href="#媒体查询中使用变量" class="headerlink" title="媒体查询中使用变量"></a>媒体查询中使用变量</h3><p>媒体查询旨在为不同的设备定义不同的样式规则</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width: 350px) &#123;  </span><br><span class="line">    :root &#123;  </span><br><span class="line">        body &#123;  </span><br><span class="line">            background-color: var(--main-bg-color);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>min-width:屏幕最小宽度，即屏幕大于这个宽度</p><p>max-width:屏幕最大宽度，即屏幕小于这个宽度</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716212743.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716212839.png" alt=""></p><p><a href="https://www.bilibili.com/video/BV1124y1P7HP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=7c38dd720c7b9fd549ea4a78f4b3db70">css媒体查询</a></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h5 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h5><p>color</p><h5 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h5><p>font-size</p><h5 id="字体-1"><a href="#字体-1" class="headerlink" title="字体"></a>字体</h5><p>font-family</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font-family: FAMILY_NAME, GENERIC_NAME;</span><br><span class="line"><span class="comment">&lt;!--GENERIC_NAME是可选的，当FAMILY_NAME不可用的时候即会使用后备字体--&gt;</span></span><br></pre></td></tr></table></figure><h6 id="字体降级"><a href="#字体降级" class="headerlink" title="字体降级"></a>字体降级</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例--&gt;</span></span><br><span class="line">font-family: Lobster,monospace;</span><br><span class="line"><span class="comment">&lt;!--当Lobster字体失效就会使用monospace字体--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>字体名区分大小写</li><li>如果字体名含有空格，则在声明时需要用引号包起来。 例如，使用 “Open Sans” 字体需要添加引号，而 Lobster 则不需要。</li></ul><p>从外部引入字体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--链接外部文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Lobster&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.red-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>:Lobster;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;red-text&quot;</span>&gt;</span>CatPhotoApp<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/tags/tag-link.html">link标签</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h5 id="宽度"><a href="#宽度" class="headerlink" title="宽度"></a>宽度</h5><p>width</p><h5 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h5><ul><li>border-color：边框颜色</li><li>border-width：边框宽度</li><li>border-style：边框样式</li></ul><div class="tabs" id="test"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test-1">写法一</button><button type="button" class="tab " data-href="test-2">写法二</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">.thick-green-border&#123;</span></span><br><span class="line"><span class="language-xml">    border-color: green;</span></span><br><span class="line"><span class="language-xml">    border-width: 10px;</span></span><br><span class="line"><span class="language-xml">   <span class="comment">&lt;!--solid:实线--&gt;</span></span></span><br><span class="line"><span class="language-xml">    border-style: solid;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.thick-green-border</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><ul><li><p>border-radius：边框圆角</p><p>①像素值</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">.thick-green-border&#123;</span></span><br><span class="line"><span class="language-xml">    border-color: green;</span></span><br><span class="line"><span class="language-xml">    border-width: 10px;</span></span><br><span class="line"><span class="language-xml">   <span class="comment">&lt;!--solid:实线--&gt;</span></span></span><br><span class="line"><span class="language-xml">    border-style: solid;</span></span><br><span class="line"><span class="language-xml">    border-radius:10px;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716001446.png" alt=""></p><p>​    ②百分比</p><p>因此可以用这个属性制作圆片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.thick-green-border</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: green;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716001804.png" alt=""></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h5 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h5><p>background-color</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.silver-background</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>:silver;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;silver-background&quot;</span>&gt;</span></span><br><span class="line">… </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716002442.png" alt=""></p><h3 id="边距"><a href="#边距" class="headerlink" title="边距"></a>边距</h3><p>HTML元素都是以矩形为基础的</p><p>三个重要属性：<strong>内边距</strong> padding、<strong>外边距</strong> margin 、<strong>边框</strong> border。</p><h5 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h5><p>元素到边框的距离。属性接受长度值或百分之（和尺寸属性取值相同）。</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716170601.png" alt=""></p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">6px</span> solid <span class="built_in">rgb</span>(<span class="number">32</span>, <span class="number">159</span>, <span class="number">147</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>(*^▽^*)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716170728.png" alt=""></p><h5 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h5><p>在不同的元素之间创建“空白”，定义了元素与其他<strong>相邻</strong>元素的距离，这段空白通常不能放置其他内容。属性接受长度值或百分之（和尺寸属性取值相同）。</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716170830.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">6px</span> solid <span class="built_in">rgb</span>(<span class="number">32</span>, <span class="number">159</span>, <span class="number">147</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.leftmargin</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">2cm</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.topmargin</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">3cm</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>(*^▽^*)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个段落没有指定外边距<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&quot;leftmargin&quot;</span>&gt;</span>这个段落带有指定的左边距<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个段落没有指定外边距<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&quot;topmargin&quot;</span>&gt;</span>这个段落带有指定的上外边距<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240716172738.png" alt=""></p><p><a href="https://www.bilibili.com/video/BV1Bg411P7QY/?spm_id_from=333.937.header_right.history_list.click&amp;vd_source=7c38dd720c7b9fd549ea4a78f4b3db70">内外边距</a></p><p><a href="https://zhuanlan.zhihu.com/p/56164006">CSS负边距的一些理解</a></p><h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/21911d5702996394409371c46f53e442.png" alt=""></p><p>单位分为两种，一种是相对单位，一种是绝对单位</p><p><strong>绝对单位</strong>：绝对单位和无力单位相关。绝对长度就等于屏幕上实际测量的长度，不过不同的屏幕分辨率会存在差异，就会造成误差。</p><p><strong>相对单位</strong>：它们的实际值会依赖其他长度的值决定。比如em的大小基于元素字体的字体大小，如果用其设置font-size的值，那么其会跟随父font-size值来改变</p><h2 id="属性值解释"><a href="#属性值解释" class="headerlink" title="属性值解释"></a>属性值解释</h2><ol><li><strong>type</strong>属性中<strong>text/css</strong> 一种 MIME 类型（多用途互联网邮件扩展类型），用于表示文档、文件或字节流的性质和格式。text/css 专门用于标识 CSS（层叠样式表）文件。MIME 类型由两部分组成：类型（type）和子类型（subtype），用斜杠（/）分隔。</li></ol><ul><li>text 表示文件是文本文件，这意味着文件内容是人类可读的字符数据，而不是二进制数据（如图像或视频文件）。</li><li>css 是子类型，指定了文本文件的特定格式或用途，即层叠样式表，这是一种用来为结构化文档（如HTML或XML）添加样式（如字体、间距和颜色）的语言。</li></ul><p>2.<strong>元素颜色值</strong></p><p>①颜色英文名称</p><p>②十六进制编码获得指定颜色</p><ul><li>十六进制全编码：在CSS中可以使用6个十六进制数字代表颜色，每两个数字控制一种颜色。例如：black为#000000</li></ul><p><a href="https://www.freecodecamp.org/news/rgb-color-html-and-css-guide/#whatisthergbcolormodel">RGB Color – HTML and CSS Guide</a></p><ul><li>缩写十六进制编码：三个数字代表三原色，红色十六进制为#FF0000，缩写变为#F00</li></ul><p>③RGB值</p>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2024/07/11/html/"/>
      <url>/2024/07/11/html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HTML中文全名叫做<strong>“超文本标记语言”</strong>，即不仅仅包含文本还有图片、链接等元素。</p><h2 id="HTML标记"><a href="#HTML标记" class="headerlink" title="HTML标记"></a>HTML标记</h2><p>标准的html标记都是成对出现的（除了&lt; br/ &gt;、&lt; hr/ &gt;、&lt; img/ &gt;)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--是HTML5文档的文档类型声明,告诉浏览器应该使用html5来解析文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表示该文件是用html来写的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表示头部信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--网页中的字符编码为UTF-8--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!--网页标题栏显示信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--网页中实际显示的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>页面内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240711012436.png" alt=""></p><ol><li><code>&lt;title&gt;</code>网页标题栏显示信息</li><li><code>&lt;meta&gt;</code>html元信息标签，搜素引擎抓取网页时分析</li></ol><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240809234920.png" alt=""></p><h2 id="HTML-dom树"><a href="#HTML-dom树" class="headerlink" title="HTML dom树"></a>HTML dom树</h2><p>HTML DOM（Document Object Model，文档对象模型）树是浏览器内部表示网页内容的一种方式。它是一个编程接口，用于Web文档（如HTML或XML文档）的结构化表示，并允许开发者使用JavaScript等脚本语言来访问和操作网页的内容、结构和样式。</p><h3 id="DOM树的结构"><a href="#DOM树的结构" class="headerlink" title="DOM树的结构"></a>DOM树的结构</h3><p>DOM树是一种树状结构，每个<strong>节点</strong>都代表文档中的一个<strong>对象</strong>。这些对象可以是元素（如<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;p&gt;</code>等）、属性（如<code>id</code>、<code>class</code>等）、文本内容（如段落中的文字）等。DOM树从根节点开始，通常是<code>&lt;html&gt;</code>元素，然后逐级向下扩展到整个文档。</p><h3 id="DOM树的主要节点类型"><a href="#DOM树的主要节点类型" class="headerlink" title="DOM树的主要节点类型"></a>DOM树的主要节点类型</h3><p>前三个为主要组成部分</p><ul><li><strong>Document节点</strong>：代表整个文档，是DOM树的<strong>根节点</strong>。</li><li><strong>Element节点</strong>：代表HTML或XML文档中的元素，如<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>等。</li><li><strong>Attribute节点</strong>：代表元素的属性，如<code>&lt;img src=&quot;image.jpg&quot;&gt;</code>中的<code>src</code>属性。</li><li>Text节点：代表元素或属性中的文本内容。</li><li>Comment节点：代表HTML或XML中的注释。</li><li>DocumentType节点（或称为DOCTYPE节点）：代表文档类型声明，如<code>&lt;!DOCTYPE html&gt;</code>。</li></ul><p>DOM树反映了 HTML 文档的层次结构。每个元素节点都有父节点和<strong>可能</strong>的子节点。根据 HTML 文档的嵌套关系，DOM 树的节点之间形成了父子关系、兄弟关系等。</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240711010900.png" alt=""></p><p><a href="https://www.runoob.com/htmldom/htmldom-nodes.html">HTML DOM 节点 | 菜鸟教程</a></p><h2 id="HTML元素标题"><a href="#HTML元素标题" class="headerlink" title="HTML元素标题"></a>HTML元素标题</h2><p>html标题是通过&lt; h1 &gt; - &lt; h6 &gt;标签进行定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>222<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240711110405.png" alt=""></p><p>浏览器会在标题前后添加空行</p><h2 id="HTML文本元素"><a href="#HTML文本元素" class="headerlink" title="HTML文本元素"></a>HTML文本元素</h2><p>HTML 段落文本段落是通过 <p> 标签定义的。</p><p>HTML文本格式：</p><ul><li>加粗文本：b标签</li><li>斜体文本：i标签</li><li>下标sub标签，上标sup标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>hehe<span class="tag">&lt;/<span class="name">b</span>&gt;</span>x<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>+x<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240711111122.png" alt=""></p><h2 id="HTML链接元素"><a href="#HTML链接元素" class="headerlink" title="HTML链接元素"></a>HTML链接元素</h2><p>标签&lt; a &gt;</p><p>链接语法：</p><ul><li>href：指定链接URL</li><li>target（可选）：指定链接如何在浏览器中打开。<ul><li>__blank：在新标签或窗口中打开链接</li><li>__self：在当前标签或窗口中打开链接</li><li>……</li></ul></li><li>title：提供链接的额外信息，通常在鼠标悬停在链接上时显示为工具提示</li><li>rel（可选）：指定与链接目标的关系<ul><li>nofollow：是一个属性值，用于指示搜索引擎不要追踪（即不要跟随）该链接，不要将链接页面的“权重”或“排名值”传递给目标页面。这通常用于防止垃圾链接（如链接到垃圾网站）对搜索引擎优化（SEO）的影响。如果网站管理员认为某个链接是不受信任的或不需要传递排名的，就可以使用nofollow。</li><li>noopener：是一个相对较新的rel属性值，用于提高安全性。当使用target=”_blank”打开新标签页时，如果不指定rel=”noopener”（或rel=”noopener noreferrer”），新页面可以访问window.opener属性，这允许新打开的页面与原始页面进行某些交互，这可能会被恶意利用。使用noopener可以阻止这种行为，提高安全性。</li><li>……</li></ul></li></ul><p>锚链接标签及属性</p><p>a[herf]可用于：</p><ol><li>跳转到指定网页<ul><li>在线网址：<a href="https://whiteisblank.github.io/">https://whiteisblank.github.io/</a></li><li>相对路径：a.html(一个html的路径)        </li></ul></li></ol><p>​    2.跳转到指定网页的指定位置：指定网页#指定位置的id名</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712114636.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/QQ%E5%9B%BE%E7%89%8720240712113809.gif" alt=""></p><p>​    3.空链接，不跳转：#</p><p>​    4.用于文件下载：文件路径（网页无法正常渲染的文件的时候就会直接下载，图片不行）</p><p>​        相对路径：</p><p>​                1.当前文件夹下的文件夹中的内容：./Directory/xxx.xx</p><p>​                2.上个文件夹：../Directory/xxx.xx</p><p>​                3.同一个文件夹：xxx.xx</p><p><a href="https://www.cnblogs.com/aaaaniu/p/8269618.html">HTML知识点总结之<a>标签</a></p><p><a href="https://www.cnblogs.com/liuyongqi/p/14710494.html">标签锚链接</a></p><h2 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h2><p><strong><!-- --></strong> </p><h2 id="HTML样式"><a href="#HTML样式" class="headerlink" title="HTML样式"></a>HTML样式</h2><p>div标签(层叠样式表单元的位置和层次)</p><p>在html中，可以用div标签来划分html结构，从而配合css来整体控制某一块样式</p><p>div标签可以包含文字、图片、链接等其他所有类型的html元素。视觉上不提供任何默认效果。</p><p>HTML CSS：通过设置style属性来设置标签的样式</p><p>常用CSS样式：</p><p>背景颜色：background-color</p><p>字体颜色 ，字体大小：color（颜色），和font-size（字体大小）</p><p>文本对齐方式：text-align（left,center,right）</p><p><strong>HTML 内联样式</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> =<span class="string">&quot;text-align: center&quot;</span>&gt;</span>数学表达式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>内部样式表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>外部样式表</strong></p><p>独立的css文件，需要通过<strong><link href="路径"/></strong>导入以便使用</p><p><strong>优先级：(就近原则)内联样式&gt;内部样式表&gt;外部样式表</strong></p><p><a href="https://blog.csdn.net/weixin_53988377/article/details/125858313">CSS常见样式</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 从CSS文件中引入样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./CSS/day3-1.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天星期几？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天星期五<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background: black;color: aliceblue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> =<span class="string">&quot;text-align: center&quot;</span>&gt;</span>数学表达式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size:20px&quot;</span>&gt;</span>y = x<span class="tag">&lt;<span class="name">sub</span>&gt;</span>1<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> + x<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:black;</span><br><span class="line">    <span class="attribute">background</span>: deepskyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当从外部引入了css文件之后，目前有内部样式表，对同一个部分进行了样式定义。是否注释内部样式表</p><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">未注释</button><button type="button" class="tab " data-href="test4-2">注释</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712143359.png" alt=""></strong></p></div><div class="tab-item-content" id="test4-2"><p><strong><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712143525.png" alt=""></strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="HTML-img元素"><a href="#HTML-img元素" class="headerlink" title="HTML img元素"></a>HTML img元素</h2><p>img标签是个单标签</p><p>属性：</p><ul><li>src</li><li>alt：当图片无法正常显示的时候替换为文本</li><li>height：高度</li><li>width：宽度</li><li>title：当鼠标放在图片上一会儿会出现文字提示</li><li>style属性中可以设置填充模式objec-fit<ul><li>fill：默认值。图片完全填充容器，可能会被拉伸或挤压，以适应容器的尺寸</li><li>contain：图片将在容器内等比例缩放，以确保整个图片都能完全显示在容器内，可能会在容器内留有空白。</li><li>cover：图片将在容器内等比例缩放，以确保整个容器都被图片覆盖，可能会裁切图片。</li><li>none：图片将保持原始尺寸，不会进行缩放或拉伸，可能会超出容器。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s3.amazonaws.com/freecodecamp/relaxing-cat.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100% &quot;</span> <span class="attr">style</span>=<span class="string">&quot;object-fit:fill&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">none</button><button type="button" class="tab " data-href="test4-2">fill</button><button type="button" class="tab " data-href="test4-3">contain</button><button type="button" class="tab " data-href="test4-4">cover</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712153029.png" /></p></div><div class="tab-item-content" id="test4-2"><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712152911.png"/></p></div><div class="tab-item-content" id="test4-3"><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712153143.png"  /></p></div><div class="tab-item-content" id="test4-4"><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712153313.png"  /></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span>这是谁家偷吃东西的光仔<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;光崽走丢啦！o(╥﹏╥)o&quot;</span> <span class="attr">title</span>=<span class="string">&quot;白&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">资源存在</button><button type="button" class="tab " data-href="test4-2">资源不存在</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712153535.png" alt=""></p></div><div class="tab-item-content" id="test4-2"><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712154442.png" alt=""></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="HTML-Table元素"><a href="#HTML-Table元素" class="headerlink" title="HTML Table元素"></a>HTML Table元素</h2><p>table标签</p><p>分组：</p><ul><li>thead</li><li>tbody</li><li>tfoot</li></ul><p>属性：</p><ul><li>border：边框（定义边框的粗细）</li><li>cellpadding：创建单元格内容与其边框之间的空白</li><li>cellspacing：增加单元格之间的距离</li><li>width</li><li>height</li><li>align：对齐方式（left，right，center）</li></ul><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712220718.png" alt=""></p><ul><li>bgcolor：表格背景颜色</li></ul><p>table标签内的定义：</p><ul><li><p>tr：tr 是 table row 的缩写，表示表格的一行。</p><ul><li>align：水平对齐方式</li><li>valign：垂直对其方式（top，bottom，middle）</li></ul></li><li><p>td：td 是 table data 的缩写，表示表格的数据单元格。</p><p>th：th 是 table header的缩写，表示表格的表头单元格。</p><ul><li>align：水平对齐方式</li><li>valign：垂直对其方式（top，bottom，middle）</li><li>width</li><li>height</li><li>colspan：设置单元格跨列</li><li>rowspan：设置单元格跨行</li></ul></li><li><p>caption：给table设置一个标题</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">&quot;1&quot;</span>  <span class="attr">cellpadding</span> = <span class="string">&quot;10&quot;</span> <span class="attr">cellspacing</span> = <span class="string">&quot;1&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>课表查询<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>任课老师<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>上课时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>节数<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>图论以及应用<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>王晓<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>7-8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>矩阵分析<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>刘军<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>机器学习<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>赵易<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>4-5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712171658.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.blue</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">&quot;1&quot;</span>  <span class="attr">cellpadding</span> = <span class="string">&quot;5&quot;</span> <span class="attr">cellspacing</span> = <span class="string">&quot;0&quot;</span> <span class="attr">width</span> = <span class="string">600</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#6495ed&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>天气现象<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>气温<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>风向<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>风力<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--跨行：</span></span><br><span class="line"><span class="comment">        1：要跨行的第一个单元格写跨行属性rowspan</span></span><br><span class="line"><span class="comment">        2，要跨行的数量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>13日星期一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>白天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/WhiteIsBlank/Image/main/%E4%B8%AD%E5%8D%88.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;25&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>晴转多云<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>高温7°C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>无持续风向<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>微风<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         &lt;td&gt;矩阵分析&lt;/td&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>夜间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/WhiteIsBlank/Image/main/%E5%A4%A9%E6%B0%94-%E5%A4%9C.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;25&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>晴<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>低温-4°C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>无持续风向<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>微风<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>14日星期二<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>白天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/WhiteIsBlank/Image/main/%E4%B8%AD%E5%8D%88.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;25&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>晴<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>高温9°C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>无持续风向<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>微风<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> &gt;</span>夜间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/WhiteIsBlank/Image/main/%E5%A4%A9%E6%B0%94-%E9%9B%A8.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;25&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>雨</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>低温-4°C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>无持续风向<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>微风<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240712231822.png" alt=""></p><h2 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h2><h3 id="HTML无序列表"><a href="#HTML无序列表" class="headerlink" title="HTML无序列表"></a>HTML无序列表</h3><p>&lt; ul &gt;标签表示HTML页面中项目的无序列表，一般以项目符号呈现列表项，二列表项用&lt; li &gt;标签定义。</p><ul><li><p>无序列表中各个列表项之间没有序列级别之分，是并列的</p></li><li><p>&lt; ul &gt;中只允许放&lt; li &gt;标签</p></li><li>&lt; li &gt;相当于一个容器，其中可以容纳所有的元素</li><li>无序列表会带有自己的样式属性，但在实际使用时，我们会使用CSS来设置</li></ul><p>格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无序列表可以通过style中的list-style-type来设置样式</p><p>disc：原点样式</p><p>circle：空心圈样式</p><p>square：正方形样式</p><h3 id="HTML有序列表"><a href="#HTML有序列表" class="headerlink" title="HTML有序列表"></a>HTML有序列表</h3><p>&lt; ol &gt;标签表示HTML中排列有序的列表，其各个列表会按照一定的顺序排列定义，一般用数字来显示，并且使用&lt; li &gt;标签定义列表项。</p><ul><li>&lt; ol &gt;中只允许放&lt; li &gt;标签</li><li>&lt; li &gt;相当于一个容器，其中可以容纳所有的元素</li><li>有序列表会带有自己的样式属性，但在实际使用时，我们会使用CSS来设置</li></ul><p>格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="line">&lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="line">&lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><p>有序列表可以直接使用 type 属性来设置样式</p><p>A：大写字母列表</p><p>a：小写字母列表</p><p>I：罗马数字列表</p><p>i：小写罗马数字列表</p><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>如何把大象装进冰箱<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>放入大象<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>食物分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;list-style-type:square&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea</span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;type1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;list-style-type:circle&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Black tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;list-style-type:circle&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Green tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240713000007.png" alt=""></p><h3 id="HTML自定义列表"><a href="#HTML自定义列表" class="headerlink" title="HTML自定义列表"></a>HTML自定义列表</h3><p>自定义列表的使用场景：</p><p>自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><ul><li><p>无序列表中各个列表项之间没有序列级别之分，是并列的</p></li><li><p>&lt; ul &gt;中只允许放&lt; li &gt;标签</p></li><li>&lt; li &gt;相当于一个容器，其中可以容纳所有的元素</li><li>无序列表会带有自己的样式属性，但在实际使用时，我们会使用CSS来设置</li></ul><p>格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;名词&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;解释1&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;解释2&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240713092945.png" alt=""></p><ul><li>&lt; dl&gt;中只允许放&lt; dt &gt;和&lt; dd &gt;标签</li><li>&lt; dt &gt;和&lt; dd &gt;个数没有限制，经常是一个&lt; dt &gt;对应多个&lt; dd &gt;</li></ul><h2 id="HTML-区块元素与内联元素"><a href="#HTML-区块元素与内联元素" class="headerlink" title="HTML 区块元素与内联元素"></a>HTML 区块元素与内联元素</h2><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240713102115.png" alt=""></p><p><a href="https://www.bilibili.com/video/BV1As4y1Z7bU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=7c38dd720c7b9fd549ea4a78f4b3db70">CH-16-03-HTML区块的理解（块级元素和内联元素）_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/DrunkYoung/article/details/103518535">strong/b,em/i</a></p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>独占一行</p><p><strong>div</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        class用.表示</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.contain</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.mean</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">199</span>, <span class="number">199</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.footer</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contain&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>标题栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mean&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:left&quot;</span>&gt;</span>菜单栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:left&quot;</span>&gt;</span>内容栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;clear:both;&quot;</span>&gt;</span>底部栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><p>用多少占多少</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.span01</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.span02</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&quot;span01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;span01&quot;</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&quot;span02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;span02&quot;</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">hidden</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>隐藏1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">hidden</span>&gt;</span>隐藏2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">hidden</span>=<span class="string">&quot;until-found&quot;</span>&gt;</span>不隐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>不隐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240713110202.png" alt=""></p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240713103832.png" alt=""></p><p><strong>浮动</strong></p><p>float属性</p><p>目的：让多个块级元素在同一行显示</p><p>属性:</p><ul><li>left：元素向左浮动</li><li>right：元素向右浮动</li><li>none：默认值，元素不浮动</li></ul><h2 id="HTML表单元素"><a href="#HTML表单元素" class="headerlink" title="HTML表单元素"></a>HTML表单元素</h2><p>作用：收集用户填入的数据，并将数据交给服务器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;服务器地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;请求方式&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;数据格式&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>method请求方式有<ul><li>get(默认)提交时，数据跟在URL地址之后</li><li>post提交时，数据在请求体内</li></ul></li><li>enctype在post请求时，指定数据的格式<ul><li>application/x-www-form-urlencoded(默认)</li><li>multipart/form-data</li></ul></li><li>其中表单项提供多种收集数据的方式<ul><li>有name属性的表单项数据，才会被发送给服务器</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单的基本用法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com/s&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/129a668a383331888a82192060062802.gif" alt=""></p><p>常见表单项：</p><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">提交</button><button type="button" class="tab " data-href="test4-2">文本框</button><button type="button" class="tab " data-href="test4-3">密码框</button><button type="button" class="tab " data-href="test4-4">隐藏框</button><button type="button" class="tab " data-href="test4-5">日期框</button><button type="button" class="tab " data-href="test4-6">单选</button><button type="button" class="tab " data-href="test4-7">多选</button><button type="button" class="tab " data-href="test4-8">文件上传</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p>当用户单击确认按钮时，表单的内容会被传送到action 属性指定的服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-4"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以用value属性提前给一个value值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-5"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-6"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认选中checked--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-7"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认选中checked--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-8"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--要求两个特殊的属性，method，enctype--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p><strong>&lt; label &gt;</strong>标签：为input元素定义标注</p><p>label元素不会向用户展示特殊的效果</p><p>属性：for：”for” 属性可把 label 绑定到另外一个元素，”for” 属性的值设置为相关元素的 id 属性的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>标注<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>&lt; select &gt;</strong> 元素用于创建下拉列表，而 <strong>&lt; option &gt;</strong> 元素用于定义下拉列表中的选项。</p><p>属性：value：选中某一项之后返回的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>AA<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">示例1</button><button type="button" class="tab " data-href="test4-2">示例2</button><button type="button" class="tab " data-href="test4-3">示例3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">文件上传必须有 method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://localhost:8080/test&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">        女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        唱歌<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱歌&quot;</span>&gt;</span></span><br><span class="line">        逛街<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;逛街&quot;</span>&gt;</span></span><br><span class="line">        游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240713123126.png" alt=""></p></div><div class="tab-item-content" id="test4-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>22<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240713124341.png" alt=""></p></div><div class="tab-item-content" id="test4-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>新增课程<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;course&quot;</span>&gt;</span>课程名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;course&quot;</span> <span class="attr">name</span>=<span class="string">&quot;course&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;place&quot;</span>&gt;</span>上课地点<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;place&quot;</span> <span class="attr">name</span>=<span class="string">&quot;place&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;江南校区&quot;</span>&gt;</span>江南校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;南山校区&quot;</span>&gt;</span>南山校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>授课方式<span class="tag">&lt;/<span class="name">label</span>&gt;</span>:</span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;online&quot;</span>&gt;</span>线上<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;online&quot;</span> <span class="attr">id</span>=<span class="string">&quot;online&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;Offline&quot;</span>&gt;</span>线下<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Offline&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Offline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exam&quot;</span>&gt;</span>期末考试<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;exam&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exam&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;期末考试&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240713170948.png" alt=""></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/09/1%E6%95%B0%E7%BB%84/"/>
      <url>/2024/07/09/1%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>在有序的数组中进行查找</p><h6 id="LeetCode-704二分查找"><a href="#LeetCode-704二分查找" class="headerlink" title="LeetCode-704二分查找"></a><strong>LeetCode-704二分查找</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right)/<span class="number">2</span>;<span class="comment">//求中间的位置</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(logn)</p><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240706011507.png" style="zoom:67%;" /></p><p><a href="https://www.bilibili.com/video/BV1aw411A7uL?vd_source=0594117fb42cd21e3bfb0166f3dfae8b">如何正确推导二分查找的时间复杂度？为啥是 O(logn)?</a></p><h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><h6 id="LeetCode-27移除元素"><a href="#LeetCode-27移除元素" class="headerlink" title="LeetCode-27移除元素"></a><strong>LeetCode-27移除元素</strong></h6><p>双指针fast和slow，当nums[fast] != target，才把值赋给slow这个指针位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fast,slow;</span><br><span class="line">        fast = slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;fast &lt; nums.<span class="built_in">size</span>();fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != val)&#123;</span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">                <span class="comment">//nums[slow] = nums[fast];</span></span><br><span class="line">                <span class="comment">//slow++;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;<span class="comment">//为什么不加1，一般长度都是索引+1，因为在最后一次赋值后slow自增</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)</p><h6 id="LeetCode-26删除有序数组中的重复项"><a href="#LeetCode-26删除有序数组中的重复项" class="headerlink" title="LeetCode-26删除有序数组中的重复项"></a><strong>LeetCode-26删除有序数组中的重复项</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fast,slow,flag,k;</span><br><span class="line">        fast = slow = flag = <span class="number">0</span>;</span><br><span class="line">        k = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(;flag &lt; nums.<span class="built_in">size</span>() &amp;&amp; flag &lt; k;flag++)&#123;</span><br><span class="line">            slow = fast = flag + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(;fast &lt; nums.<span class="built_in">size</span>() &amp;&amp; fast &lt; k;fast++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[fast] != nums[flag])&#123;</span><br><span class="line">                    nums[slow++] = nums[fast];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            k = slow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n^2)</p><p>由于了解到是有序的一个数组，所以进行修正</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fast,slow;</span><br><span class="line">        fast = slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(fast++;fast &lt; nums.<span class="built_in">size</span>();fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != nums[slow])&#123;</span><br><span class="line">                slow++;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow<span class="number">+1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240707145918.png" alt=""></p><p>时间复杂度：O(n)</p><h3 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h3><h6 id="LeetCode-977有序数组的平方和"><a href="#LeetCode-977有序数组的平方和" class="headerlink" title="LeetCode-977有序数组的平方和"></a><strong>LeetCode-977有序数组的平方和</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;<span class="comment">//从两头开始所以k从最后一个位置开始</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,j = k;i &lt;= j;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]*nums[i] &gt; nums[j]*nums[j])&#123;</span><br><span class="line">                res[k--] = nums[i]*nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res[k--] = nums[j]*nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240707152313.png" alt=""></p><p>时间复杂度：O(n)</p><h6 id="LeetCode-88合并两个有序数组"><a href="#LeetCode-88合并两个有序数组" class="headerlink" title="LeetCode-88合并两个有序数组"></a>LeetCode-88合并两个有序数组</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i,j,k;</span><br><span class="line">        i = j = k = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(m+n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(;i &lt; m &amp;&amp; j &lt; n &amp;&amp; n*m &gt; <span class="number">0</span>;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i] &lt; nums2[j])&#123;</span><br><span class="line">                res[k++] = nums1[i++];   </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res[k++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; m)&#123;</span><br><span class="line">            <span class="keyword">for</span>(;i &lt; m;i++)&#123;</span><br><span class="line">                res[k++] = nums1[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; n)&#123;</span><br><span class="line">            <span class="keyword">for</span>(;j &lt; n;j++)&#123;</span><br><span class="line">                res[k++] = nums2[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums1 = res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/20240707160753.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 和算法斗志斗勇的日子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/02/hello-world/"/>
      <url>/2024/07/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z3求解器</title>
      <link href="/2024/05/28/Z3%E6%B1%82%E8%A7%A3%E5%99%A8/"/>
      <url>/2024/05/28/Z3%E6%B1%82%E8%A7%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Z3求解器"><a href="#Z3求解器" class="headerlink" title="Z3求解器"></a>Z3求解器</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install z3-solver</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Z3求解器是一个强大的自动定理证明器，可用于数学问题、软件和硬件验证、安全分析等领域。以下是Z3求解器的基本用法：</p><ol><li><p>引入z3库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li><li><p>创建变量</p><p>Z3支持整数、实数、布尔值和位向量类型的变量。可以使用 <code>Int()</code>, <code>Real()</code>, <code>Bool()</code> 和 <code>BitVec()</code> 分别创建这些类型的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 创建一个整型变量 x 和 y</span></span><br><span class="line">x, y = Ints(<span class="string">&#x27;x y&#x27;</span>)</span><br><span class="line"><span class="comment">#2. 创建在列表中</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):  <span class="comment">#其中x为列表的长度</span></span><br><span class="line">    a.append(Int(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个位向量变量 a 和 b，长度为四位</span></span><br><span class="line">a, b = BitVecs(<span class="string">&#x27;a b&#x27;</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></li><li><p>建立逻辑约束</p><p>在建立约束之前，通常需要使用所有已知的情况来定义变量。可以使用 <code>And()</code> 建立这个约束:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constraints = And(x &gt;= <span class="number">1</span>, x &lt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>建立求解器并添加约束</p><p>创建一个求解器对象，然后将约束添加进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化一个求解器对象</span></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将约束加入求解器中</span></span><br><span class="line">solver.add(constraints)</span><br></pre></td></tr></table></figure></li><li><p>检查是否有解</p><p>使用 solver.check() 来检查约束是否有解，并返回 SOLVER 状态的结果。如果约束有解，则继续下一步；否则，说明不存在任何满足条件的变量数值状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对模型求解并处理结果</span></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;有解&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无解&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>获取符合约束条件的模型解</p><p>如果存在解，则可以使用 <code>solver.model()</code>方法来获取满足条件的变量取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取符合约束条件的解</span></span><br><span class="line">ans = solver.model()</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 变量的取值以及将其转换为Python int</span></span><br><span class="line">solution_x = model[x].as_long()</span><br><span class="line"><span class="comment">#也可以，可以达到同样的效果</span></span><br><span class="line">solution_x = <span class="built_in">int</span>(<span class="built_in">str</span>(model[x]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 变量的取值以及将其转换为Python int</span></span><br><span class="line">solution_a = model[a].as_long()</span><br></pre></td></tr></table></figure></li></ol><p>这是Z3求解器基本的使用方法，但实际上，Z3还提供了功能强大的API，包括自定义优化目标、非线性算法和增加插件等。</p><h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><h3 id="Zzzzz3333"><a href="#Zzzzz3333" class="headerlink" title="Zzzzz3333"></a>Zzzzz3333</h3><p>32位PE文件无壳</p><p>IDA打开程序分析</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/bc83d21f-f510-4fe9-a50e-49050304ba5f" alt=""></p><p>编写脚本求取key的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">Arglist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    Arglist.append(Int(<span class="built_in">str</span>(i)))<span class="comment">#循环将数组中的每一个数据作为求解器的未知数</span></span><br><span class="line">v13 = Arglist[<span class="number">5</span>]</span><br><span class="line">v11 = Arglist[<span class="number">4</span>]</span><br><span class="line">v9 = Arglist[<span class="number">1</span>]</span><br><span class="line">v12 = Arglist[<span class="number">3</span>]</span><br><span class="line">v8 = Arglist[<span class="number">7</span>]</span><br><span class="line">v10 = Arglist[<span class="number">0</span>]</span><br><span class="line">solver = Solver()</span><br><span class="line">solver.add(Arglist[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">4</span> * Arglist[<span class="number">2</span>]</span><br><span class="line">     + Arglist[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">4</span> * (Arglist[<span class="number">3</span>] + <span class="number">4</span> * Arglist[<span class="number">2</span>])</span><br><span class="line">     + <span class="number">3</span> * (Arglist[<span class="number">4</span>] + <span class="number">4</span> * Arglist[<span class="number">0</span>])</span><br><span class="line">     + <span class="number">2</span> * (Arglist[<span class="number">5</span>] + <span class="number">4</span> * Arglist[<span class="number">6</span>])</span><br><span class="line">     + <span class="number">11</span> * Arglist[<span class="number">1</span>] == <span class="number">6426</span>)</span><br><span class="line">solver.add(<span class="number">11</span> * (v10 + v8 + v12) + <span class="number">4</span> * (v13 + <span class="number">2</span> * v11) + Arglist[<span class="number">2</span>] + <span class="number">45</span> * v9 + <span class="number">7</span> * Arglist[<span class="number">6</span>] == <span class="number">9801</span>)</span><br><span class="line">solver.add(<span class="number">5</span> * v9</span><br><span class="line">     + <span class="number">2</span> * (v11 + Arglist[<span class="number">6</span>] + v13 + <span class="number">2</span> * (v8 + v12) + Arglist[<span class="number">2</span>] + <span class="number">2</span> * (Arglist[<span class="number">6</span>] + v13 + <span class="number">2</span> * (v8 + v12)) + <span class="number">8</span> * v10) == <span class="number">6021</span>)</span><br><span class="line">solver.add(<span class="number">19</span> * v10 + <span class="number">9</span> * v9 + <span class="number">67</span> * v8 + <span class="number">5</span> * (Arglist[<span class="number">2</span>] + Arglist[<span class="number">6</span>]) + <span class="number">7</span> * (v13 + <span class="number">4</span> * v12) + <span class="number">4</span> * v11 == <span class="number">14444</span>)</span><br><span class="line">solver.add(<span class="number">22</span> * v13 + <span class="number">5</span> * (v11 + <span class="number">2</span> * (v12 + v9 + <span class="number">2</span> * v10)) + <span class="number">4</span> * (v8 + Arglist[<span class="number">6</span>]) + <span class="number">6</span> * Arglist[<span class="number">2</span>] == <span class="number">7251</span>)</span><br><span class="line">solver.add(<span class="number">19</span> * v12</span><br><span class="line">     + <span class="number">3</span> * (v8 + Arglist[<span class="number">2</span>] + <span class="number">4</span> * v8 + Arglist[<span class="number">6</span>] + <span class="number">2</span> * (v8 + Arglist[<span class="number">2</span>] + <span class="number">4</span> * v8))</span><br><span class="line">     + <span class="number">4</span> * (v10 + v13 + v9 + <span class="number">2</span> * (v10 + v13)) == <span class="number">10054</span>)</span><br><span class="line">m = And(<span class="number">7</span> * v10 + <span class="number">17</span> * (v12 + v9 * <span class="number">2</span>) + <span class="number">11</span> * (v11 + <span class="number">2</span> * v13) + <span class="number">2</span> * (Arglist[<span class="number">2</span>] + Arglist[<span class="number">6</span>] + <span class="number">4</span> * Arglist[<span class="number">2</span>] + <span class="number">6</span> * v8) == <span class="number">10735</span>,Arglist[<span class="number">6</span>] + v11 + <span class="number">11</span> * Arglist[<span class="number">2</span>] + <span class="number">15</span> * (v12 + <span class="number">2</span> * v8) + v9*<span class="number">2</span> + <span class="number">43</span> * v10 + <span class="number">21</span> * v13 == <span class="number">11646</span>)</span><br><span class="line">solver.add(m)</span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    ans = solver.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(ans[Arglist[i]].as_long()),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无解&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后将脚本得出的key输入程序得到flag</p><p><strong>flag{Zzzz333_Is_Cool!!!}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> z3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2024/04/22/Java/"/>
      <url>/2024/04/22/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h6 id="整型数据前缀"><a href="#整型数据前缀" class="headerlink" title="整型数据前缀"></a>整型数据前缀</h6><ul><li>十进制：50</li><li>八进制：062（前缀0）</li><li>十六进制：0x32（前缀0x）</li></ul><h6 id="默认类型"><a href="#默认类型" class="headerlink" title="默认类型"></a>默认类型</h6><ul><li>整数默认为int</li><li>小数默认为double（定义float数据，数字后跟上f/F）</li></ul><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul><li><strong>局部变量</strong>：构造函数或块内部声明的变量，需要初始化，否者编译错误。</li><li><strong>实例变量</strong>：属于类的实例，如果不初始化，直接赋值为默认值。</li><li><strong>静态变量或类变量</strong>：类变量是在类中用static关键字声明的变量，属于类但不是实例。</li><li><strong>参数变量</strong>：参数是方法或者构造函数声明中的变量。</li></ul><h1 id="命名格式"><a href="#命名格式" class="headerlink" title="命名格式"></a>命名格式</h1><ul><li>驼峰法<ul><li>首字母小写：局部变量、实例变量（成员变量）、参数</li><li>首字母大写：类名</li></ul></li><li>全部大写：常量</li></ul><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><h6 id="default（默认修饰符）"><a href="#default（默认修饰符）" class="headerlink" title="default（默认修饰符）"></a>default（默认修饰符）</h6><p>默认是同一包内的所有类都可以访问</p><h6 id="private（私有访问）"><a href="#private（私有访问）" class="headerlink" title="private（私有访问）"></a>private（私有访问）</h6><p>private声明的变量、方法、构造方法只能被所属类访问，并不能对类和接口进行声明</p><h6 id="public（公有访问）"><a href="#public（公有访问）" class="headerlink" title="public（公有访问）"></a>public（公有访问）</h6><p>public声明的类、方法、构造方法和接口能够被其他类访问</p><h6 id="protected（受保护的访问）"><a href="#protected（受保护的访问）" class="headerlink" title="protected（受保护的访问）"></a>protected（受保护的访问）</h6><p>protected 可以修饰数据成员，构造方法，方法，不能修饰类（内部类除外）（接口和接口的成员方法和变量均不可）</p><h6 id="访问控制和继承"><a href="#访问控制和继承" class="headerlink" title="访问控制和继承"></a>访问控制和继承</h6><ul><li>父类public子类public</li><li>父类protected子类protected、public</li><li>父类private不能继承</li></ul><h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><h6 id="static"><a href="#static" class="headerlink" title="static"></a>static</h6><ul><li><p>静态变量：类变量，局部变量不可声明为静态变量。无论实例多少份对象，类变量 只有一份拷贝</p></li><li><p>静态方法：独立于对象的静态方法，静态方法不能使用类的非静态变量。</p></li></ul><p>对类变量和方法的访问可以直接使用 <strong>classname.variablename</strong> 和 <strong>classname.methodname</strong> 的方式访问</p><h6 id="final"><a href="#final" class="headerlink" title="final"></a>final</h6><ul><li><p>final变量：必须指定初始值，常和static一起 声明类常量</p></li><li><p>final方法：final方法可以被子类继承但是不能被重写</p></li><li><p>final类：无法继承</p></li></ul><h6 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h6><ul><li>抽象类：类无法被final和abstract同时修饰，作用未来对该类进行扩充，如果有抽象方法，那么必为抽象类</li><li>抽象方法：没有实现，需要子类实现。不能被final和static修饰，继承抽象类的子类必须实现所有抽象方法</li></ul><h6 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h6><p>方法同一时间只能被一个线程访问。可以用四个访问修饰符</p><h6 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h6><p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型</p><h6 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h6><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h6 id="for"><a href="#for" class="headerlink" title="for"></a>for</h6><ul><li>For-Each(增强循环)</li></ul><p>一种用于数组增强型的for循环</p><p>for（声明语句：表达式）：</p><p>1.声明语句，声明新的局部变量</p><p>2.要访问的数组名</p><h2 id="if…else…-switch-case"><a href="#if…else…-switch-case" class="headerlink" title="if…else…/switch case"></a>if…else…/switch case</h2><h2 id="String-StringBuffer-StringBuilder"><a href="#String-StringBuffer-StringBuilder" class="headerlink" title="String/StringBuffer/StringBuilder"></a>String/StringBuffer/StringBuilder</h2><h6 id="String"><a href="#String" class="headerlink" title="String"></a>String</h6><p>String创建的对象，是无法修改的</p><h6 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h6><p>每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象</p><h6 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h6><p>StringBuilder 的方法不是线程安全的（不能同步访问），但是相较于StringBuffer速度更快</p><ul><li>StringBuilder sb = new StringBuilder(10)；<ul><li>对象的大小，初始大小设定</li></ul></li><li>sb.append(“456”)；<ul><li>类似于python向内存添加数据</li></ul></li><li>sb.insert(4,”89”);<ul><li>在索引为4处插入——”45689“</li></ul></li><li>sb.delete(2,4)<ul><li>删除索引[2,4)间的数据——“459”</li></ul></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><ul><li><p>```java<br>dataType[] arrayRefVar;<br>arrayRefVar = new dataType[arraySize];</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  dataType[] arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure></li><li><p>```java<br>dataType[] arrayRefVar = {xxx,xxx}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###### 数组作为函数参数</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public static void printArray(int[] array)</span><br></pre></td></tr></table></figure></li></ul><h6 id="数组作为函数返回值"><a href="#数组作为函数返回值" class="headerlink" title="数组作为函数返回值"></a>数组作为函数返回值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] printArray(<span class="type">int</span>[] array)</span><br></pre></td></tr></table></figure><h6 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[][] typeName = <span class="keyword">new</span> <span class="title class_">type</span>[typeLength1][typeLength2];</span><br></pre></td></tr></table></figure><h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><ul><li><p>```java<br>public static boolean equals(long[] a, long[] a2)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public static void sort(Object[] a)//升序排序</span><br></pre></td></tr></table></figure></li><li><p>```java<br>public static void fill(int[] a, int val)//把指定的值val赋值给数组中的每一个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public static int binarySearch(Object[] a, Object key)//必须是排好序的，利用二分算法查找，找到返回索引，没有返回-1</span><br></pre></td></tr></table></figure></li></ul><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><h6 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h6><ul><li><p>导包</p><ul><li>```java<br>import java.util.Date;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 创建对象</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    Date date = new Date();//Date类有两种构造方法Date(long millisec)另一种</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将时间对象转换为String形式</p><ul><li>```java<br>date.toString();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###### SimpleDateFormat格式化日期</span><br><span class="line"></span><br><span class="line">确定日期转换格式（后面格式化编码严格要求大小写HH是24小时制，hh是12小时制）</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">import java.text.*;</span><br><span class="line">SimpleDateFormat ft = new SimpleDateFormat (&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br><span class="line">ft.format(date);//将date转换为定义的格式</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="printf格式化日期"><a href="#printf格式化日期" class="headerlink" title="printf格式化日期"></a>printf格式化日期</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%tY-%tm-%td %tH:%tM:%tS %tZ&quot;</span>, date, date, date, date, date, date);</span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line">ystem.out.printf(<span class="string">&quot;%1$s %2$tB %2$td, %2$tY&quot;</span>, <span class="string">&quot;Due date:&quot;</span>, date);<span class="comment">//%后面的数字是索引，以$结束，%开始</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%s %tB %&lt;te, %&lt;tY&quot;</span>,<span class="string">&quot;Due date:&quot;</span>, date);<span class="comment">//用&#x27;&lt;&#x27;，表示使用先前被格式化的参数</span></span><br><span class="line"><span class="comment">//b的使用，月份简称  </span></span><br><span class="line">String str=String.format(Locale.US,<span class="string">&quot;英文月份简称：%tb&quot;</span>,date);       </span><br><span class="line">System.out.println(str);                                                               System.out.printf(<span class="string">&quot;本地月份简称：%tb%n&quot;</span>,date);  </span><br></pre></td></tr></table></figure><h6 id="解析字符串为时间"><a href="#解析字符串为时间" class="headerlink" title="解析字符串为时间"></a>解析字符串为时间</h6><p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span> (<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">input = <span class="string">&quot;1818-11-11&quot;</span> </span><br><span class="line">t = ft.parse(input);</span><br><span class="line"><span class="comment">//Wed Nov 11 00:00:00 GMT 1818</span></span><br></pre></td></tr></table></figure><h6 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h6><p>线程休眠函数，类似与c</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">1000</span>*<span class="number">3</span>); <span class="comment">//当前线程休眠3s</span></span><br></pre></td></tr></table></figure><h6 id="System-currentTimeMillis"><a href="#System-currentTimeMillis" class="headerlink" title="System.currentTimeMillis( )"></a>System.currentTimeMillis( )</h6><p>获取总的毫秒时间，new date()也是调用这个函数来实现。总毫秒时间从1970年1月1日开始计算。一般可以用来计算时间差。</p><h6 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//默认是当前日期</span></span><br></pre></td></tr></table></figure><ul><li><p>set方法</p><ul><li>```java<br>c.set(2024, 2, 17);<br>c.set(Calendar.DATE,10);//将日期设置为10<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- add方法</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    c.add(Calendar.DATE, 10);//在c的基础上日期加上10</span><br></pre></td></tr></table></figure></li></ul></li><li><p>get方法</p><ul><li>```java<br>int year = c.get(Calendar.YEAR);//获取对象c的年份<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###### GregorianCalendar类</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">GregorianCalendar gcalendar = new GregorianCalendar();</span><br><span class="line">int year = gcalendar.get(Calendar.YEAR);</span><br><span class="line">gcalendar.isLeapYear(year);//判断是否是闰年，是返回true</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h6 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h6><p>一个类的两个方法拥有相同的名字，但是有不同的参数列表</p><h6 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h6><p>main函数的传入参数String[] args，当我们由命令行输入的时候我们可以通过args[i]来获取命令行输入</p><h6 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeName... parameterName</span><br></pre></td></tr></table></figure><p>相当于是一个输入的不定长的typeName类型的数组，可以用parameterName.length来获取长度</p><h6 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize() 方法"></a>finalize() 方法</h6><p>java内存清理有JVM来自动进行，但是如果调用这个方法可以手动。对象被垃圾收集器析构(回收)之前调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.gc(); <span class="comment">//调用Java垃圾收集器，在main函数中调用</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 在这里终结代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/java/java-methods.html">Java 方法 | 菜鸟教程 (runoob.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalizationDemo</span> &#123;  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    <span class="type">Cake</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cake</span>(<span class="number">1</span>);  </span><br><span class="line">    <span class="type">Cake</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cake</span>(<span class="number">2</span>);  </span><br><span class="line">    <span class="type">Cake</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cake</span>(<span class="number">3</span>);  </span><br><span class="line">      </span><br><span class="line">    c2 = c3 = <span class="literal">null</span>;  </span><br><span class="line">    System.gc(); <span class="comment">//调用Java垃圾收集器</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cake</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;  </span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> id;  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Cake</span><span class="params">(<span class="type">int</span> id)</span> &#123;  </span><br><span class="line">    <span class="built_in">this</span>.id = id;  </span><br><span class="line">    System.out.println(<span class="string">&quot;Cake Object &quot;</span> + id + <span class="string">&quot;is created&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">    </span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> java.lang.Throwable &#123;  </span><br><span class="line">    <span class="built_in">super</span>.finalize();  </span><br><span class="line">    System.out.println(<span class="string">&quot;Cake Object &quot;</span> + id + <span class="string">&quot;is disposed&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream、File、IO"><a href="#Stream、File、IO" class="headerlink" title="Stream、File、IO"></a>Stream、File、IO</h2><p>导包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br></pre></td></tr></table></figure><h5 id="读取控制台输入"><a href="#读取控制台输入" class="headerlink" title="读取控制台输入"></a>读取控制台输入</h5><p>Java控制台输入由System.in完成。所以利用BufferedReader对象来创建字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br></pre></td></tr></table></figure><h6 id="字符输入获取"><a href="#字符输入获取" class="headerlink" title="字符输入获取"></a>字符输入获取</h6><p>利用read()方法来读取，输入流中的字符（返回值是整型需要转换，结束返回-1），方法结束的时候抛出IOException异常</p><p>所以在使用main方法进行实现功能的时候也需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span><br></pre></td></tr></table></figure><h6 id="字符串输入获取"><a href="#字符串输入获取" class="headerlink" title="字符串输入获取"></a>字符串输入获取</h6><p>利用readLine()方法，和read()方法一样需要抛出异常。此时需要通过equals()函数，判断是否结束输入。</p><p><strong>注</strong>：继JDK5后可以用Scanner类获取输入</p><h5 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h5><p>System.out.write()方法进行控制台输出</p><p>该方法是将低八位的字节写到流中，并在控制台输出</p><h5 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h5><h6 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接用字符串类型文件名来创建一个输入流对象来读取文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;文件路径&quot;</span>);</span><br><span class="line"><span class="comment">//先使用一个文件对象来创建一个输入流对象</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;文件路径&quot;</span>);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br></pre></td></tr></table></figure><h6 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接用字符串类型文件名来创建一个输入流对象来读取文件</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;文件路径&quot;</span>)</span><br><span class="line"><span class="comment">//先使用一个文件对象来创建一个输入流对象</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;文件路径&quot;</span>);</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">fOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br></pre></td></tr></table></figure><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><h6 id="hasNextLine"><a href="#hasNextLine" class="headerlink" title="hasNextLine"></a>hasNextLine</h6><p>判断是否有输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.hasNextLine()</span><br></pre></td></tr></table></figure><h6 id="next"><a href="#next" class="headerlink" title="next"></a>next</h6><p>当输入有效数据之后，会将之后的空白作为结束符或者分隔符</p><h6 id="nextLine"><a href="#nextLine" class="headerlink" title="nextLine"></a>nextLine</h6><p>以Enter为结束符，输出会包含回车之前的所有字符</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>try…catch</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA远程动态调试（linux）</title>
      <link href="/2024/03/25/IDA%E8%BF%9C%E7%A8%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%EF%BC%88linux%EF%BC%89/"/>
      <url>/2024/03/25/IDA%E8%BF%9C%E7%A8%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%EF%BC%88linux%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="IDA远程动态调试（linux）"><a href="#IDA远程动态调试（linux）" class="headerlink" title="IDA远程动态调试（linux）"></a>IDA远程动态调试（linux）</h1><h6 id="1-配置linux中远程调试需要的文件"><a href="#1-配置linux中远程调试需要的文件" class="headerlink" title="1.配置linux中远程调试需要的文件"></a>1.配置linux中远程调试需要的文件</h6><p>在IDA文件夹中找到dbgsrv文件夹，将其中下图中的两个文件拖入到虚拟机中</p><p><img src="https://user-images.githubusercontent.com/116374553/227719393-002e854a-d65f-4577-9527-bcbdcefbd94a.png" alt=""></p><p>与此同时将需要调试的文件也拖入虚拟机，在终端中利用指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd filename</span><br></pre></td></tr></table></figure><p>获取文件路径</p><h6 id="2-IDA远程连接linux准备"><a href="#2-IDA远程连接linux准备" class="headerlink" title="2.IDA远程连接linux准备"></a>2.IDA远程连接linux准备</h6><p>在IDA界面中按下F9</p><p><img src="https://user-images.githubusercontent.com/116374553/227719814-41229af5-f590-463d-a35d-cba57dca4d9c.png" alt=""></p><p>选择Remote Linux debugger。</p><p>再次按下F9，弹框选择Yes即可。</p><p><img src="https://user-images.githubusercontent.com/116374553/227719971-bd1e7d92-d13f-45cb-941f-9127d8928d7d.png" alt=""></p><p>其中：Application和Input file填入之前pwd得出的路径，并在后面再加上一个文件的名称</p><p>Directory即直接输入pwd得出的路径</p><p>其中Hostname需要在虚拟机的终端中执行指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig </span><br></pre></td></tr></table></figure><p>即可获取到</p><p>Port默认23946</p><p>其它内容均不需要填写</p><h6 id="3-远程连接"><a href="#3-远程连接" class="headerlink" title="3.远程连接"></a>3.远程连接</h6><p>在linux中打开终端，进入存放linux_server的文件夹，并运行linux_server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./linux_server   32位程序调试运行</span><br><span class="line">./linux_server64 64位程序调试运行</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/227720567-2049019b-3088-43eb-946b-acfce3f0f222.png" alt=""></p><p>回到刚才的IDA界面，点击Ok即可</p><p>进入IDA中在想要的地方下断点，F9再次运行，等待一会儿即可开始动态调试</p><p><img src="https://user-images.githubusercontent.com/116374553/227721151-bd99a5e4-cf25-42cb-84b2-b849f978f0cd.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2024/03/22/jdbc1/"/>
      <url>/2024/03/22/jdbc1/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h5 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">SNO <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">Name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">Age <span class="type">INTEGER</span>,</span><br><span class="line">College <span class="type">VARCHAR</span>(<span class="number">30</span>));</span><br></pre></td></tr></table></figure><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Properties</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/jdbc&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;200412&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printData</span><span class="params">(Connection conn)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM student&quot;</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//遍历输出结果</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            <span class="comment">//获取每一行元组中的属性值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">SNO</span> <span class="operator">=</span> resultSet.getNString(<span class="string">&quot;SNO&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">Name</span> <span class="operator">=</span> resultSet.getNString(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">Age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;Age&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">College</span> <span class="operator">=</span> resultSet.getNString(<span class="string">&quot;College&quot;</span>);</span><br><span class="line">            <span class="comment">//输出元组信息</span></span><br><span class="line">            System.out.println(SNO+<span class="string">&quot;,&quot;</span>+Name+<span class="string">&quot;,&quot;</span>+Age+<span class="string">&quot;,&quot;</span>+College+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        statement.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(properties.URL, properties.USER, properties.PASSWORD);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第1题的效果&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO student (SNO,Name,Age,College)\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES \n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;(&#x27;s001&#x27;,&#x27;老大&#x27;,20,&#x27;计算机学院&#x27;),\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;(&#x27;s002&#x27;,&#x27;老二&#x27;,19,&#x27;计算机学院&#x27;),\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;(&#x27;s003&#x27;,&#x27;老三&#x27;,18,&#x27;计算机学院&#x27;),\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;(&#x27;s004&#x27;,&#x27;老四&#x27;,17,&#x27;计算机学院&#x27;)&quot;</span>; <span class="comment">// 请替换 &#x27;someName&#x27; 为正确的值</span></span><br><span class="line">        <span class="comment">// 获取执行sql的对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">// 执行sql</span></span><br><span class="line">        statement.executeUpdate(sql); <span class="comment">// 受影响的行数</span></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        printData(conn);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第2题的效果&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        printData(conn);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第3题的效果&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM student\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;WHERE SNO = &#x27;s004&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement2</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        statement2.executeUpdate(sql2);</span><br><span class="line">        printData(conn);</span><br><span class="line">        statement2.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;第4题：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql3</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM student\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;WHERE SNO = &#x27;s003&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement3</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement3.executeQuery(sql3);</span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">SNO</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;SNO&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">Name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">Age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;Age&quot;</span>); <span class="comment">// Use int for Age</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">College</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;College&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Student&#123;SNO=&quot;</span> + SNO + <span class="string">&quot;,Name=&quot;</span> + Name + <span class="string">&quot;,Age=&quot;</span> + Age + <span class="string">&quot;,College=&quot;</span> + College + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第4题的效果&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        printData(conn);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第5题的效果&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;UPDATE student\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;set SNO = &#x27;s001&#x27;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Name = &#x27;老大&#x27;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Age = 20,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;College = &#x27;通信学院&#x27;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;WHERE SNO = &#x27;s001&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement1</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">// 执行sql</span></span><br><span class="line">        statement1.executeUpdate(sql1); <span class="comment">// 受影响的行数</span></span><br><span class="line">        printData(conn);</span><br><span class="line">        statement1.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/0aecd07d-bba3-4514-8301-d25196055f27" alt=""></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/d5191141-0674-43bc-a490-7db13bbc0bb6" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql练习</title>
      <link href="/2024/03/03/Mysql_homework/"/>
      <url>/2024/03/03/Mysql_homework/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql入门练习"><a href="#mysql入门练习" class="headerlink" title="mysql入门练习"></a>mysql入门练习</h1><h5 id="1-用-SQL-语句，建立如下所示的表-cqupt-student"><a href="#1-用-SQL-语句，建立如下所示的表-cqupt-student" class="headerlink" title="1.用 SQL 语句，建立如下所示的表 cqupt_student"></a>1.用 SQL 语句，建立如下所示的表 cqupt_student</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/44f3ff19-bc2f-461f-a215-b79e01209e5e" alt=""></p><h6 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database stu;</span><br><span class="line">use student;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> cqupt_student(</span><br><span class="line">    studentid <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    sex <span class="type">varchar</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age <span class="type">integer</span>,</span><br><span class="line">    Fee <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    memo <span class="type">varchar</span>(<span class="number">300</span>));</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20240302201329580.png" alt=""></p><h5 id="2-用-Create-Table-语句建表-CourseAa"><a href="#2-用-Create-Table-语句建表-CourseAa" class="headerlink" title="2.用 Create Table 语句建表 CourseAa"></a>2.用 Create Table 语句建表 CourseAa</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/cd3d73e7-ab12-42ae-b6e1-696ccca97093" alt=""></p><h6 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use student;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> CourseAa(</span><br><span class="line">    Aa1 <span class="type">Varchar</span>(<span class="number">20</span>),</span><br><span class="line">    Aa2 <span class="type">integer</span>,</span><br><span class="line">    Aa3 <span class="type">DECIMAL</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/989ea28f-8526-47bf-ab32-6ab6119d45a9" alt=""></p><h5 id="3-用Create-Table-语句建表-ChooseBb"><a href="#3-用Create-Table-语句建表-ChooseBb" class="headerlink" title="3.用Create Table 语句建表 ChooseBb"></a>3.用Create Table 语句建表 ChooseBb</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/9a121147-85e2-4d95-8df2-b80d6dc1b24c" alt=""></p><h6 id="题解：；"><a href="#题解：；" class="headerlink" title="题解：；"></a>题解：；</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use student;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ChooseBb(</span><br><span class="line">    Bb1 <span class="type">Varchar</span>(<span class="number">30</span>),</span><br><span class="line">    Bb2 <span class="type">Integer</span>,</span><br><span class="line">    Bb3 <span class="type">decimal</span>(<span class="number">6</span>));</span><br></pre></td></tr></table></figure><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/55f27dad-9e20-45e9-86c7-7666b8026fef" alt=""></p><h5 id="4-用-Alter-Table-语句更新表-ChooseBb，添加一个属性名-Bb4，类型-Varchar-长度-20-完整性约束设为非空值，缺省值设为字符“系统测试值”"><a href="#4-用-Alter-Table-语句更新表-ChooseBb，添加一个属性名-Bb4，类型-Varchar-长度-20-完整性约束设为非空值，缺省值设为字符“系统测试值”" class="headerlink" title="4.用 Alter Table 语句更新表 ChooseBb，添加一个属性名 Bb4，类型 Varchar,长度 20,完整性约束设为非空值，缺省值设为字符“系统测试值”"></a>4.用 Alter Table 语句更新表 ChooseBb，添加一个属性名 Bb4，类型 Varchar,长度 20,完整性约束设为非空值，缺省值设为字符“系统测试值”</h5><h6 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> ChooseBb</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">column</span> Bb4 <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span>(<span class="string">&#x27;系统测试值&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/df9e8d9a-747c-483a-ad98-823bbd6a078d" alt=""></p><h5 id="5-用-Alter-Table-语句更新表-ChooseBb，添加一个属性名-Bb5，类型-Varchar长度-10，完整性约束设为主码。完成后，表-ChooseBb-的设计如下所示。"><a href="#5-用-Alter-Table-语句更新表-ChooseBb，添加一个属性名-Bb5，类型-Varchar长度-10，完整性约束设为主码。完成后，表-ChooseBb-的设计如下所示。" class="headerlink" title="5.用 Alter Table 语句更新表 ChooseBb，添加一个属性名 Bb5，类型 Varchar长度 10，完整性约束设为主码。完成后，表 ChooseBb 的设计如下所示。"></a>5.用 Alter Table 语句更新表 ChooseBb，添加一个属性名 Bb5，类型 Varchar长度 10，完整性约束设为主码。完成后，表 ChooseBb 的设计如下所示。</h5><h6 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> ChooseBb</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">column</span> Bb5 <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/2b9be716-e514-4c25-b9ab-4c015f95aca1" alt=""></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/21552d6f-b164-451e-b681-03f6e43b8d3f" alt=""></p><h5 id="6-用-Create-View-语句建立一个视图-View-Choosebb-生成的视图属性名（View-bb1，View-bb2，view-bb3）-其中-View-bb1-对应于基表-ChooseBb的-Bb1、View-bb2-对应于基表-ChooseBb-的-Bb4、view-bb3-对应于基表ChooseBb-的-Bb5。"><a href="#6-用-Create-View-语句建立一个视图-View-Choosebb-生成的视图属性名（View-bb1，View-bb2，view-bb3）-其中-View-bb1-对应于基表-ChooseBb的-Bb1、View-bb2-对应于基表-ChooseBb-的-Bb4、view-bb3-对应于基表ChooseBb-的-Bb5。" class="headerlink" title="6.用 Create View 语句建立一个视图 View_Choosebb,生成的视图属性名（View_bb1，View_bb2，view_bb3）, 其中 View_bb1 对应于基表 ChooseBb的 Bb1、View_bb2 对应于基表 ChooseBb 的 Bb4、view_bb3 对应于基表ChooseBb 的 Bb5。"></a>6.用 Create View 语句建立一个视图 View_Choosebb,生成的视图属性名（View_bb1，View_bb2，view_bb3）, 其中 View_bb1 对应于基表 ChooseBb的 Bb1、View_bb2 对应于基表 ChooseBb 的 Bb4、view_bb3 对应于基表ChooseBb 的 Bb5。</h5><h6 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> View_Choosebb <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    choosebb.Bb1 <span class="keyword">AS</span> View_bb1,</span><br><span class="line">    choosebb.Bb4 <span class="keyword">AS</span> View_bb2,</span><br><span class="line">    choosebb.Bb5 <span class="keyword">AS</span> View_bb3</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    choosebb;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> View_Choosebb;</span><br></pre></td></tr></table></figure><h5 id="7-用-Drop-View-语句删除视图-View-Choosebb"><a href="#7-用-Drop-View-语句删除视图-View-Choosebb" class="headerlink" title="7.用 Drop View 语句删除视图 View_Choosebb"></a>7.用 Drop View 语句删除视图 View_Choosebb</h5><h6 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> View_Choosebb;</span><br></pre></td></tr></table></figure><h5 id="8-用-Create-Index-语句对表-ChooseBb-的-Bb2-属性建立一个升序索引，索引名-Index-bb2。-用-Create-Index-语句对表-ChooseBb-的-Bb4-属性建立一个降序索引，索引名-Index-bb4。"><a href="#8-用-Create-Index-语句对表-ChooseBb-的-Bb2-属性建立一个升序索引，索引名-Index-bb2。-用-Create-Index-语句对表-ChooseBb-的-Bb4-属性建立一个降序索引，索引名-Index-bb4。" class="headerlink" title="8.用 Create Index 语句对表 ChooseBb 的 Bb2 属性建立一个升序索引，索引名 Index_bb2。 用 Create Index 语句对表 ChooseBb 的 Bb4 属性建立一个降序索引，索引名 Index_bb4。"></a>8.用 Create Index 语句对表 ChooseBb 的 Bb2 属性建立一个升序索引，索引名 Index_bb2。 用 Create Index 语句对表 ChooseBb 的 Bb4 属性建立一个降序索引，索引名 Index_bb4。</h5><h6 id="题解：-6"><a href="#题解：-6" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX Index_bb2 <span class="keyword">ON</span> choosebb (Bb2 <span class="keyword">ASC</span>);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX Index_bb4 <span class="keyword">ON</span> choosebb (Bb4 <span class="keyword">DESC</span>);</span><br></pre></td></tr></table></figure><h5 id="9-用-Drop-Index-语句删除索引-Index-bb2。"><a href="#9-用-Drop-Index-语句删除索引-Index-bb2。" class="headerlink" title="9.用 Drop Index 语句删除索引 Index_bb2。"></a>9.用 Drop Index 语句删除索引 Index_bb2。</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_bb2 <span class="keyword">ON</span> choosebb;</span><br><span class="line"><span class="keyword">DROP</span> INDEX index_bb4 <span class="keyword">ON</span> choosebb;</span><br></pre></td></tr></table></figure><h5 id="10-用-Create-Table-语句建立-test-表，test-表定义如下所示："><a href="#10-用-Create-Table-语句建立-test-表，test-表定义如下所示：" class="headerlink" title="10.用 Create Table 语句建立 test 表，test 表定义如下所示："></a>10.用 Create Table 语句建立 test 表，test 表定义如下所示：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/3cb0c1c4-0cbe-4069-9d15-02860f9d1003" alt=""></p><h6 id="题解：-7"><a href="#题解：-7" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(</span><br><span class="line">Name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">Age <span class="type">INTEGER</span>,</span><br><span class="line">Score <span class="type">NUMERIC</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">Address <span class="type">VARCHAR</span>(<span class="number">60</span>));</span><br></pre></td></tr></table></figure><h5 id="11-用-INSERT-语句对表-test-插入如下-6-条记录："><a href="#11-用-INSERT-语句对表-test-插入如下-6-条记录：" class="headerlink" title="11.用 INSERT 语句对表 test,插入如下 6 条记录："></a>11.用 INSERT 语句对表 test,插入如下 6 条记录：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/43ac002c-8015-44d3-8005-ef6340772329" alt=""></p><h6 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;赵一&#x27;</span>,<span class="number">20</span>,<span class="number">580.00</span>,<span class="string">&#x27;重邮宿舍 12-3-5&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;钱二&#x27;</span>,<span class="number">19</span>,<span class="number">540.00</span>,<span class="string">&#x27;南福苑5-2-9&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;孙三&#x27;</span>,<span class="number">21</span>,<span class="number">555.50</span>,<span class="string">&#x27;学生新区21-5-15&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;李四&#x27;</span>,<span class="number">22</span>,<span class="number">505.00</span>,<span class="string">&#x27;重邮宿舍8-6-22&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;周五&#x27;</span>,<span class="number">20</span>,<span class="number">495.50</span>,<span class="string">&#x27;学生新区23-4-8&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;吴六&#x27;</span>,<span class="number">19</span>,<span class="number">435.00</span>,<span class="string">&#x27;南福苑2-5-12&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="12-再用-Create-Table-语句建立-test-temp-表，test-temp-表定义如下所示："><a href="#12-再用-Create-Table-语句建立-test-temp-表，test-temp-表定义如下所示：" class="headerlink" title="12.再用 Create Table 语句建立 test_temp 表，test_temp 表定义如下所示："></a>12.再用 Create Table 语句建立 test_temp 表，test_temp 表定义如下所示：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/cf3de6fe-5622-4ff0-a727-54e84a7e510e" alt=""></p><h6 id="题解：-8"><a href="#题解：-8" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_temp(</span><br><span class="line">Name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">Age <span class="type">INTEGER</span>,</span><br><span class="line">Score <span class="type">NUMERIC</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">Address <span class="type">VARCHAR</span>(<span class="number">60</span>));</span><br></pre></td></tr></table></figure><h5 id="13-用-INSERT-语句对表-test-temp-插入如下-3-条记录："><a href="#13-用-INSERT-语句对表-test-temp-插入如下-3-条记录：" class="headerlink" title="13.用 INSERT 语句对表 test_temp,插入如下 3 条记录："></a>13.用 INSERT 语句对表 test_temp,插入如下 3 条记录：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/fd513f5a-385a-4748-9a2e-f1d29f0d3d1f" alt=""></p><h6 id="题解：-9"><a href="#题解：-9" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_temp</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;郑七&#x27;</span>,<span class="number">21</span>,<span class="number">490.50</span>,<span class="string">&#x27;重邮宿舍11-2-1&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;张八&#x27;</span>,<span class="number">20</span>,<span class="number">560.00</span>,<span class="string">&#x27;南福苑3-3-3&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;王九&#x27;</span>,<span class="number">10</span>,<span class="number">515.00</span>,<span class="string">&#x27;学生新区19-7-1&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="14-用-INSERT-INTO-…-SELECT-…-FROM-语句，将-test-temp-表中的数据，插入到-test-表中"><a href="#14-用-INSERT-INTO-…-SELECT-…-FROM-语句，将-test-temp-表中的数据，插入到-test-表中" class="headerlink" title="14.用 INSERT INTO … SELECT … FROM 语句，将 test_temp 表中的数据，插入到 test 表中"></a>14.用 INSERT INTO … SELECT … FROM 语句，将 test_temp 表中的数据，插入到 test 表中</h5><h6 id="题解：-10"><a href="#题解：-10" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_temp;</span><br></pre></td></tr></table></figure><h5 id="15-用-UPDATE-语句将-test-表中年龄小于等于-20-的数据，将成绩更新为原来的成绩加-5-分"><a href="#15-用-UPDATE-语句将-test-表中年龄小于等于-20-的数据，将成绩更新为原来的成绩加-5-分" class="headerlink" title="15.用 UPDATE 语句将 test 表中年龄小于等于 20 的数据，将成绩更新为原来的成绩加 5 分"></a>15.用 UPDATE 语句将 test 表中年龄小于等于 20 的数据，将成绩更新为原来的成绩加 5 分</h5><h6 id="题解：-11"><a href="#题解：-11" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> test</span><br><span class="line"><span class="keyword">SET</span> Score <span class="operator">=</span> Score <span class="operator">+</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">WHERE</span> Age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h5 id="16-用-UPDATE-语句将-test-表中居住在南福苑所有学生的年龄减少-1-岁"><a href="#16-用-UPDATE-语句将-test-表中居住在南福苑所有学生的年龄减少-1-岁" class="headerlink" title="16.用 UPDATE 语句将 test 表中居住在南福苑所有学生的年龄减少 1 岁"></a>16.用 UPDATE 语句将 test 表中居住在南福苑所有学生的年龄减少 1 岁</h5><h6 id="题解：-12"><a href="#题解：-12" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> test</span><br><span class="line"><span class="keyword">SET</span> Age <span class="operator">=</span> Age <span class="operator">-</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> Address <span class="keyword">LIKE</span> <span class="string">&#x27;南福苑%&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="17-用-DELETE-语句将-test-表中年龄大于等于-21-并且成绩大于等于-500-的学生数据删除掉"><a href="#17-用-DELETE-语句将-test-表中年龄大于等于-21-并且成绩大于等于-500-的学生数据删除掉" class="headerlink" title="17.用 DELETE 语句将 test 表中年龄大于等于 21 并且成绩大于等于 500 的学生数据删除掉"></a>17.用 DELETE 语句将 test 表中年龄大于等于 21 并且成绩大于等于 500 的学生数据删除掉</h5><h6 id="题解：-13"><a href="#题解：-13" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test</span><br><span class="line"><span class="keyword">WHERE</span> Age <span class="operator">&gt;=</span> <span class="number">21</span> <span class="keyword">AND</span> Score <span class="operator">&gt;=</span> <span class="number">500</span>;</span><br></pre></td></tr></table></figure><h5 id="18-用-DELETE-语句将-test-表中成绩小于-550-并且居住在重邮宿舍的学生数据删除掉"><a href="#18-用-DELETE-语句将-test-表中成绩小于-550-并且居住在重邮宿舍的学生数据删除掉" class="headerlink" title="18.用 DELETE 语句将 test 表中成绩小于 550 并且居住在重邮宿舍的学生数据删除掉"></a>18.用 DELETE 语句将 test 表中成绩小于 550 并且居住在重邮宿舍的学生数据删除掉</h5><h6 id="题解：-14"><a href="#题解：-14" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test</span><br><span class="line"><span class="keyword">WHERE</span> Score <span class="operator">&lt;</span> <span class="number">500</span> <span class="keyword">AND</span> Address <span class="keyword">LIKE</span> <span class="string">&#x27;重邮宿舍%&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="19-用-Create-Table-建立-Student-表，表结构如下所示："><a href="#19-用-Create-Table-建立-Student-表，表结构如下所示：" class="headerlink" title="19.用 Create Table 建立 Student 表，表结构如下所示："></a>19.用 Create Table 建立 Student 表，表结构如下所示：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/8f11c512-90f7-41c1-bf8f-dbc4b1f8015f" alt=""></p><h6 id="题解：-15"><a href="#题解：-15" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">SNO <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">Name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">Age <span class="type">INTEGER</span>,</span><br><span class="line">College <span class="type">VARCHAR</span>(<span class="number">30</span>));</span><br></pre></td></tr></table></figure><h5 id="20-用-Create-Table-建立-Course-表，表结构如下所示："><a href="#20-用-Create-Table-建立-Course-表，表结构如下所示：" class="headerlink" title="20.用 Create Table 建立 Course 表，表结构如下所示："></a>20.用 Create Table 建立 Course 表，表结构如下所示：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/b8d949d3-a205-4498-871c-12ed847e860a" alt=""></p><h6 id="题解：-16"><a href="#题解：-16" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course(</span><br><span class="line">CouserID <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">CouserName <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">CouserBeforeID <span class="type">VARCHAR</span>(<span class="number">15</span>));</span><br></pre></td></tr></table></figure><h5 id="21-用-Create-Table-建立-Choose-表，表结构如下所示："><a href="#21-用-Create-Table-建立-Choose-表，表结构如下所示：" class="headerlink" title="21.用 Create Table 建立 Choose 表，表结构如下所示："></a>21.用 Create Table 建立 Choose 表，表结构如下所示：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/194d6426-546d-482d-bb38-d9fe61635ca7" alt=""></p><h6 id="题解：-17"><a href="#题解：-17" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Choose(</span><br><span class="line">SNO <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">CourseID <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">Score <span class="type">DECIMAL</span>(<span class="number">5</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h5 id="22-用-INSERT-语句向-Student-表中插入-3-个元组："><a href="#22-用-INSERT-语句向-Student-表中插入-3-个元组：" class="headerlink" title="22.用 INSERT 语句向 Student 表中插入 3 个元组："></a>22.用 INSERT 语句向 Student 表中插入 3 个元组：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/3568262a-1f10-4e57-8c68-c9bbce6c354d" alt=""></p><h6 id="题解：-18"><a href="#题解：-18" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;S00001&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;计算机学院&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;S00002&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;通信学院&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;S00003&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;计算机学院&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="23-用-INSERT-语句向-Course-表中插入-3-个元组："><a href="#23-用-INSERT-语句向-Course-表中插入-3-个元组：" class="headerlink" title="23.用 INSERT 语句向 Course 表中插入 3 个元组："></a>23.用 INSERT 语句向 Course 表中插入 3 个元组：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/691d6439-520c-4f55-afed-7e55142a30cc" alt=""></p><h6 id="题解：-19"><a href="#题解：-19" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;C1&#x27;</span>,<span class="string">&#x27;计算机引论&#x27;</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="string">&#x27;C2&#x27;</span>,<span class="string">&#x27;C语言&#x27;</span>,<span class="string">&#x27;C1&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;C3&#x27;</span>,<span class="string">&#x27;数据结构&#x27;</span>,<span class="string">&#x27;C2&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="24-用-INSERT-语句向-Choose-表中插入-7-个元组："><a href="#24-用-INSERT-语句向-Choose-表中插入-7-个元组：" class="headerlink" title="24.用 INSERT 语句向 Choose 表中插入 7 个元组："></a>24.用 INSERT 语句向 Choose 表中插入 7 个元组：</h5><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/8bebecf5-5c95-461e-81b6-e2be25eb3312" alt=""></p><h6 id="题解：-20"><a href="#题解：-20" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Choose</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;S00001&#x27;</span>,<span class="string">&#x27;C1&#x27;</span>,<span class="number">95</span>),</span><br><span class="line">(<span class="string">&#x27;S00001&#x27;</span>,<span class="string">&#x27;C2&#x27;</span>,<span class="number">880</span>),</span><br><span class="line">(<span class="string">&#x27;S00001&#x27;</span>,<span class="string">&#x27;C3&#x27;</span>,<span class="number">84</span>),</span><br><span class="line">(<span class="string">&#x27;S00002&#x27;</span>,<span class="string">&#x27;C1&#x27;</span>,<span class="number">80</span>),</span><br><span class="line">(<span class="string">&#x27;S00002&#x27;</span>,<span class="string">&#x27;C2&#x27;</span>,<span class="number">85</span>),</span><br><span class="line">(<span class="string">&#x27;S00003&#x27;</span>,<span class="string">&#x27;C1&#x27;</span>,<span class="number">78</span>),</span><br><span class="line">(<span class="string">&#x27;S00003&#x27;</span>,<span class="string">&#x27;C3&#x27;</span>,<span class="number">70</span>);</span><br></pre></td></tr></table></figure><h5 id="25-用-SELECT-语句，查询计算机学院学生的学号和姓名"><a href="#25-用-SELECT-语句，查询计算机学院学生的学号和姓名" class="headerlink" title="25.用 SELECT 语句，查询计算机学院学生的学号和姓名"></a>25.用 SELECT 语句，查询计算机学院学生的学号和姓名</h5><h6 id="题解：-21"><a href="#题解：-21" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNO,Name <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> College <span class="operator">=</span> <span class="string">&#x27;计算机学院&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="26-用-SELECT-语句的-between…and…表示查询条件，查询年龄在-20-23-岁的学生信息"><a href="#26-用-SELECT-语句的-between…and…表示查询条件，查询年龄在-20-23-岁的学生信息" class="headerlink" title="26.用 SELECT 语句的 between…and…表示查询条件，查询年龄在 20~23 岁的学生信息"></a>26.用 SELECT 语句的 between…and…表示查询条件，查询年龄在 20~23 岁的学生信息</h5><h6 id="题解：-22"><a href="#题解：-22" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure><h5 id="27-用-SELECT-语句的-COUNT-聚集函数，统计-Student-表中学生总人数"><a href="#27-用-SELECT-语句的-COUNT-聚集函数，统计-Student-表中学生总人数" class="headerlink" title="27.用 SELECT 语句的 COUNT()聚集函数，统计 Student 表中学生总人数"></a>27.用 SELECT 语句的 COUNT()聚集函数，统计 Student 表中学生总人数</h5><h6 id="题解：-23"><a href="#题解：-23" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(Name) <span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><h5 id="28-分别用-SELECT-语句的-max-、min-、sum-、avg-四个聚集函数，计算Choose-表中-C1-课程的最高分、最低分、总分、平均分"><a href="#28-分别用-SELECT-语句的-max-、min-、sum-、avg-四个聚集函数，计算Choose-表中-C1-课程的最高分、最低分、总分、平均分" class="headerlink" title="28.分别用 SELECT 语句的 max()、min()、sum()、avg()四个聚集函数，计算Choose 表中 C1 课程的最高分、最低分、总分、平均分"></a>28.分别用 SELECT 语句的 max()、min()、sum()、avg()四个聚集函数，计算Choose 表中 C1 课程的最高分、最低分、总分、平均分</h5><h6 id="题解：-24"><a href="#题解：-24" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Score),<span class="built_in">MIN</span>(Score),<span class="built_in">SUM</span>(Score),<span class="built_in">AVG</span>(Score) <span class="keyword">FROM</span> Choose;</span><br></pre></td></tr></table></figure><h5 id="29-用-SELECT-语句对空值-NULL-的判断条件，查询-Course-表中先修课称编号为空值的课程编号和课程名称"><a href="#29-用-SELECT-语句对空值-NULL-的判断条件，查询-Course-表中先修课称编号为空值的课程编号和课程名称" class="headerlink" title="29.用 SELECT 语句对空值(NULL)的判断条件，查询 Course 表中先修课称编号为空值的课程编号和课程名称"></a>29.用 SELECT 语句对空值(NULL)的判断条件，查询 Course 表中先修课称编号为空值的课程编号和课程名称</h5><h6 id="题解：-25"><a href="#题解：-25" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CouserID,CouserName <span class="keyword">FROM</span> Course <span class="keyword">WHERE</span> CouserBeforeID <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h5 id="30-用-SELECT-语句的连接查询，查询学生的学号、姓名、选修的课程名及成绩"><a href="#30-用-SELECT-语句的连接查询，查询学生的学号、姓名、选修的课程名及成绩" class="headerlink" title="30.用 SELECT 语句的连接查询，查询学生的学号、姓名、选修的课程名及成绩"></a>30.用 SELECT 语句的连接查询，查询学生的学号、姓名、选修的课程名及成绩</h5><h6 id="题解：-26"><a href="#题解：-26" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.SNO, Student.Name, Choose.CourseID,choose.Score</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">JOIN</span> Choose <span class="keyword">ON</span> Student.SNO <span class="operator">=</span> Choose.SNO;</span><br></pre></td></tr></table></figure><h5 id="31-用-SELECT-的存在量词-EXISTS，查询与“张三”在同一个学院学习的学生信息"><a href="#31-用-SELECT-的存在量词-EXISTS，查询与“张三”在同一个学院学习的学生信息" class="headerlink" title="31.用 SELECT 的存在量词 EXISTS，查询与“张三”在同一个学院学习的学生信息"></a>31.用 SELECT 的存在量词 EXISTS，查询与“张三”在同一个学院学习的学生信息</h5><h6 id="题解：-27"><a href="#题解：-27" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">as</span> s <span class="keyword">WHERE</span> s.College <span class="operator">=</span> student.college <span class="keyword">AND</span> s.name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="32-用-SELECT-语句的嵌套查询，查询选修-C1-课程的成绩低于“张三”的学生的学号和成绩"><a href="#32-用-SELECT-语句的嵌套查询，查询选修-C1-课程的成绩低于“张三”的学生的学号和成绩" class="headerlink" title="32.用 SELECT 语句的嵌套查询，查询选修 C1 课程的成绩低于“张三”的学生的学号和成绩"></a>32.用 SELECT 语句的嵌套查询，查询选修 C1 课程的成绩低于“张三”的学生的学号和成绩</h5><h6 id="题解：-28"><a href="#题解：-28" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNO, Score</span><br><span class="line"><span class="keyword">FROM</span> Choose</span><br><span class="line"><span class="keyword">WHERE</span> CourseID <span class="operator">=</span> <span class="string">&#x27;C1&#x27;</span> <span class="keyword">AND</span> Score <span class="operator">&lt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> Score</span><br><span class="line">    <span class="keyword">FROM</span> Choose</span><br><span class="line">    <span class="keyword">WHERE</span> CourseID <span class="operator">=</span> <span class="string">&#x27;C1&#x27;</span> <span class="keyword">AND</span> SNO <span class="operator">=</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> SNO</span><br><span class="line">        <span class="keyword">FROM</span> Student</span><br><span class="line">        <span class="keyword">WHERE</span> Name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="33-用-SELECT-语句的组合查询-UNION-，查询选修了-C1-课程或者选修了-C3课程的学生学号"><a href="#33-用-SELECT-语句的组合查询-UNION-，查询选修了-C1-课程或者选修了-C3课程的学生学号" class="headerlink" title="33.用 SELECT 语句的组合查询(UNION)，查询选修了 C1 课程或者选修了 C3课程的学生学号"></a>33.用 SELECT 语句的组合查询(UNION)，查询选修了 C1 课程或者选修了 C3课程的学生学号</h5><h6 id="题解：-29"><a href="#题解：-29" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNO <span class="keyword">FROM</span> Choose <span class="keyword">WHERE</span> choose.CourseID <span class="operator">=</span> <span class="string">&#x27;C1&#x27;</span> </span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> SNO <span class="keyword">FROM</span> choose <span class="keyword">WHERE</span> choose.CourseID <span class="operator">=</span> <span class="string">&#x27;C3&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="34-用-SELECT-语句的组合查询-UNION-与-DISTINCT-短语，查询选修了-C1-课程或者选修了-C3-课程的学生学号，并取消重复的数据"><a href="#34-用-SELECT-语句的组合查询-UNION-与-DISTINCT-短语，查询选修了-C1-课程或者选修了-C3-课程的学生学号，并取消重复的数据" class="headerlink" title="34.用 SELECT 语句的组合查询(UNION)与 DISTINCT 短语，查询选修了 C1 课程或者选修了 C3 课程的学生学号，并取消重复的数据"></a>34.用 SELECT 语句的组合查询(UNION)与 DISTINCT 短语，查询选修了 C1 课程或者选修了 C3 课程的学生学号，并取消重复的数据</h5><h6 id="题解：-30"><a href="#题解：-30" class="headerlink" title="题解："></a>题解：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNO <span class="keyword">FROM</span> Choose <span class="keyword">WHERE</span> choose.CourseID <span class="operator">=</span> <span class="string">&#x27;C1&#x27;</span> </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">DISTINCT</span></span><br><span class="line"><span class="keyword">SELECT</span> SNO <span class="keyword">FROM</span> choose <span class="keyword">WHERE</span> choose.CourseID <span class="operator">=</span> <span class="string">&#x27;C3&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程（C++)</title>
      <link href="/2024/01/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2024/01/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程（C"><a href="#多线程（C" class="headerlink" title="多线程（C++)"></a>多线程（C++)</h1><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h5 id="项目核心应用技术"><a href="#项目核心应用技术" class="headerlink" title="项目核心应用技术"></a>项目核心应用技术</h5><ul><li>数据库编程</li><li>网络编程</li><li>多线程编程</li></ul><p><strong>并发，进程，线程基本概念</strong></p><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><ul><li>两个或多个独立活动同时进行</li></ul><p>注：</p><ul><li><p>并发假象：过去电脑采用<strong>单核</strong>通过上下文的模式实现并发（就是利用极短暂的时间差，实际上这多个活动是分开进行的，造成一种同时进行的假象）</p></li><li><p>现在通过电脑<strong>多核</strong>实现真正的并发</p></li></ul><h5 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h5><h6 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h6><ul><li>计算机中程序关于某一个数据集合上的一次运行活动（exe的运行状态）</li></ul><p>每一个进程都有一个主线程。在任务管理器中所看到的程序都是进程（执行的exe，运行中的）</p><p><strong>例如</strong>：我们在vs编译器中ctr+f5，运行程序的这个过程，其本质上就是主线程调用main函数的代码</p><h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><h6 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h6><ul><li>代码的运行通道</li></ul><h5 id="并发实现"><a href="#并发实现" class="headerlink" title="并发实现"></a>并发实现</h5><ul><li><p>多进程实现并发</p><ul><li>一台电脑上面，管道，文件，消息队列，内存共享</li><li>SOCKET网络通信实现</li></ul></li><li><p>单个进程，多个线程（一个主线程，多个子线程）</p><h5 id="线程多种创建方式"><a href="#线程多种创建方式" class="headerlink" title="线程多种创建方式"></a>线程多种创建方式</h5><h6 id="线程普通函数创建"><a href="#线程普通函数创建" class="headerlink" title="线程普通函数创建"></a>线程普通函数创建</h6></li><li><p>C++多线程库</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>创建线程对象（用thread类去创建一个线程对象）</p><ul><li>创建线程不作处理，就会调用abort终止程序</li></ul></li><li><p>处理函数</p><ul><li><p>join()函数：汇合线程，阻塞主线程（让主线程等待子线程执行结束，才执行主线程）</p></li><li><p>detach()函数：分离，打破依赖关系，把子线程编程驻留后台（此时控制台不会有线程输出）</p><p>一个线程只能被处理一次，如果我们join就不能detach，反之一样</p></li><li><p>joinable判断当前线程是否可以被detach或者join，可以返回true，不可以返回false</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello Thread!!!\n&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">test</span><span class="params">(print)</span></span>;    <span class="comment">//创建线程：利用普通函数去创建线程</span></span><br><span class="line"><span class="comment">//test.join();         //让主程序等待子程序执行完毕</span></span><br><span class="line">test.<span class="built_in">detach</span>();         <span class="comment">//让子程序在后台运行，如果想要让我们的内容显示，此时我们可以选择利用sleeo函数让主程序停止</span></span><br><span class="line"><span class="comment">//joinable()函数判断线程是否已经被执行</span></span><br><span class="line"><span class="keyword">if</span> (test.<span class="built_in">joinable</span>())&#123;</span><br><span class="line">test.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前线程已被处理&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!!!\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="其他多线程创建"><a href="#其他多线程创建" class="headerlink" title="其他多线程创建"></a>其他多线程创建</h6><ul><li><p>通过类和对象创建线程</p><ul><li><p>仿函数：类的对象模仿函数的行为本质就是重载括号运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="comment">//operator()是函数名</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子线程启动...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*//仿函数调用</span></span><br><span class="line"><span class="comment">F f;</span></span><br><span class="line"><span class="comment">//1.调用函数的方式实现仿函数调用</span></span><br><span class="line"><span class="comment">f.operator()();</span></span><br><span class="line"><span class="comment">//2.重载</span></span><br><span class="line"><span class="comment">f();//也会调用重载函数</span></span><br><span class="line"><span class="comment">//3.创建无名对象直接调用仿函数 </span></span><br><span class="line"><span class="comment">F&#123;&#125;();*/</span></span><br><span class="line">F f;</span><br><span class="line"><span class="function">thread <span class="title">test</span><span class="params">(f)</span></span>;</span><br><span class="line">test.<span class="built_in">join</span>();</span><br><span class="line"><span class="function">thread <span class="title">test2</span><span class="params">((F()))</span></span>;</span><br><span class="line">test<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;主线程...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Lambda表达式的方式创建线程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Lambda:返回的是一个函数指针（并且当前函数的定义也一并完成）</span></span><br><span class="line"><span class="comment">//[]()mutable trow-&gt;返回值类型&#123;函数体;&#125;;</span></span><br><span class="line"><span class="comment">//[this]this指针</span></span><br><span class="line"><span class="comment">//[=]值的方式</span></span><br><span class="line"><span class="comment">//[&amp;]引用的方式</span></span><br><span class="line"><span class="comment">//[&amp;a,=];组合方式捕获</span></span><br><span class="line"><span class="comment">//用函数指针获取返回值</span></span><br><span class="line"><span class="comment">//int (*pfunc)(int,int) = [](int a, int b)mutable throw()-&gt;int &#123; return a &gt; b ? a : b; &#125;;</span></span><br><span class="line"><span class="comment">//可以直接用auto函数去推导函数类型</span></span><br><span class="line"><span class="keyword">auto</span> pFunc = [](<span class="type">int</span> a,<span class="type">int</span> b)<span class="keyword">mutable</span> <span class="built_in">throw</span>()-&gt;<span class="type">int</span> &#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;;</span><br><span class="line">cout&lt;&lt;<span class="built_in">pFunc</span>(<span class="number">1</span>, <span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line"><span class="comment">//函数定义和调用写一起</span></span><br><span class="line">cout &lt;&lt; [](<span class="type">int</span> a, <span class="type">int</span> b)<span class="function"><span class="keyword">mutable</span> <span class="title">throw</span><span class="params">()</span>-&gt;<span class="type">int</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; [](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"><span class="function">thread <span class="title">test</span><span class="params">([] &#123;cout &lt;&lt; <span class="string">&quot;子线程...&quot;</span> &lt;&lt; endl; &#125;)</span></span>;</span><br><span class="line">test.<span class="built_in">join</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;主线程...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>带参的方式创建线程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printData</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">num++;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子线程：&quot;</span>&lt;&lt;num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printData1</span><span class="params">(<span class="type">int</span>&amp; num)</span> </span>&#123;</span><br><span class="line">num++;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子线程：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="function">thread <span class="title">test</span><span class="params">(printData,num)</span></span>;</span><br><span class="line">test.<span class="built_in">join</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;主线程结束...&quot;</span> &lt;&lt;num&lt;&lt; endl;</span><br><span class="line"><span class="comment">//当我们传参的时候遇到&amp;&amp; a这种情况我们只能往里面传入常量，而我们的thread所构造的内容也只能传常量</span></span><br><span class="line"><span class="function">thread <span class="title">test2</span><span class="params">(printData1,ref(value))</span></span>;</span><br><span class="line">test<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;主线程结束&quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>带智能指针的方式创建线程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(unique_ptr&lt;<span class="type">int</span>&gt; ptr)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子线程&quot;</span> &lt;&lt; ptr.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt; this_thread::<span class="built_in">get_id</span>() &lt;&lt; endl;<span class="comment">//获取当前线程id</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//智能指针，自动管理申请内存，不需要手动释放内存</span></span><br><span class="line"><span class="comment">//获取值：get()函数 </span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">100</span>))</span></span>;<span class="comment">//new一个对象然后用智能指针去管理这个对象</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;访问数据：&quot;</span> &lt;&lt; *ptr.<span class="built_in">get</span>()&lt;&lt; endl;<span class="comment">//去掉星号是获取地址，有星号是获取值</span></span><br><span class="line"><span class="function">thread <span class="title">test</span><span class="params">(print, move(ptr))</span></span>;<span class="comment">//移动语义，将外部的ptr移动到我们的print函数中，外部的ptr无效</span></span><br><span class="line">test.<span class="built_in">join</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;主线程id:&quot;</span> &lt;&lt; this_thread::<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;访问数据：&quot;</span> &lt;&lt; ptr.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过类的成员函数创建线程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span>&amp; num)</span> </span>&#123;</span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子线程：&quot;</span> &lt;&lt; this_thread::<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123; </span><br><span class="line">F f;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1001</span>;</span><br><span class="line"><span class="comment">//用类的成员函数成为线程处理函数的时候，一定要先告诉别人是那个对象的成员函数</span></span><br><span class="line"><span class="function">thread <span class="title">test</span><span class="params">(&amp;F::print, f, ref(num))</span></span>;<span class="comment">//指定对象f</span></span><br><span class="line">test.<span class="built_in">join</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;主线程：&quot;</span> &lt;&lt; this_thread::<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程并发API调用"><a href="#线程并发API调用" class="headerlink" title="线程并发API调用"></a>线程并发API调用</h1><h5 id="临界数据脏"><a href="#临界数据脏" class="headerlink" title="临界数据脏"></a>临界数据脏</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//此时由于两个线程共享同一个数据，所以我们会出现数据的错误，临界数据脏</span></span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">HANDLE h1 = CreateThread(<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,(LPTHREAD_START_ROUTINE)f1,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">HANDLE h1 = CreateThread(<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,(LPTHREAD_START_ROUTINE)f1,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线程结束\n&quot;</span>);</span><br><span class="line"><span class="comment">//等待线程执行完毕</span></span><br><span class="line">WaitForSingleObject(h1,INFINITE);</span><br><span class="line">WaitForSingleObject(h2,INFINI</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n:%d\n&quot;</span>,n);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多个线程引用同一个数据，这种数据叫做临界数据</strong></p><p>多线程并发会引发<strong>临界数据脏</strong></p><h5 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h5><ul><li><p>原子锁</p><p>保证操作具有原子特性（不可分割）</p></li></ul></li></ul></li></ul></li></ul><h1 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = <span class="number">21</span></span><br><span class="line">res = [<span class="number">0x66</span>,<span class="number">0x3f</span>,<span class="number">0x44</span>,<span class="number">0x3a</span>,<span class="number">0x66</span>,<span class="number">0x2d</span>,<span class="number">0x7a</span>,<span class="number">0x5d</span>,<span class="number">0x66</span>,</span><br><span class="line">        <span class="number">0x43</span>,<span class="number">0x23</span>,<span class="number">0x3e</span>,<span class="number">0x69</span>,<span class="number">0x3c</span>,<span class="number">0x65</span>,<span class="number">0x12</span>,<span class="number">0x54</span>,<span class="number">0x58</span>,<span class="number">0x53</span>,<span class="number">0x10</span>,<span class="number">0x54</span>,<span class="number">0x40</span>,</span><br><span class="line">        <span class="number">0x72</span>,<span class="number">0x29</span>,<span class="number">0x6a</span>,<span class="number">0x40</span>,<span class="number">0x62</span>,<span class="number">0x2d</span>,<span class="number">0x54</span>,<span class="number">0x16</span>,<span class="number">0x54</span>,<span class="number">0x16</span>,<span class="number">0x26</span>,<span class="number">0x4f</span>,<span class="number">0x4b</span>,</span><br><span class="line">        <span class="number">0x14</span>,<span class="number">0x2a</span>,<span class="number">0x2f</span>,<span class="number">0x3d</span>,<span class="number">0x45</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 解密偶数位</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(res)-<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">48</span> &lt;= res[i] &lt;= <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">65</span> &lt;=  res[i] &lt;= <span class="number">90</span>:</span><br><span class="line">            res[i] += <span class="number">32</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[i] = res[i]</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">46</span>&gt;res[i] &gt;= <span class="number">33</span>:</span><br><span class="line">        res[i] = res[i] + <span class="number">15</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res[i] -= <span class="number">32</span></span><br><span class="line"><span class="comment"># 解密奇数位</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res), <span class="number">2</span>):</span><br><span class="line">    res[i] ^= <span class="number">0x72</span></span><br><span class="line">    res[i] += <span class="number">0x6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(res[i])</span><br><span class="line"><span class="comment">#print(flag)</span></span><br><span class="line"><span class="comment"># FSdNFeZ5F72RITEft0sht8RaJ8Betjtj5Ckl9c==</span></span><br><span class="line"><span class="comment"># 创建新的base64编码表</span></span><br><span class="line">base64_table = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>]</span><br><span class="line">base64_t = <span class="string">&#x27;&#x27;</span>.join(base64_table)</span><br><span class="line"><span class="comment"># 按照指定算法调整新的base64编码表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(base64_table) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    j = (i * key) % (i + <span class="number">1</span>)</span><br><span class="line">    temp = base64_table[i]</span><br><span class="line">    base64_table[i] = base64_table[j]</span><br><span class="line">    base64_table[j] = temp</span><br><span class="line"><span class="comment"># 将字符列表转换为字符串，然后再进行编码</span></span><br><span class="line">new_base64_table = <span class="string">&#x27;&#x27;</span>.join(base64_table)</span><br><span class="line">decoded_flag = base64.b64decode(flag.translate(flag.maketrans(new_base64_table,base64_t ))).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#print(decoded_flag)</span></span><br><span class="line"><span class="comment"># flag+Re2erv30150inter3s7In9+</span></span><br><span class="line">decode = decoded_flag.replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="number">1</span>).replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="number">1</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(decode)</span><br><span class="line"><span class="comment">#flag&#123;Re2erv3_15_inter3s7In9&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 寒假考核 </tag>
            
            <tag> 2024 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>市赛</title>
      <link href="/2023/11/02/%E5%B8%82%E8%B5%9B/"/>
      <url>/2023/11/02/%E5%B8%82%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="市赛"><a href="#市赛" class="headerlink" title="市赛"></a>市赛</h1><h2 id="ezProcess"><a href="#ezProcess" class="headerlink" title="ezProcess"></a>ezProcess</h2><p>用ida打开进程执行这个pe文件，</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/21722956-4286-4389-80fb-0b3e65438439" alt=""></p><p>此处可以通过动态调试得到我们的source字符串的值</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/c9006cb6-ad7f-4d95-bdf2-c3f50c61fe5b" alt=""></p><p>此外lpbuffer的值也能知道，这个值就是我们存储这个程序的路径。因此我们查看我们的子进程</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/b9f176d2-6a72-4e9c-9c69-e42ae755af85" alt=""></p><p>写解题脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> enflag[] = &#123;<span class="number">0x77</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0x17</span>, <span class="number">0x0B</span>, <span class="number">0x34</span>, <span class="number">0x13</span>, <span class="number">0x69</span>, <span class="number">0x6F</span>, <span class="number">0x21</span>, </span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x45</span>, <span class="number">0x6C</span>, <span class="number">0x3E</span>, <span class="number">0x3D</span>, <span class="number">0x16</span>, <span class="number">0x5A</span>, <span class="number">0x3D</span>, <span class="number">0x30</span>, <span class="number">0x0D</span>, </span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x61</span>, <span class="number">0x30</span>, <span class="number">0x4A</span>, <span class="number">0x70</span>, <span class="number">0x1F</span>, <span class="number">0x52</span>, <span class="number">0x39</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0x2E</span>, <span class="number">0x10</span>&#125;;</span><br><span class="line">    srand(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> XB[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        XB[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> v2;</span><br><span class="line">    <span class="type">int</span> v4;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v2 = rand();</span><br><span class="line">        v4 = v2%<span class="number">32</span>;</span><br><span class="line">        <span class="type">int</span> temp = XB[i];</span><br><span class="line">        XB[i] = XB[v4];</span><br><span class="line">        XB[v4] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> key[] = <span class="string">&quot;DASCTF&#123;Y0u&#x27;v3_be3n_tr1ck3d!&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        enflag[i] ^= key[i%<span class="built_in">strlen</span>(key)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,enflag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">32</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(XB[j] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,enflag[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag：<strong>DASCTF{Th3_Proc3ss_iS_S0_Easy!!}</strong></p><h2 id="re5-p"><a href="#re5-p" class="headerlink" title="re5_p"></a>re5_p</h2><p>这道题被加壳了，但是如何完全将壳脱去，不能确定。</p><p>用xdbg打开，这个程序有反调试功能，需要安装ScyllaHide插件。</p><p>我们直接F9运行到输入flag的位置，然后通过在此处进行字符串搜索直接跳转到函数oep位置。并在这个位置，dump程序。（Scylla插件），这个dump需要运行到oep这里才能够成功从oep进行dump，直接在输入哪里乱写跳转即可，记得在搜索字符串后oep那边输入后的位置下一个断点。</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/ee56b3f7-a054-457b-863e-4a1dc69477d6" style="zoom:50%;" /></p><p>如果打开的话dump的应该是401877这个位置，所以我们要改为main函数入口位置push ebp</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/d557c1fa-abe9-4e1a-a95f-f1c5fc762cc1" style="zoom:67%;" /></p><p>dump后看源码</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/986f4efd-c0a0-454d-b21b-b975c4c0f27f" style="zoom:67%;" /></p><p>判断函数</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/799871db-3691-4168-8a3b-916cf772d669" style="zoom:50%;" /></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/29c6e6a8-428e-4e60-8f8b-9378aba18c6d" style="zoom:50%;" /></p><p>z3求解约束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a1 = [Int(<span class="string">f&#x27;a1[<span class="subst">&#123;i&#125;</span>]&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>)]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(a1[<span class="number">7</span>] + a1[<span class="number">8</span>] == <span class="number">179</span>)</span><br><span class="line">s.add(a1[<span class="number">8</span>] + a1[<span class="number">9</span>] == <span class="number">199</span>)</span><br><span class="line">s.add(a1[<span class="number">9</span>] + a1[<span class="number">10</span>] == <span class="number">211</span>)</span><br><span class="line">s.add(a1[<span class="number">10</span>] + a1[<span class="number">11</span>] == <span class="number">138</span>)</span><br><span class="line">s.add(a1[<span class="number">11</span>] + a1[<span class="number">12</span>] == <span class="number">164</span>)</span><br><span class="line">s.add(a1[<span class="number">12</span>] + a1[<span class="number">13</span>] == <span class="number">180</span>)</span><br><span class="line">s.add(a1[<span class="number">13</span>] + a1[<span class="number">14</span>] == <span class="number">117</span>)</span><br><span class="line">s.add(a1[<span class="number">14</span>] + a1[<span class="number">15</span>] == <span class="number">135</span>)</span><br><span class="line">s.add(a1[<span class="number">15</span>] + a1[<span class="number">16</span>] == <span class="number">169</span>)</span><br><span class="line">s.add(a1[<span class="number">16</span>] + a1[<span class="number">17</span>] == <span class="number">167</span>)</span><br><span class="line">s.add(a1[<span class="number">17</span>] + a1[<span class="number">18</span>] == <span class="number">196</span>)</span><br><span class="line">s.add(a1[<span class="number">18</span>] + a1[<span class="number">19</span>] == <span class="number">167</span>)</span><br><span class="line">s.add(a1[<span class="number">19</span>] + a1[<span class="number">20</span>] == <span class="number">101</span>)</span><br><span class="line">s.add(a1[<span class="number">20</span>] + a1[<span class="number">21</span>] == <span class="number">147</span>)</span><br><span class="line">s.add(a1[<span class="number">21</span>] + a1[<span class="number">22</span>] == <span class="number">220</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">23</span>):</span><br><span class="line">    v1 = And(a1[i] &gt; <span class="number">47</span>, a1[i] &lt;= <span class="number">57</span>)</span><br><span class="line">    v2 = And(a1[i] &gt; <span class="number">64</span>, a1[i] &lt;= <span class="number">90</span>)</span><br><span class="line">    v3 = And(a1[i] &gt; <span class="number">96</span>, a1[i] &lt;= <span class="number">122</span>)</span><br><span class="line">    s.add(Or(v1, v2, v3))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">23</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">chr</span>(m[a1[i]].as_long())), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag：<strong>DASCTF{fMzY1sA4SVQs41bz}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>萌新赛</title>
      <link href="/2023/11/01/%E8%90%8C%E6%96%B0%E8%B5%9B/"/>
      <url>/2023/11/01/%E8%90%8C%E6%96%B0%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="萌新赛"><a href="#萌新赛" class="headerlink" title="萌新赛"></a>萌新赛</h1><h2 id="EasyRE"><a href="#EasyRE" class="headerlink" title="EasyRE"></a>EasyRE</h2><h5 id="考点：MFC逆向"><a href="#考点：MFC逆向" class="headerlink" title="考点：MFC逆向"></a>考点：MFC逆向</h5><h5 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h5><p>DIE查看发现是mfc程序</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/bfd55989-fb7d-469d-a622-f06ed0133cb0" style="zoom:50%;" /></p><h6 id="两种解题方法"><a href="#两种解题方法" class="headerlink" title="两种解题方法"></a><strong>两种解题方法</strong></h6><p><strong>1.patch</strong></p><p>利用xspy直接在ida中找到关键函数部分</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/0c526c89-d1b5-4c64-a91a-7a10d84a3127" alt=""></p><p>3a90看样子应该是一个提示信息，没啥用</p><p>直接找到函数sub_140003470</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/6e5216fe-ec83-43fb-91d2-556578cbbc7d" alt=""></p><p>可以看到本题的关键在与我们v11，v12赋值为else执行后的内容，所以我们修改汇编指令，让其错误时直接跳转到我们的else语句，而不是if后</p><p>我们直接在dbg中修改该处的汇编指令（ida中修改后好像没用），我们用dbg打开后直接运行，然后字符串寻找到congratulation这句，</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/5ac6841d-d7ee-47e1-9589-5dcdb7846553" alt=""></p><p>修改jne easyre.7FF6373D3743为jne jne easyre.7FF6373D36E4</p><p>修复文件后可以直接得到flag，这里还是要看一下输入的要求，有判断输入长度。</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/9ccadc10-b5e5-4b07-9ac6-01f02f5b6a32" style="zoom:50%;" /></p><p>flag：<strong>Redrock{w31c0m3_70_r3dr0ck}</strong></p><p><strong>2.动调</strong></p><p><strong>依旧不知道怎么找到密码和账户</strong></p><p>但依旧可以动调，我们直接运行程序，然后在弹出窗口之后我们通过字符串搜索找到关键函数，进入这个部分，在这个函数的开始位置就是<strong>mov rax，rsp</strong>下一个断点，然后随意输入一个账号密码进入（账号长度有要求），整个程序呢有一个大的判断位置，目前不知道到底有什么用处（动调后没看出什么）。我们在这里下一个断点，<img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/49ae7df0-4e92-4225-aff5-4a68f79c04f1" alt=""> </p><p>这个断点其实也可以直接下到jne那里，主要是想看一下这个函数的作用，想找到账户密码，但是没发现实际用处，然后我们F8运行到jne位置，我们直接在jne的下一条指令设置eip运行到此处，其实有点类似于上文中的patch的手段吧，然后一直运行，直到程序开始一直循环，flag就出来了。其实也不需要等到这个时候，可以把程序放到dbg旁边，F8运行一会儿就会出来的。</p><h2 id="Oceaner的怜悯-Oceaner的仁慈"><a href="#Oceaner的怜悯-Oceaner的仁慈" class="headerlink" title="Oceaner的怜悯/Oceaner的仁慈"></a>Oceaner的怜悯/Oceaner的仁慈</h2><p>略</p><h2 id="native-jvav"><a href="#native-jvav" class="headerlink" title="native jvav"></a>native jvav</h2><p>jadx打开之后，可以查看myjni源码。大致含义就是我们输入一个值，然后放到一个HelloJNI的函数中进行check，这个函数来自于一个为myjni的库。所以我们直接解压得到的jar包，然后将myjni.dll直接放ida打开。</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/c4210af9-4fca-41b3-935f-d59e38c63f11" alt=""></p><p>搜索我们的HelloJNI函数，F5打开，这里存在一个问题就是，32.dll和64.dll打开这个函数是不同的。区别在于64.dll开启了xmm优化。</p><p><strong>32.dll</strong></p><p>直接打开这个函数</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/69981878-9e9c-44d5-a847-e837f8062fa9" alt=""></p><p>v9被赋值，然后进行了一个对比，可知我们flag为redrock{n@tive!nat1ve!nativ5!}</p><p><strong>64.dll</strong></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/38cb8391-5655-4b80-9393-37d22c23d1f4" alt=""></p><p>可见64位有所不同，此时只出现了flag的一部分，并且看不出什么逻辑，但是呢其实v10被赋值为了一个看起来可读的字符，然后后面又把什么v5赋值为了si128相关的某个地址，同时之后进行循环比较，比的呢是v4和v6，v4又和v5有关系，此时我们可以合理怀疑si128中隐藏着flag的部分数据，查看xmmword_1800167F0,</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/6580966b-5c48-43b1-9235-8d484888ab01" alt=""></p><p>是一串数字，我们可以尝试将其转换为字符，我们直接点击‘U’，取消该处的定义，再按‘A’，直接获取该处字符串“n@tive!nat1ve!na@”，两处拼接获取flag：redrock{n@tive!nat1ve!na@tiv5!}</p><p>flag：<strong>redrock{n@tive!nat1ve!na@tiv5!}</strong></p><h3 id="Do-you-like-Jiaran？"><a href="#Do-you-like-Jiaran？" class="headerlink" title="Do you like Jiaran？"></a>Do you like Jiaran？</h3><h6 id="两种解法"><a href="#两种解法" class="headerlink" title="两种解法"></a>两种解法</h6><p><strong>1.frida hook</strong></p><p><strong>2.静态分析</strong></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/0a9f4e7e-201c-4548-8a34-4375d83cb9df" alt=""></p><p>直接导出函数a~b，编写main直接输出a.b(b.a())</p><p>flag:<strong>redrock{5ea76e34-c093-4b45-8dfe-47038a1900e1}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脱壳题目</title>
      <link href="/2023/10/29/%E8%84%B1%E5%A3%B3%E9%A2%98%E7%9B%AE/"/>
      <url>/2023/10/29/%E8%84%B1%E5%A3%B3%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="脱壳相关题目"><a href="#脱壳相关题目" class="headerlink" title="脱壳相关题目"></a>脱壳相关题目</h1><h3 id="buu-HDCTF2019-maze（ESP定律）"><a href="#buu-HDCTF2019-maze（ESP定律）" class="headerlink" title="buu_[HDCTF2019]maze（ESP定律）"></a>buu_[HDCTF2019]maze（ESP定律）</h3><p><img src="https://user-images.githubusercontent.com/116374553/225170230-c22035f8-0400-4415-8b38-875ea1808d08.png" alt=""></p><p>将程序放入Die中发现，程序是32位的PE文件，并且被UPX进行了加壳</p><p>用OD打开程序，单步一次F8，发现只有ESP寄存器发生变化，即可使用ESP定律</p><p><img src="https://user-images.githubusercontent.com/116374553/225170506-5d63be20-2902-4333-ab05-9ec0260d145d.png" alt=""></p><p>先右键点击寄存器窗口中的ESP，选择数据窗口中跟随，在数据窗口中下一个硬件访问的四字节断点。F9再次运行，进入下面图片中的位置</p><p><img src="https://user-images.githubusercontent.com/116374553/225171218-aefd3bfd-b080-4fd8-a24a-bc409dd1914a.png" alt=""></p><p>F4运行到jmp处，F8跳转进入OEP</p><p><img src="https://user-images.githubusercontent.com/116374553/225171626-39560cd2-3585-4187-95e8-c18ce6d82750.png" alt=""></p><p>利用OD插件OllyDump进行脱壳</p><p><img src="https://user-images.githubusercontent.com/116374553/225955353-b2a9f338-c172-49cc-b564-297301c6b36c.png" alt=""></p><p>再次用IDA打开程序，发现脱壳成功</p><p>在IDA中发现，main函数中存在花指令，导致程序无法进行反汇编</p><p><img src="https://user-images.githubusercontent.com/116374553/225172004-86e87728-de82-4544-940c-c0bd3ac58741.png" alt=""></p><p>将call指令处的E8变为90，重新创建函数，即可除去花指令</p><p><img src="https://user-images.githubusercontent.com/116374553/225172447-4fceaa3b-6851-474e-9795-80f5f4aa2d3c.png" alt=""></p><p>查看字符串发现一堆星号和空格，再结合main函数中一个大的循环，然后四个分支结构，可判断是一道迷宫问题。分析迷宫字符串，根据猜测可以得出，‘+’为入口，‘*’为墙，‘ ’为通路，‘F’为出口。最终根据+的四周必有一个地方为空格和空格周围也一定有空格的原则绘出地图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*******+**</span><br><span class="line">******* **</span><br><span class="line">****    **</span><br><span class="line">**   *****</span><br><span class="line">** **F****</span><br><span class="line">**    ****</span><br><span class="line">**********</span><br></pre></td></tr></table></figure><p>由于最终的if判断处asc_408078为5即字符v5中一定出现了5个d，同样v5中一定出现了4个s，再根据自主定义的方向，利用自动走迷宫程序（在  迷宫问题——迷宫问题（2）中），最终分析得出‘a’为左，‘d’为右，‘s’为下，‘w’为上</p><p>得到flag{ssaaasaassdddw}</p><h3 id="buu-新年快乐（单步跟踪法）"><a href="#buu-新年快乐（单步跟踪法）" class="headerlink" title="buu_新年快乐（单步跟踪法）"></a>buu_新年快乐（单步跟踪法）</h3><p>用Die发现，程序为32位PE文件，UPX加壳</p><p><img src="https://user-images.githubusercontent.com/116374553/226079452-f2be6f2b-c703-4d1d-ad3d-e6ebea709016.png" alt=""></p><p>利用od打开，发现程序的入口处并不是pushad，则考虑单步跟踪，由于入口点就是一个call指令，则用F7进入call指令，之后依旧遵循不向上跳转的原则，对于call指令，遇到距离调试位置近的可以F7进入，其余均F8跳过。之后程序突然出现了一个跳转指令，它的跳转地址前带上了程序的名称，可以考虑上下查看一下周围的汇编指令，在跳转指令的上方发现popad，并且该条跳转指令的上一条指令是一个大的跳转，这里跳转后的地址应该就是程序oep。记下该条指令的地址0x40E493，然后F8进入发现是一堆重复的指令</p><p><img src="https://user-images.githubusercontent.com/116374553/226078298-ee2b85f3-90b0-4dba-9d2e-05b2c00a8909.png" alt=""></p><p>之后我们Ctr+G回到之前跳转指令的位置，F2下一个断点，再F9运行，之后F8一直运行，直到指令地址再次跳转为0x4开头，可以上下翻动汇编界面，可以发现之前的0x401280地址处的汇编指令已经出现</p><p><img src="https://user-images.githubusercontent.com/116374553/226078583-4f247564-dd65-4ff5-9fb9-3b6e07e089e2.png" alt=""></p><p>在此处进行脱壳</p><p>再次用Die打开脱壳后的程序，发现脱壳成功</p><p><img src="https://user-images.githubusercontent.com/116374553/226079454-93ce01b1-c5dc-4b99-90b2-7c232c9d5b9d.png" alt=""></p><p>用IDA打开程序，查看字符串，发现flag字符，点击进入，了解到该字符出现在函数sub_401C10处，点击进入该函数，并且F5进行返汇编</p><p><img src="https://user-images.githubusercontent.com/116374553/226080234-ace2f1f2-4842-48a3-8e82-62e2452210c7.png" alt=""></p><p>发现输入字符串是在和之前的Str2对比</p><p>则可知输入的字符应该是”HappyNewYear!”</p><p>则flag为flag{HappyNewYear!}</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 脱壳 </tag>
            
            <tag> 逆向题目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autoit</title>
      <link href="/2023/10/21/autoit/"/>
      <url>/2023/10/21/autoit/</url>
      
        <content type="html"><![CDATA[<h1 id="Autoit"><a href="#Autoit" class="headerlink" title="Autoit"></a>Autoit</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>编写并生成具有“BASIC语言风格的脚本”，同时该中程序被支持在所有的win操作系统上运行，不需要加载任何的库。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>脚本可使用脚本编译器Aut2EXe进行编码之后内置于独立的可执行文件，即生成.exe文件（PE文件</p><p>）。同时这种脚本还可以生成.a3x文件，这种文件格式能够更好地保留这种明文脚本的特性，在编译过程，会将我们的源代码编译为二进制形式，从而让人难以阅读，甚至是修改。同时.a3x运行的时候还会进行一些验证和解密的操作，以确保文件的完整性和合法性（因此.a3x文件成为了许多关于autoit恶意脚本文件的主要来源）。</p><p><strong>独立小巧、能够进行窗口管理、控件和GUI</strong></p><p>参考：<a href="https://blog.csdn.net/qq_36253061/article/details/124635362">https://blog.csdn.net/qq_36253061/article/details/124635362</a></p><h6 id="有关于exe-a3x在恶意程序领域的优势-来自chat"><a href="#有关于exe-a3x在恶意程序领域的优势-来自chat" class="headerlink" title="有关于exe/a3x在恶意程序领域的优势(来自chat)"></a>有关于exe/a3x在恶意程序领域的优势(来自chat)</h6><p>对于恶意程序来说，编译为exe文件可能会失去一些在恶意程序领域的优势，主要有以下几个原因：</p><ol><li><p>可被静态分析：编译为exe文件的AutoIt脚本可以被静态分析工具（如反汇编器、调试器等）进行分析和逆向工程。这意味着恶意程序的行为和功能可能会被发现和分析，从而增加了被检测和阻止的风险。</p></li><li><p>容易被检测：由于编译为exe文件的AutoIt脚本可能会使用一些常见的恶意行为和技术，如文件操作、注册表修改、网络通信等，这些行为可能会被安全软件和防病毒引擎检测到，并被标记为潜在的恶意行为。</p></li><li><p>需要外部解释器：编译为exe文件的AutoIt脚本需要依赖AutoIt解释器来执行。这意味着在目标系统上必须安装AutoIt解释器，这可能会引起一些安全软件的警报，因为恶意程序常常会利用外部解释器来执行恶意代码。</p></li></ol><p>相比之下，编译为a3x文件可以提供一些优势，如：</p><ol><li><p>隐藏源代码：编译为a3x文件可以将AutoIt脚本的源代码转换为二进制形式，使其更难以理解和修改。这可以防止他人轻易地查看和修改脚本内容。</p></li><li><p>额外的安全性：a3x文件在运行时会进行一些验证和解密操作，以确保文件的完整性和合法性。这可以防止未经授权的修改或篡改。</p></li></ol><p>需要注意的是，无论是编译为exe文件还是a3x文件，都不能完全保证脚本的安全性。恶意程序的开发者可以采取各种技术和方法来规避检测和分析。因此，在恶意程序领域中，安全性的保障需要综合考虑多个因素和防御措施。</p><p>一篇宏代码利用autoit释放rat的恶意文档攻击：<a href="https://mp.weixin.qq.com/s/T-6yiw_wrXlKWoiHbdp-hA">https://mp.weixin.qq.com/s/T-6yiw_wrXlKWoiHbdp-hA</a></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> Autoit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校赛</title>
      <link href="/2023/10/21/%E6%A0%A1%E8%B5%9B/"/>
      <url>/2023/10/21/%E6%A0%A1%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="所见非所得"><a href="#所见非所得" class="headerlink" title="所见非所得"></a>所见非所得</h2><p>查看py源码，我们可以知道flag的加密经过了四个函数，其中有两个函数是通过已知的函数，然后后重构的函数（此处读取了原来函数的字节进行的重构）。为了准确的获取函数，我重新的读取了行的函数的字节码文件，然后对字节码文件进行比对，来获取新的函数。以loop和pool为例</p><p><strong>loop</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">95           0 LOAD_GLOBAL              0 (range)</span><br><span class="line">             2 LOAD_FAST                1 (b)</span><br><span class="line">             4 LOAD_GLOBAL              1 (len)</span><br><span class="line">             6 LOAD_FAST                0 (a)</span><br><span class="line">             8 CALL_FUNCTION            1</span><br><span class="line">            10 LOAD_FAST                2 (c)</span><br><span class="line">            12 CALL_FUNCTION            3</span><br><span class="line">            14 GET_ITER</span><br><span class="line">       &gt;&gt;   16 FOR_ITER                10 (to 38)</span><br><span class="line">            18 STORE_FAST               4 (i)</span><br><span class="line"></span><br><span class="line">96          20 LOAD_FAST                0 (a)</span><br><span class="line">            22 LOAD_FAST                4 (i)</span><br><span class="line">            24 DUP_TOP_TWO</span><br><span class="line">            26 BINARY_SUBSCR</span><br><span class="line">            28 LOAD_FAST                3 (d)</span><br><span class="line">            30 INPLACE_XOR</span><br><span class="line">            32 ROT_THREE</span><br><span class="line">            34 STORE_SUBSCR</span><br><span class="line">            36 JUMP_ABSOLUTE            8 (to 16)</span><br><span class="line"></span><br><span class="line">97     &gt;&gt;   38 LOAD_FAST                0 (a)</span><br><span class="line">            40 RETURN_VALUE</span><br></pre></td></tr></table></figure><p><strong>pool</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">96           0 LOAD_GLOBAL              0 (range)</span><br><span class="line">             2 LOAD_FAST                1 (c)</span><br><span class="line">             4 LOAD_GLOBAL              1 (len)</span><br><span class="line">             6 LOAD_FAST                0 (d)</span><br><span class="line">             8 CALL_FUNCTION            1</span><br><span class="line">            10 LOAD_FAST                2 (b)</span><br><span class="line">            12 CALL_FUNCTION            3</span><br><span class="line">            14 GET_ITER</span><br><span class="line">       &gt;&gt;   16 FOR_ITER                10 (to 38)</span><br><span class="line">            18 STORE_FAST               4 (i)</span><br><span class="line"></span><br><span class="line">97          20 LOAD_FAST                0 (d)</span><br><span class="line">            22 LOAD_FAST                4 (i)</span><br><span class="line">            24 DUP_TOP_TWO</span><br><span class="line">            26 BINARY_SUBSCR</span><br><span class="line">            28 LOAD_FAST                3 (a)</span><br><span class="line">            30 INPLACE_XOR</span><br><span class="line">            32 ROT_THREE</span><br><span class="line">            34 STORE_SUBSCR</span><br><span class="line">            36 JUMP_ABSOLUTE            8 (to 16)</span><br><span class="line">       &gt;&gt;   38 LOAD_FAST                0 (d)</span><br><span class="line">            40 RETURN_VALUE</span><br></pre></td></tr></table></figure><p>通过对比发现是调换了参数输入的位置，获取正确函数（方法多样，可直接阅读重构过程）</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/b4019718-733d-4d9e-84c6-2bd946011f93" alt=""></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/60c71692-dd56-45ce-88d5-c3a9afc38ba4" alt=""></p><p>t和t_类似，不作过多赘述，直接上代码</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/c8106438-d4c4-4294-95e0-d2267017f8eb" style="zoom: 50%;" /></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/fe9f0a03-2ff9-44fd-9a82-3f62cd1e199f" style="zoom: 50%;" /></p><p>获取正确的加密函数之后，编写解密脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">enc =  [<span class="number">233</span>, <span class="number">195</span>, <span class="number">239</span>, <span class="number">246</span>, <span class="number">152</span>, <span class="number">152</span>, <span class="number">152</span>, <span class="number">245</span>, <span class="number">238</span>, <span class="number">237</span>, <span class="number">152</span>, <span class="number">221</span>, <span class="number">246</span>, <span class="number">155</span>, <span class="number">233</span>, <span class="number">195</span>, <span class="number">239</span>, <span class="number">246</span>, <span class="number">152</span>, <span class="number">152</span>, <span class="number">152</span>, <span class="number">159</span>, <span class="number">238</span>, <span class="number">153</span>, <span class="number">157</span>, <span class="number">237</span>, <span class="number">234</span>, <span class="number">237</span>, <span class="number">224</span>, <span class="number">227</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">2</span>):</span><br><span class="line">    enc[i] ^= <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(enc)):</span><br><span class="line">    enc[i] ^= <span class="number">0xfa</span></span><br><span class="line">    enc[i] -= <span class="number">0xfa</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(enc)):</span><br><span class="line">    enc[i] ^= <span class="number">0xaf</span></span><br><span class="line">    enc[i] += <span class="number">0xaf</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="keyword">if</span> enc[i] == <span class="number">98</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">115</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">98</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">97</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">101</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">63</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">104</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">116</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">105</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">117</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">108</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">49</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">49</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">105</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">115</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">108</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">116</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">118</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">117</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">101</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">118</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">104</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">119</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">95</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">63</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enc[i] == <span class="number">119</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">95</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(enc[i]),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>flag：<strong>0xFA{what_u_see_1s_what_u_believe??}</strong></p><h2 id="luaVM"><a href="#luaVM" class="headerlink" title="luaVM"></a>luaVM</h2><p>用Notepad++,打开.lua源码。这是对源码的一些自定义注解</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chk</span><span class="params">(input)</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>:<span class="built_in">len</span>() ~= <span class="number">8</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;try again&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span>         <span class="comment">--此处要求输入的flag的长度为8</span></span><br><span class="line">    m = <span class="built_in">require</span>(<span class="string">&#x27;GoodLuck&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    code=<span class="string">&#x27;\xf0\xf1\x00\x00\x00\x00&#x27;</span> .. <span class="comment">--字符串拼接,虚拟机指令</span></span><br><span class="line">    <span class="string">&#x27;\xf7\xfA&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x00\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xfc&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x00\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf9&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf3\x00\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf0\xf1\x01\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf7\xfA&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x01\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xfc&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x01\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf9&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf3\x01\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf0\xf1\x02\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf7\xfA&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x02\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xfc&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x02\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf9&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf3\x02\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf0\xf1\x03\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf7\xfA&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x03\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xfc&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x03\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf9&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf3\x03\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf0\xf1\x04\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf7\xfA&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x04\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xfc&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x04\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf9&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf3\x04\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf0\xf1\x05\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf7\xfA&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x05\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xfc&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x05\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf9&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf3\x05\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf0\xf1\x06\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf7\xfA&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x06\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xfc&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x06\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf9&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf3\x06\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf0\xf1\x07\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf7\xfA&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x07\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xfc&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf1\x07\x00\x00\x00&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf9&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf3\x07\x00\x00\x00&#x27;</span> ..      <span class="comment">--这部分指令可以看做是对flag的一些基本操作</span></span><br><span class="line">    <span class="string">&#x27;\xf4\x00\x00\x00\x00\xf4\x0A\x00\x00\x00\xf8&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf4\x01\x00\x00\x00\xf4\x0B\x00\x00\x00\xf8&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf4\x02\x00\x00\x00\xf4\x0C\x00\x00\x00\xf8&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf4\x03\x00\x00\x00\xf4\x0D\x00\x00\x00\xf8&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf4\x04\x00\x00\x00\xf4\x0E\x00\x00\x00\xf8&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf4\x05\x00\x00\x00\xf4\x0F\x00\x00\x00\xf8&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf4\x06\x00\x00\x00\xf4\x10\x00\x00\x00\xf8&#x27;</span> ..</span><br><span class="line">    <span class="string">&#x27;\xf4\x07\x00\x00\x00\xf4\x11\x00\x00\x00\xf8&#x27;</span>        <span class="comment">--这部分指令是类似于cmp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> pc = <span class="number">1</span></span><br><span class="line">    <span class="keyword">local</span> val = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> c = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">to</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> b1, b2, b3, b4 = <span class="built_in">string</span>.<span class="built_in">byte</span>(code, pc , pc + <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">local</span> n = b1 + (b2 &lt;&lt; <span class="number">8</span>) + (b3 &lt;&lt; <span class="number">16</span>) + (b4 &lt;&lt; <span class="number">24</span>)  <span class="comment">--类字符串拼接</span></span><br><span class="line">        pc = pc + <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> n <span class="comment">--返回拼接字符串</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> dispatch = &#123;          <span class="comment">--创建一个名为dispatch的table，类似于python字典，此处键是十六进制数，值为对应的function</span></span><br><span class="line">        [<span class="number">0xf0</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>     <span class="comment">--这就意味着当我们执行dispatch[0xFA]时就会自动的去执行对应于0xfa这个键的值函数</span></span><br><span class="line">            m.f1(<span class="built_in">input</span>:<span class="built_in">byte</span>(c))   <span class="comment">--将从input中传入的指令push到栈中</span></span><br><span class="line">            c = c + <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xf1</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f1(to())     <span class="comment">--push基于某一个数</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xf2</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            val = m.f2()    <span class="comment">--pop</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xf3</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f3(to())      <span class="comment">--mov</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xf4</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f4(to())     <span class="comment">--push基于某一个地址</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xf5</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f5(to())     </span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xf6</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="keyword">local</span> v1 = to()  </span><br><span class="line">            <span class="keyword">local</span> v2 = to()</span><br><span class="line">            m.f6(v1, v2)   <span class="comment">--mov 数值存储到地址偏移到</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xf7</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f7()         <span class="comment">--add（从stack中取值）</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xf8</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f8()         <span class="comment">--sub （从stack中取值）</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xf9</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f9()         <span class="comment">--xor  （从stack中取值）</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xfa</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f10()       <span class="comment">--取反</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xfb</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f11()      <span class="comment">--调换数据在stack中的顺序</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xfc</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f12()      <span class="comment">--rol左移</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        [<span class="number">0xfd</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            m.f13()      <span class="comment">--ror右移</span></span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">while</span> pc &lt; code:<span class="built_in">len</span>() + <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%x&quot;</span>,code:<span class="built_in">byte</span>(pc)))</span><br><span class="line">        <span class="keyword">local</span> f = dispatch[code:<span class="built_in">byte</span>(pc)]</span><br><span class="line">        pc = pc + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> f ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            f()     <span class="comment">--f函数是否为空，如果不为空就执行这个函数</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">8</span>,<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> m.f2() ~= <span class="number">0</span> <span class="keyword">then</span>    <span class="comment">--一次表示三次的返回值都应该为0</span></span><br><span class="line">            <span class="keyword">goto</span> _fail_</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;good job!! the flag is 0xFA&#123;&#x27;</span> .. <span class="built_in">input</span> .. <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    ::_fail_::</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;try again1&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;input:&#x27;</span>)</span><br><span class="line">chk(<span class="built_in">io</span>.<span class="built_in">read</span>())  <span class="comment">--读取flag，调用函数对flag进行加密</span></span><br></pre></td></tr></table></figure><p>由源码可以知道我们的lua脚本还调用了一个名为GoodLuck的dll文件，用ida打开，去寻找相应的调用的函数</p><p>值得注意的是里面有一个名为luaopen_GoodLuck的函数</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/6f5a14a3-1d35-44af-bd9b-b51dd1bb7a86" alt=""></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/10f18e43-7d23-43f5-bf34-d92671737885" style="zoom:50%;" /></p><p>进入unk_xxxx，可以发现这些，这不正是我们在定义的dispatch的table中所调用的函数吗</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/3023b6f8-17aa-4374-98a0-829c1248584c" style="zoom:50%;" /></p><p>恢复函数名</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/59c37877-2c83-47be-8690-d137d7243144" style="zoom:50%;" /></p><p>之后即可自行更加代码的含义去推测，该函数对栈空间的作用，这是我类比x86恢复的一段可读性汇编指令，描述了flag字符的加密过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">push y</span><br><span class="line">push i</span><br><span class="line">add y , i</span><br><span class="line">push ~(y+i)</span><br><span class="line">push i</span><br><span class="line">rol ~(y+1),i</span><br><span class="line">push i</span><br><span class="line">xor (~(y+1)&lt;&lt;1), i</span><br><span class="line">pop (~(y+i)&lt;&lt;i)^i,result  最后一步是将加密后的flag字符存放到一个数组中</span><br></pre></td></tr></table></figure><p>最后一部分code字符串是对比，将加密后的字符与其对比，放置在DLLMain函数中，数组名字为了方便阅读进行修改</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/c54918b5-e0ab-4019-9fb8-f3a0a5144b26" alt=""></p><p>这就是加密后flag的值</p><p>脚本解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> enc[<span class="number">8</span>] = &#123;<span class="number">0xFFFFFFFFFFFFFFBA</span>, <span class="number">0xFFFFFFFFFFFFFF98</span>, <span class="number">0xFFFFFFFFFFFFFEC5</span>, <span class="number">0xFFFFFFFFFFFFFC34</span>, <span class="number">0xFFFFFFFFFFFFF9AB</span>, <span class="number">0xFFFFFFFFFFFFF4BA</span>, <span class="number">0xFFFFFFFFFFFFEB39</span>, <span class="number">0xFFFFFFFFFFFFEBF8</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (~(enc[i] ^ i) &gt;&gt; i) - i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个比较坑的点，就是其实按照那个加密算法的过程的话，我随意加密一个可视字符，他得到的加密结果都是16bit十六进制数，所以ida对数据可能有截断吧。这里需要自己补上去。</p><p>flag:0xFA{E2LvaUM!}</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>花</title>
      <link href="/2023/10/21/%E8%8A%B1/"/>
      <url>/2023/10/21/%E8%8A%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="花"><a href="#花" class="headerlink" title="花"></a>花</h3><p>去除类似标红的地方，由于E8被ida分析为了call指令的硬编码，实际没有用，会混乱我们原来的代码</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/6e8cb9f1-ff8f-4503-9832-e41199f14f99" style="zoom:80%;" /></p><p>change byte E8为90（nop）即可。</p><p>当我们按照这样的方式恢复函数之后，我们的main函数会出现end错误，上下查看，并没有出现错误的提前函数的结束，所以不考虑这方面。于是我们只需要观察main函数结尾处，由于这个部分刚刚出现过错误误导的E8，于是我们对这部分进行行的代码分析</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/8fa39fc1-79c3-449d-a118-d15aa7b75b8f" alt=""></p><p>将最后部分的代码先变为数据，然后再恢复code，此时将E8这个指令成功分析为call system</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/6940b76d-4ac8-49e8-8810-d942ddfe753b" alt=""></p><p>最后解密脚本，源码逻辑清晰就是一个简单的RC4加密，所以找到enc数据和秘钥就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    S = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># KSA阶段（密钥调度）</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PRGA阶段（伪随机字节生成器）</span></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        out.append(<span class="built_in">chr</span>(char ^ S[(S[i] + S[j]) % <span class="number">256</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br><span class="line"></span><br><span class="line">encrypted = [<span class="number">0xF4</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0xFA</span>, <span class="number">0x61</span>, <span class="number">0xA6</span>, <span class="number">0x71</span>, <span class="number">0x12</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, </span><br><span class="line">  <span class="number">0xFE</span>, <span class="number">0xD8</span>, <span class="number">0xE4</span>, <span class="number">0x38</span>, <span class="number">0x97</span>, <span class="number">0x51</span>, <span class="number">0xA8</span>, <span class="number">0xDF</span>, <span class="number">0x85</span>, <span class="number">0x65</span>, </span><br><span class="line">  <span class="number">0xC2</span>, <span class="number">0xB2</span>, <span class="number">0x15</span>, <span class="number">0xEF</span>, <span class="number">0x1F</span>, <span class="number">0xEC</span>, <span class="number">0x69</span>, <span class="number">0xDD</span>, <span class="number">0x6E</span>, <span class="number">0xE9</span>, </span><br><span class="line">  <span class="number">0xCF</span>, <span class="number">0x07</span>, <span class="number">0xAE</span>, <span class="number">0xC8</span>, <span class="number">0x17</span>, <span class="number">0xF0</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>, </span><br><span class="line">  <span class="number">0xA4</span>, <span class="number">0x0C</span>, <span class="number">0x87</span>, <span class="number">0x64</span>, <span class="number">0x9E</span>, <span class="number">0x9E</span>, <span class="number">0x71</span>, <span class="number">0x8C</span>, <span class="number">0x7F</span>, <span class="number">0xD7</span>, </span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x84</span>]</span><br><span class="line">key = <span class="string">&quot;WOWOWOWWOWOWOW&quot;</span></span><br><span class="line">decrypted = rc4_decrypt(encrypted, key)</span><br><span class="line"><span class="built_in">print</span>(decrypted)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R4ndom</title>
      <link href="/2023/10/20/R4ndom/"/>
      <url>/2023/10/20/R4ndom/</url>
      
        <content type="html"><![CDATA[<h2 id="R4ndom"><a href="#R4ndom" class="headerlink" title="R4ndom"></a>R4ndom</h2><p>找到被隐藏起来的种子</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/2d992319-a8ee-408f-bd60-2cb23a7279c1" alt=""></p><p>此处利用<strong>ptrace</strong>(详见专题)函数，限制程序debug</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/914b50b3-5090-45e7-a6a5-5078df9b19a4" alt=""></p><p>解密脚本（不知道为什么只能在linux环境下运行才有结果，win下是乱码:怀疑是字符集的问题，尝试无果目前)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Table[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line"> <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span> &#125;;</span><br><span class="line">    srand(<span class="number">1400333646</span>);</span><br><span class="line">    <span class="type">int</span> enc[<span class="number">42</span>] = &#123;</span><br><span class="line">        <span class="number">0xEE</span>, <span class="number">0xE6</span>, <span class="number">0xD7</span>, <span class="number">0xB2</span>, <span class="number">0x8A</span>, <span class="number">0xAB</span>, <span class="number">0x13</span>, <span class="number">0x35</span>, <span class="number">0x02</span>, <span class="number">0x7B</span>, <span class="number">0xC9</span>, <span class="number">0xB9</span>, <span class="number">0x9C</span>, <span class="number">0xBA</span>, <span class="number">0xED</span>, <span class="number">0x2E</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0x4F</span>, <span class="number">0xFA</span>, <span class="number">0xEE</span>, <span class="number">0xC8</span>, <span class="number">0xF8</span>, <span class="number">0xE4</span>, <span class="number">0x16</span>, <span class="number">0x82</span>, <span class="number">0x63</span>, <span class="number">0x3B</span>, <span class="number">0x98</span>, <span class="number">0xF4</span>, <span class="number">0x14</span>, <span class="number">0x30</span>, <span class="number">0x38</span>,</span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x36</span>, <span class="number">0x84</span>, <span class="number">0x3D</span>, <span class="number">0x0C</span>, <span class="number">0x36</span>, <span class="number">0x32</span>, <span class="number">0xEA</span>, <span class="number">0x55</span>, <span class="number">0xA6</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Table[j] == enc[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (j - rand() % <span class="number">255</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>flag{B8452786-DD8E-412C-E355-2B6F27DAB5F9}</strong></p><h3 id="easy-enc"><a href="#easy-enc" class="headerlink" title="easy_enc"></a>easy_enc</h3><p>一共对flag进行了4次加密，最后一次加密是不可逆的（对数做了一个较大的乘法，由于最后比较数组类型为char比较小，由此可以联想到乘法导致了数据外溢，所以无法逆向，只能进行正向爆破)</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/d1fbf604-9355-4562-b937-5bd70b2c9a94" alt=""></p><p>最后一层加密函数</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/75a9338e-07e8-4a1e-9308-7b0ed5de067e" alt=""></p><p>此处注意类型要用uint8_t,否者没办法输出（因为存在运算过程中的一些强制性转换）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">uint8_t</span> enc[<span class="number">100</span>] = &#123; <span class="number">0xE8</span>, <span class="number">0x80</span>, <span class="number">0x84</span>, <span class="number">0x8</span>, <span class="number">0x18</span>, <span class="number">0x3C</span>, <span class="number">0x78</span>, <span class="number">0x68</span>, <span class="number">0x0</span>, <span class="number">0x70</span>, <span class="number">0x7C</span>, <span class="number">0x94</span>, <span class="number">0xC8</span>, <span class="number">0xE0</span>, <span class="number">0x10</span>, <span class="number">0xEC</span>, <span class="number">0xB4</span>, <span class="number">0xAC</span>, <span class="number">0x68</span>, <span class="number">0xA8</span>, <span class="number">0xC</span>, <span class="number">0x1C</span>, <span class="number">0x90</span>, <span class="number">0xCC</span>, <span class="number">0x54</span>, <span class="number">0x3C</span>, <span class="number">0x14</span>, <span class="number">0xDC</span>, <span class="number">0x30</span> &#125;;</span><br><span class="line">    <span class="type">char</span> key[<span class="number">20</span>] = <span class="string">&quot;NewStarCTF&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> j = <span class="number">32</span>; j &lt;= <span class="number">127</span>; ++j) &#123;</span><br><span class="line">            <span class="type">uint8_t</span> tmp = j;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">0x41</span> || j &gt; <span class="number">0x5a</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; <span class="string">&#x27;0&#x27;</span> || j &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; j &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        j = (j - <span class="number">89</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    j = (j - <span class="number">45</span>) % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                j = (j - <span class="number">52</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j += key[i % <span class="built_in">strlen</span>(key)];</span><br><span class="line">            j = ~j;</span><br><span class="line">            j *= <span class="number">52</span>;</span><br><span class="line">            <span class="keyword">if</span> (j == enc[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tmp &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; tmp &lt;= <span class="string">&#x27;Z&#x27;</span>) || (tmp &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; tmp &lt;= <span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香山杯</title>
      <link href="/2023/10/17/%E9%A6%99%E5%B1%B1%E6%9D%AF/"/>
      <url>/2023/10/17/%E9%A6%99%E5%B1%B1%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="RE-URL从哪儿来"><a href="#RE-URL从哪儿来" class="headerlink" title="RE-URL从哪儿来"></a>RE-URL从哪儿来</h2><p>这道题主要是通过动态调试的方式来获取最终的flag的值</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/f325d797-c3f4-47ab-bbb6-c945bd7d048d" alt=""></p><p>执行给出的程序生成了一个程序ou.1FEC.tmp，这额里我们直接无脑动调，但是不等你跳的过多，我们在第一个数组赋值后面的代码处下断点。然后逐步调试，遇到繁琐同时打不开函数，我们直接跳过在下面下一个断点运行即可，最后当我们运行到</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/9387547f-14de-4f90-98ce-3bd084435d3f" alt=""></p><p>此时我们v19会显示一个地址然后里面储存着flag的值，我们看寄存器窗口会发现eax寄存器的地址和v19显示出来的地址是一致的，我们通过eax中，直接跳转到当前内存地址，dump数据即可</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/4d683177-0f91-430c-9f75-2ba8d3d93d98" alt=""></p><p>flag：<strong>flag{6469616e-6369-626f-7169-746170617761}</strong></p><h2 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h2><p>这道题主要也是apk程序的动态调试，从而找调用python脚本的位置</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/42291ff2-2f5b-4efa-a42d-5ff53870c0e5" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angr</title>
      <link href="/2023/10/14/angr/"/>
      <url>/2023/10/14/angr/</url>
      
        <content type="html"><![CDATA[<h2 id="Angr"><a href="#Angr" class="headerlink" title="Angr"></a>Angr</h2><h4 id="解题思路00-find-01-avoid"><a href="#解题思路00-find-01-avoid" class="headerlink" title="解题思路00(find),01(avoid)"></a>解题思路00(find),01(avoid)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">p = angr.Project(<span class="string">&quot;./00_angr_find&quot;</span>)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line">sm = p.factory.simulation_manager(init_state)</span><br><span class="line">sm.explore(find=0x????,avoid=0x?????) <span class="comment">#其中avoid可写可不写</span></span><br><span class="line">found_state=sm.found[<span class="number">0</span>]</span><br><span class="line">found_state.posix.dumps(<span class="number">0</span>) <span class="comment">#获取输入的文本</span></span><br><span class="line">found_state.posix.dumps(<span class="number">1</span>) <span class="comment">#获取问题文本</span></span><br></pre></td></tr></table></figure><h4 id="解题思路02-find-condition"><a href="#解题思路02-find-condition" class="headerlink" title="解题思路02(find_condition)"></a>解题思路02(find_condition)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    p=angr.Project(bin_path)</span><br><span class="line">    init_state = p.factory.entry_state()</span><br><span class="line">    sm = p.factory.simulation_manager(init_state)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_good</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_bad</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    sm.explore(find=is_good,avoid=is_bad)</span><br><span class="line">    <span class="keyword">if</span> sm.found:</span><br><span class="line">        found_state = sm.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Solution: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(found_state.posix.dumps(<span class="number">0</span>)))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><h4 id="解题思路03-symbolic-registers"><a href="#解题思路03-symbolic-registers" class="headerlink" title="解题思路03(symbolic_registers)"></a>解题思路03(symbolic_registers)</h4><p>多输入，跳过输入位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import sys</span><br><span class="line">import claripy</span><br><span class="line">def main(argv):</span><br><span class="line">    bin_path = argv[1]</span><br><span class="line">    p = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">    start_addr = 0x8048980</span><br><span class="line">    init_state = p.factory.blank_state(addr=start_addr) #在指定的位置设置程序运行初始状态</span><br><span class="line"></span><br><span class="line">    pass1 = claripy.BVS(&#x27;pass1&#x27;,32) #设置3个符号变量</span><br><span class="line">    #符号变量是一种特殊的变量，它不具有具体的数值，而是代表一个未知的值或一个范围。</span><br><span class="line">    pass2 = claripy.BVS(&#x27;pass2&#x27;,32)</span><br><span class="line">    pass3 = claripy.BVS(&#x27;pass3&#x27;,32)</span><br><span class="line"></span><br><span class="line">    init_state.regs.eax = pass1 #设置寄存器的值</span><br><span class="line">    init_state.regs.ebx = pass2</span><br><span class="line">    init_state.regs.edx = pass3</span><br><span class="line"></span><br><span class="line">    sm = p.factory.simulation_manager(init_state) #将初始状态init_state添加到模拟管理器中</span><br><span class="line">    def is_good(state):</span><br><span class="line">         return b&#x27;Good Job&#x27; in state.posix.dumps(1)</span><br><span class="line">    def is_bad(state):</span><br><span class="line">         return b&#x27;Try again&#x27; in state.posix.dumps(1)</span><br><span class="line">    sm.explore(find=is_good,avoid=is_bad)</span><br><span class="line">    if sm.found:</span><br><span class="line">         found_state = sm.found[0]</span><br><span class="line"></span><br><span class="line">         password1 = found_state.solver.eval(pass1)</span><br><span class="line">         password2 = found_state.solver.eval(pass2)</span><br><span class="line">         password3 = found_state.solver.eval(pass3)</span><br><span class="line">         print(&quot;Solution: &#123;:x&#125; &#123;:x&#125; &#123;:x&#125;&quot;.format(password1,password2,password3))</span><br><span class="line">    else:</span><br><span class="line">         raise Exception(&quot;No solution found&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><h4 id="解题思路04"><a href="#解题思路04" class="headerlink" title="解题思路04()"></a>解题思路04()</h4><p>模拟栈操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    p = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">    start_addr = <span class="number">0x8048697</span> </span><br><span class="line">    init_state = p.factory.blank_state(addr=start_addr)</span><br><span class="line">    padding_size = <span class="number">8</span></span><br><span class="line">    init_state.stack_push(init_state.regs.ebp)</span><br><span class="line">    init_state.regs.ebp=init_state.regs.esp <span class="comment">#初始化栈顶和栈底相同</span></span><br><span class="line">    init_state.regs.esp -= padding_size <span class="comment">#开辟栈空间的大小</span></span><br><span class="line">    pass1 = init_state.solver.BVS(<span class="string">&quot;pass1&quot;</span>,<span class="number">32</span>) <span class="comment">#创建符号向量</span></span><br><span class="line">    pass2 = init_state.solver.BVS(<span class="string">&quot;pass2&quot;</span>,<span class="number">32</span>)</span><br><span class="line">    init_state.stack_push(pass1)</span><br><span class="line">    init_state.stack_push(pass2)</span><br><span class="line">    sm = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_good</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_bad</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    sm.explore(find=is_good,avoid=is_bad)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sm.found:</span><br><span class="line">        found_state=sm.found[<span class="number">0</span>]</span><br><span class="line">        password1=found_state.solver.<span class="built_in">eval</span>(pass1)</span><br><span class="line">        password2=found_state.solver.<span class="built_in">eval</span>(pass2)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Solution: &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(password1,password2))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Solution not found&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> Angr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滴水逆向</title>
      <link href="/2023/10/14/%E6%BB%B4%E6%B0%B4%E9%80%86%E5%90%91/"/>
      <url>/2023/10/14/%E6%BB%B4%E6%B0%B4%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="滴水逆向"><a href="#滴水逆向" class="headerlink" title="滴水逆向"></a>滴水逆向</h1><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><h6 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h6><p>熟记0到16的二进制数，和十六进制</p><h6 id="思考：八进制2-3的解"><a href="#思考：八进制2-3的解" class="headerlink" title="思考：八进制2-3的解"></a>思考：八进制2-3的解</h6><p>2-3得-1,负数要以补码的形式表示,-1的补码是1的反码加1,</p><p>反码符号位不变</p><p>10000001  (1的二进制)<br>        111111110  (取反)<br>        111111111  (加1)<br>当数据宽度是字节时就是377了,同理数据跨度是word(177777)、dword(37777777777)、qword(1777777777777777777777)的结果</p><p>详细参考：<a href="https://blog.csdn.net/zhuyouwei0609/article/details/100134475">https://blog.csdn.net/zhuyouwei0609/article/details/100134475</a></p><h6 id="进制本质"><a href="#进制本质" class="headerlink" title="进制本质"></a>进制本质</h6><p>十进制：由十个符号组成，任意十个符号，逢十进一（一般会用于加密）</p><h6 id="八进制加法表："><a href="#八进制加法表：" class="headerlink" title="八进制加法表："></a>八进制加法表：</h6><h6 id="八进制乘法表："><a href="#八进制乘法表：" class="headerlink" title="八进制乘法表："></a>八进制乘法表：</h6><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><h6 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a>与运算</h6><p>两个都为1才为1</p><h6 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h6><p>一个为1就为1</p><h6 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h6><p>不一样为1</p><h6 id="非-not-b"><a href="#非-not-b" class="headerlink" title="非(not  b !)"></a>非(not  b !)</h6><p>1是0,0是1</p><h6 id="左移-lt-lt"><a href="#左移-lt-lt" class="headerlink" title="左移(&lt;&lt;)"></a>左移(&lt;&lt;)</h6><p>0010 &lt;&lt; 0100</p><h6 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h6><h3 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h3><p>1.程序入口</p><p>2.代码段</p><p>3.数据段</p><p>windows操作系统是小端序存储</p><p><img src="https://user-images.githubusercontent.com/116374553/230395879-b8c1dca3-c30a-4419-8054-f95ff83be81d.jpg"  /></p><h3 id="汇编语言（详见博客）"><a href="#汇编语言（详见博客）" class="headerlink" title="汇编语言（详见博客）"></a>汇编语言（详见博客）</h3><h6 id="寄存器和内存"><a href="#寄存器和内存" class="headerlink" title="寄存器和内存"></a>寄存器和内存</h6><p>1.寄存器和内存没有本质的区别，都是用于存储数据的容器</p><p>2.存储器位于CPU内部，执行速度快，但比较贵</p><p>3.内存速度相对较慢，但成本较低，所以可以做的很大</p><h6 id="32位寄存器（一般乱用）"><a href="#32位寄存器（一般乱用）" class="headerlink" title="32位寄存器（一般乱用）"></a>32位寄存器（一般乱用）</h6><div class="table-container"><table><thead><tr><th>EAX</th><th>累加器</th></tr></thead><tbody><tr><td>ECX</td><td>计数</td></tr><tr><td>EDX</td><td>I/O指针</td></tr><tr><td>EBX</td><td>ds段的数据指针</td></tr><tr><td>ESP</td><td>堆栈指针</td></tr><tr><td>EBP</td><td>SS段的数据指针</td></tr><tr><td>ESI</td><td>字符串操作的源指针：SS段的数据指针</td></tr><tr><td>EDI</td><td>字符串操作的目标指针：ES段的数据指针</td></tr></tbody></table></div><h6 id="计量单位"><a href="#计量单位" class="headerlink" title="计量单位"></a>计量单位</h6><p>Byte(字节)  = 8 BIT</p><p>WORD (字) = 16 BIT</p><p>DWORD (双字) = 32 BIT</p><h6 id="通用寄存器的使用（EAX-ECX-EDX-EBX"><a href="#通用寄存器的使用（EAX-ECX-EDX-EBX" class="headerlink" title="通用寄存器的使用（EAX/ECX/EDX/EBX)"></a>通用寄存器的使用（EAX/ECX/EDX/EBX)</h6><p>mov/add/sub</p><h6 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h6><ol><li>每个内存单元的宽度为8</li><li>[编号]称为地址</li><li>地址的作用:当我们想从内存中读取数据或者想向内存中读取数据或者写入数据，首先应该找到读和写的位置</li></ol><h6 id="内存的读写"><a href="#内存的读写" class="headerlink" title="内存的读写"></a>内存的读写</h6><ul><li><p>寻址公式1：[立即数] （当括号中为数 DS、ebp/esp SS、edi ES)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@读取内存的值</span><br><span class="line">mov eax,dword ptr ds:[0x13FFC4]</span><br><span class="line">@向内存中写入数据</span><br><span class="line">mov dword ptr ds:[0x13FFC4],eax</span><br><span class="line">@获取内存编号</span><br><span class="line">lea eax,dword ptr ds:[0x13FFC4]</span><br></pre></td></tr></table></figure></li><li><p>寻址公式2：[reg] reg代表寄存器可以是8个通用寄存器中的任意一个</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@读取内存的值</span><br><span class="line">mov ecx,0X13FFD0</span><br><span class="line">mov eax,dword ptr ds:[ecx]</span><br><span class="line">@向内存中写入数据</span><br><span class="line">mov edx,0x13FFD8</span><br><span class="line">mov dword ptr ds:[edx],0x87</span><br><span class="line">@获取内存编号</span><br><span class="line">lea eax,dword ptr ds:[edx]</span><br><span class="line">mov eax,dword ptr ds:[edx]</span><br></pre></td></tr></table></figure><ul><li><p>寻址公式3：[reg+立即数]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@读取内存的值</span><br><span class="line">mov ecx,0X13FFD0</span><br><span class="line">mov eax,dword ptr ds:[ecx+4]</span><br><span class="line">@向内存中写入数据</span><br><span class="line">mov edx,0x13FFD8</span><br><span class="line">mov dword ptr ds:[edx+0xc],0x87</span><br><span class="line">@获取内存编号</span><br><span class="line">lea eax,dword ptr ds:[edx+4]</span><br><span class="line">mov eax,dword ptr ds:[edx+4]</span><br></pre></td></tr></table></figure></li><li><p>寻址公式4：[reg+reg*{1,2.4,8}]</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@读取内存的值</span><br><span class="line">mov eax,13FFC4</span><br><span class="line">mov ecx,2</span><br><span class="line">mov edx,dword ptr ds:[eax+4*ecx]</span><br><span class="line">@向内存中写入数据</span><br><span class="line">mov eax,13FFC4</span><br><span class="line">mov ecx,2</span><br><span class="line">mov dword ptr ds:[eax+4*ecx].87</span><br><span class="line">@获取内存编号</span><br><span class="line">lea eax,dword ptr ds:[eax+ecx*4]</span><br></pre></td></tr></table></figure><ul><li>寻址公式5：[reg+reg*{1,2,4,8}+立即数]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@读取内存的值</span><br><span class="line">mov eax,13FFC4</span><br><span class="line">mov ecx,2</span><br><span class="line">mov edx,dword ptr ds:[eax+4*ecx+4]</span><br><span class="line">@向内存中写入数据</span><br><span class="line">mov eax,13FFC4</span><br><span class="line">mov ecx,2</span><br><span class="line">mov dword ptr ds:[eax+4*ecx+4].87</span><br><span class="line">@获取内存编号</span><br><span class="line">lea eax,dword ptr ds:[eax+ecx*4+2]</span><br></pre></td></tr></table></figure><h6 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h6><ol><li>堆栈本质即内存</li><li>栈用来存储临时变量，函数传递的中间结果</li></ol><p>esp：栈顶            ebp：栈底</p><p>push：入栈          pop：出栈</p><h6 id="堆栈变形"><a href="#堆栈变形" class="headerlink" title="堆栈变形"></a>堆栈变形</h6><p>push eax代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lea esp,dword ptr ss:[esp-4]</span><br><span class="line">mov dword ptr ss:[esp],eax</span><br><span class="line">@</span><br><span class="line">mov dword ptr ss:[esp-4],eax</span><br><span class="line">lea esp,dword ptr ss:[esp-4]</span><br><span class="line"></span><br><span class="line">lea esp,dword ptr ss:[esp-4] == mov esp,esp-4 == sub esp,4</span><br></pre></td></tr></table></figure><p>pop ecx代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ecx,dword ptr ss:[esp]</span><br><span class="line">lea esp,dword ptr ss:[esp+4] == mov esp,esp+4 == add esp,4</span><br><span class="line">@</span><br><span class="line">les esp,dword ptr ss:[esp+4]</span><br><span class="line">mov ecx,dword ptr ss:[esp-4]</span><br></pre></td></tr></table></figure><h6 id="STOS指令"><a href="#STOS指令" class="headerlink" title="STOS指令"></a>STOS指令</h6><p>指令名称：存串指令<br>        用法：stos dst，dst是一个目的地址<br>【指令格式】STOS 目的串<br>STOSB ； 存字节串<br>STOSW ；存字串<br>stos指令的含义是：将寄存器（AX，EAX）里的内容（一个字或一个字节）存储（store）到内存单元（地址ES：DI），同时CPU自动修改DI，以指向下一元素，即：（（DI））←（AX或AL），（DI）←（DI）±1或2。 [1]  作为参考，与之反操作的指令是lods，它的含义是将内存单元（地址：DS：SI）中的内容装入（load）到寄存器（AX，EAX）。</p><h6 id="REP指令"><a href="#REP指令" class="headerlink" title="REP指令"></a>REP指令</h6><p>重复指令，与此同时会伴随ecx作为程序的重复次数</p><h6 id="call指令"><a href="#call指令" class="headerlink" title="call指令"></a>call指令</h6><p>1.将eip的值修改</p><p>2.将函数的返回地址压入堆栈保存</p><h3 id="内存分配文件读写"><a href="#内存分配文件读写" class="headerlink" title="内存分配文件读写"></a>内存分配文件读写</h3><h4 id="宏定义说明"><a href="#宏定义说明" class="headerlink" title="宏定义说明"></a>宏定义说明</h4><h5 id="1-无参宏定义："><a href="#1-无参宏定义：" class="headerlink" title="1.无参宏定义："></a>1.无参宏定义：</h5><h1 id="define-标识符-字符序列"><a href="#define-标识符-字符序列" class="headerlink" title="define 标识符 字符序列"></a>define 标识符 字符序列</h1><h6 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h6><ul><li><p>只做字符序列的替换，不做语法检查</p></li><li><p>宏定义不当在预处理后编译时才能够发现）</p></li></ul><h5 id="2-带参宏定义："><a href="#2-带参宏定义：" class="headerlink" title="2.带参宏定义："></a>2.带参宏定义：</h5><h1 id="define-标识符-参数表-字符序列"><a href="#define-标识符-参数表-字符序列" class="headerlink" title="define 标识符(参数表)字符序列"></a>define 标识符(参数表)字符序列</h1><p>例如：#define Max(A,B)  ((A)&gt;(B)?(A):(B))</p><p>如果代码中存在：x = Max(p,q),他们将被替换为y = ((q)&gt;(p)?(p):(q))</p><h6 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h6><ul><li>宏标识符与左圆括号间不允许有空白符，应紧接在一起</li><li>宏与函数的区别：函数分配额外的堆栈空间，而宏只是替换</li><li>为了避免错误，宏定义中给形参加上括号</li><li>末尾不需要分号</li><li>define可以替代多行代码，记得后面添加\</li></ul><p>例如：#define Malloc(n,type)\</p><p>​                                            ((type<strong>*</strong>)malloc((n)<strong>*</strong>sizeof(type)))</p><h4 id="头文件的使用"><a href="#头文件的使用" class="headerlink" title="头文件的使用"></a>头文件的使用</h4><h6 id="lt-gt-和“-”"><a href="#lt-gt-和“-”" class="headerlink" title="&lt; &gt;和“ ”"></a>&lt; &gt;和“ ”</h6><p>&lt;&gt;是先到系统目录中去寻找</p><p>“”是到当前目录寻找</p><h6 id="自定义函数的头文件调用"><a href="#自定义函数的头文件调用" class="headerlink" title="自定义函数的头文件调用"></a>自定义函数的头文件调用</h6><p><img src="https://user-images.githubusercontent.com/116374553/230701805-6aebd0f6-e0eb-4606-bc1a-18cabc4b9756.png" style="zoom:50%;" /></p><p>在*.h文件中声明函数</p><p><img src="https://user-images.githubusercontent.com/116374553/230702109-040f133f-b41a-4914-853e-84429669f1ff.png" style="zoom:40%;" /></p><p>在*.cpp中编写函数</p><p><img src="https://user-images.githubusercontent.com/116374553/230702141-f7396e7e-b3f8-4186-9429-e5334d695cd2.png" style="zoom: 45%;" /></p><p>在其他地方以头文件的形式调用函数</p><p><img src="https://user-images.githubusercontent.com/116374553/230702176-13e79bf4-3c7c-428e-8a20-6f2ab84d3aa5.png" style="zoom: 40%;" /></p><h6 id="重复包含解决方案（似乎在vs中不存在这一问题）"><a href="#重复包含解决方案（似乎在vs中不存在这一问题）" class="headerlink" title="重复包含解决方案（似乎在vs中不存在这一问题）"></a>重复包含解决方案（似乎在vs中不存在这一问题）</h6><p>详细请见：<a href="https://blog.csdn.net/wenhao_ir/article/details/125670576">https://blog.csdn.net/wenhao_ir/article/details/125670576</a></p><p>重复包含的含义：</p><p><img src="https://user-images.githubusercontent.com/116374553/230705545-b6bbd2b3-b735-46a8-9e2b-6f9cab78ebdb.png" alt=""></p><p>解决方案</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ZZZ</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZZZ</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h6 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h6><p>内存分配函数</p><p>size_t即为unsigned int64</p><p>void *malloc(sizt_t size)  指针类型</p><ul><li>malloc返回类型为void*类型 需要强制转换</li><li>在使用malloc的时候要查看是否内存生成成功，无论空间大小</li><li>申请完空间需要初始化（由于不清楚申请空间之后给出的内存地址中的值）</li><li>malloc申请的内存空间为动态内存，使用后需要释放内存</li><li>将指针的值设置为NULL（为了避免出现，在释放空间之后指针依旧指在之前的地方）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* ptr;</span><br><span class="line">ptr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">128</span>);</span><br><span class="line"><span class="comment">//判断内存是否申请成功</span></span><br><span class="line"><span class="keyword">if</span>(ptr==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化分配的内存空间</span></span><br><span class="line"><span class="built_in">memset</span>(ptr,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">128</span>);</span><br><span class="line"><span class="comment">//使用完毕之后，释放申请的空间</span></span><br><span class="line">*(ptr) = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line"><span class="comment">//指针设置为NULL</span></span><br><span class="line">ptr = <span class="literal">NULL</span>;<span class="comment">//此时读取到的还是自己空间中的数据</span></span><br></pre></td></tr></table></figure><p><strong>每一个exe的32位程序都有一个属于自己的4GB的虚拟空间</strong></p><ul><li>声明一个<strong>全局变量</strong>存储在<strong>全局区</strong>，<strong>局部变量</strong>在<strong>栈</strong>（堆栈）区，<strong>动态内存</strong>在<strong>堆</strong></li></ul><h6 id="fopen函数"><a href="#fopen函数" class="headerlink" title="fopen函数"></a>fopen函数</h6><p>打开文件</p><h6 id="fseek函数"><a href="#fseek函数" class="headerlink" title="fseek函数"></a>fseek函数</h6><p>设置文件的指针指向什么位置</p><h6 id="ftell函数"><a href="#ftell函数" class="headerlink" title="ftell函数"></a>ftell函数</h6><p>判断文件有多大</p><h6 id="fclose函数"><a href="#fclose函数" class="headerlink" title="fclose函数"></a>fclose函数</h6><p>关闭文件</p><h6 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h6><p>堆现用现分，不能够自动释放</p><h6 id="堆栈（栈）"><a href="#堆栈（栈）" class="headerlink" title="堆栈（栈）"></a>堆栈（栈）</h6><p>系统自动释放，变为垃圾数据</p><h6 id="查看数据类型"><a href="#查看数据类型" class="headerlink" title="查看数据类型"></a>查看数据类型</h6><p>在vs中选中类型，F12即可</p><h1 id="暂时安插的题目"><a href="#暂时安插的题目" class="headerlink" title="暂时安插的题目"></a>暂时安插的题目</h1><p><img src="C:/Users/%E5%85%94%E5%AD%90%E7%88%B1%E5%90%83%E8%8D%89/OneDrive/%E6%A1%8C%E9%9D%A2/QQ%E5%9B%BE%E7%89%8720230409155415.png" alt="QQ图片20230409155415"><img src="C:/Users/%E5%85%94%E5%AD%90%E7%88%B1%E5%90%83%E8%8D%89/OneDrive/%E6%A1%8C%E9%9D%A2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-04-09%20000309.png" alt="屏幕截图 2023-04-09 000309"></p><p><img src="https://user-images.githubusercontent.com/116374553/232232039-b846aaa7-3236-4c72-a188-68e7c70eebd4.png" alt="">)</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 逆向学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andriod</title>
      <link href="/2023/10/04/Android/"/>
      <url>/2023/10/04/Android/</url>
      
        <content type="html"><![CDATA[<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h3 id="Android源码位置"><a href="#Android源码位置" class="headerlink" title="Android源码位置"></a>Android源码位置</h3><p>再源码包下的com文件下(一般关键代码存在于MainActivity下，但是也可能是继承其他的类)</p><h3 id="1-R-id"><a href="#1-R-id" class="headerlink" title="1.R.id"></a>1.R.id</h3><p>直接通过搜索即可</p><p>jadx勾选如下</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/c5bdfc10-76ea-4bb7-8911-6e1ef34f37ed" alt=""></p><h3 id="2-加载资源"><a href="#2-加载资源" class="headerlink" title="2.加载资源"></a>2.加载资源</h3><p>遇到加载资源文件，如下代码。win加载的是.dll文件，linux加载的是.so。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.loadLibrary(<span class="string">&quot;encry&quot;</span>);</span><br></pre></td></tr></table></figure><p>一般情况下如果想知道调用的具体内容，需要将这个资源文件倒出</p><p>存在位置如下（参考）：</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/515708e8-5f02-4b84-b37c-f73d87bb6988" alt=""></p><p>导出后用ida加载该资源文件即可</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> Andriod逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow</title>
      <link href="/2023/09/14/ctfshow/"/>
      <url>/2023/09/14/ctfshow/</url>
      
        <content type="html"><![CDATA[<h2 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h2><p>考点：静态分析，文本文件数据读取</p><p>难点可能在于enflag.txt文件打开时不规则的字符，无法正常的解析。可以直接拖到<strong>winhex一类的十六进制编辑器直接查看数据</strong>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="string">&quot;&quot;</span></span><br><span class="line">f2 = <span class="string">&quot;DH~mqqvqxB^||zll@Jq~jkwpmvez&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f2)):</span><br><span class="line">    f1 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(f2[i])^<span class="number">0x1f</span>)</span><br><span class="line">a2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    a2.append(<span class="built_in">ord</span>(f1[i%<span class="built_in">len</span>(f1)]))</span><br><span class="line">a3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    a3.append(i)</span><br><span class="line">v5 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    v5 = (a2[i] + a3[i]+v5)%<span class="number">256</span></span><br><span class="line">    v4 = a3[i]</span><br><span class="line">    a3[i] = a3[v5]</span><br><span class="line">    a3[v5] = v4</span><br><span class="line">enflag = [<span class="number">0xC3</span>,<span class="number">0x82</span>,<span class="number">0xA3</span>,<span class="number">0x25</span>,<span class="number">0xF6</span>,</span><br><span class="line">          <span class="number">0x4C</span>,<span class="number">0x36</span>,<span class="number">0x3B</span>,<span class="number">0x59</span>,<span class="number">0xCC</span>,</span><br><span class="line">          <span class="number">0xC4</span>,<span class="number">0xE9</span>,<span class="number">0xF1</span>,<span class="number">0xB5</span>,<span class="number">0x32</span>,</span><br><span class="line">          <span class="number">0x18</span>,<span class="number">0xB1</span>,<span class="number">0x96</span>,<span class="number">0xAE</span>,<span class="number">0xBF</span>,</span><br><span class="line">          <span class="number">0x08</span>,<span class="number">0x35</span>]</span><br><span class="line">v7 = <span class="number">0</span></span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enflag)):</span><br><span class="line">    v7 = (v7+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    v6 = (v6 + a3[v7])%<span class="number">256</span></span><br><span class="line">    v10 = a3[v7]</span><br><span class="line">    a3[v7] = a3[v6]</span><br><span class="line">    a3[v6] = v10</span><br><span class="line">    flag += <span class="built_in">chr</span>(enflag[i]^a3[((a3[v6]+a3[v7]))%<span class="number">256</span>])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><strong>flag{RC4&amp;-&gt;ENc0d3F1le}</strong></p><h2 id="re3"><a href="#re3" class="headerlink" title="re3"></a>re3</h2><p>考点：动态调试</p><p>通过动态调试可以知道整道题的关键在于两次循环后我们需要使得v16的值为0xFFFF，由于v17数组的值除了v17[6]是未知的其余均是已知，再结合hint，我们可以很容易通过动态调试得知，当i等于6时，我们的v16是多少，还差多少能够为0xffff，此时我们用0xffff-动态调试所得值=最终结果。（其实整道题还具有一定的猜测成分，因为flag形式肯定为flag{xxxx},加上说的是最小值，那么结合整道题当我们实际上参与cmp运算的应该只有flag中包含的内容，所以flag{min_value}</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/3d777661-0a4b-4b49-a2cf-75f99fbe4311" alt=""></p><p>动态过程中数据记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v7 = [0x50，0xfae3，0xD7D3F7B,0xA43499F6,0x5010,0xef9,0x67,?]</span><br><span class="line">其中14,15是v14，v15（这也是一个错误点，如果不动调易错，因为不知道为什么ida吧原本的v14变为了v16，这个还需要自己去推测）</span><br><span class="line">0：50</span><br><span class="line">1：FB33 50+FAE3</span><br><span class="line">2：d7e3aae FB33+D7D3F7B   3aae(14)  D7E(15)  482C(14+15)</span><br><span class="line">3：A434E222 482C+A43499F6 e222(14)  A434(15) 18656 8656(14) 1(15) 8657</span><br><span class="line">4：D667 8657+5010</span><br><span class="line">5：E560 D667+EF9</span><br><span class="line">6：此次需要再E560上加上一个数到达0xffff，即可ok</span><br></pre></td></tr></table></figure><p>最后调试得flag：<strong>flag{1a9f}</strong></p><h2 id="逆向4"><a href="#逆向4" class="headerlink" title="逆向4"></a>逆向4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">&quot;/..v4p$$!&gt;Y59-&quot;</span></span><br><span class="line">table = <span class="string">&quot;)(*&amp;^%489$!057@#&gt;&lt;:2163qwe&quot;</span></span><br><span class="line">f = <span class="string">&quot;&quot;</span></span><br><span class="line">m,<span class="built_in">sum</span> = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    f+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i])^<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">if</span> f[j] == table[k]:</span><br><span class="line">            m = k</span><br><span class="line">            c.append(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">sum</span> *= <span class="number">26</span></span><br><span class="line">    <span class="built_in">sum</span> += m</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMC技术</title>
      <link href="/2023/09/12/SMC%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/09/12/SMC%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="SMC技术"><a href="#SMC技术" class="headerlink" title="SMC技术"></a>SMC技术</h1><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>动态代码加密技术，”Self Modifying Code”或者动态代码加密技术是一种编程技术，它允许程序在运行时修改自身的代码或数据。这样可以增加程序的灵活性和效率，同时也可以增加对代码的保护。</p><h4 id="解题技巧"><a href="#解题技巧" class="headerlink" title="解题技巧"></a>解题技巧</h4><p>一般通过观察代码然后，利用idapython恢复原代码。有时也可以通过动态调试获取。</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><h5 id="我不是病毒2-0（wp"><a href="#我不是病毒2-0（wp" class="headerlink" title="我不是病毒2.0（wp)"></a>我不是病毒2.0（wp)</h5><h5 id="2020-Splendid-MineCraft"><a href="#2020-Splendid-MineCraft" class="headerlink" title="2020-Splendid_MineCraft"></a>2020-Splendid_MineCraft</h5>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> SMC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向</title>
      <link href="/2023/08/15/%E9%80%86%E5%90%91/"/>
      <url>/2023/08/15/%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.python中截取一个二进制的低八位</span><br><span class="line">  cs=0B1010101010100101 </span><br><span class="line">  cs=int(bin(cs)[-8:], 2) </span><br><span class="line">2.将python打包为exe，需要解包然后反编译</span><br><span class="line">3.Ctrl+/多行注释</span><br><span class="line">4.运算优先级</span><br><span class="line">Python 中数值运算操作符的优先级从高到低依次为：</span><br><span class="line"></span><br><span class="line">1. 括号，即 ( )</span><br><span class="line">2. 指数运算 **  (右结合)</span><br><span class="line">3. 正负号 +x（正号），-x（负号）</span><br><span class="line">4. 乘除运算 * / // %</span><br><span class="line">5. 加减运算 + -</span><br><span class="line">6. 比较运算 &lt; &lt;= &gt; &gt;=</span><br><span class="line">7. 等于运算 == !=</span><br><span class="line">8. 逻辑非 not</span><br><span class="line">9. 逻辑与 and</span><br><span class="line">10. 逻辑或 or</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/226904976-c5ca76a2-e9a9-45c0-a4b3-e7572c94e83f.png" style="zoom: 50%;" /></p><h4 id="if-name-‘main’"><a href="#if-name-‘main’" class="headerlink" title="if name == ‘main’"></a>if name == ‘main’</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _name_==<span class="string">&#x27;_main_&#x27;</span></span><br></pre></td></tr></table></figure><p>该代码的作用是为了当我们引入其他模块时，不运行那些模块，只运行主代码</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块A</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你好，我是模块A……&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块B</span></span><br><span class="line"><span class="keyword">from</span> package01 <span class="keyword">import</span> A</span><br><span class="line">b = <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你好，我是模块B……&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>当我们运行b时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你好，我是模块A……</span><br><span class="line"><span class="number">100</span></span><br><span class="line">你好，我是模块B……</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><p>如果我们修改了A</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块A</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你好，我是模块A……&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>b模块输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你好，我是模块A……</span><br><span class="line">你好，我是模块B……</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><p>此时我们分别运行A和B，并且输出A，B中<em>name</em>的含义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块A</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你好，我是模块A……&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;模块A中__name__的值：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(__name__))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块B</span></span><br><span class="line"><span class="keyword">from</span> package01 <span class="keyword">import</span> A</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你好，我是模块B……&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;模块B中__name__的值：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(__name__))</span><br></pre></td></tr></table></figure><p>执行A</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你好，我是模块A……</span><br><span class="line">模块A中__name__的值：__main__</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure><p>执行B</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你好，我是模块A……</span><br><span class="line">模块A中__name__的值：package01.A</span><br><span class="line">-------------------------</span><br><span class="line">你好，我是模块B……</span><br><span class="line">模块B中__name__的值：__main__</span><br></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/340997807">Python中“if <strong>name</strong>==’<strong>main</strong>‘:”详细解析 - 知乎 (zhihu.com)</a></p><h2 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h2><h4 id="VirtualAlloc"><a href="#VirtualAlloc" class="headerlink" title="VirtualAlloc"></a>VirtualAlloc</h4><p>它包含在windows系统文件Kernel32.dll中，编程时直接使用就可以了，不需要再下载。</p><p>用于内存分配的话,并且分配类型未指定MEM_RESET,则系统将自动设置为0;</p><p>API声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LPVOID VirtualAlloc&#123;</span><br><span class="line">LPVOID lpAddress, <span class="comment">// 要分配的内存区域的地址</span></span><br><span class="line">DWORD dwSize, <span class="comment">// 分配的大小</span></span><br><span class="line">DWORD flAllocationType, <span class="comment">// 分配的类型</span></span><br><span class="line">DWORD flProtect <span class="comment">// 该内存的初始保护属性</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://baike.baidu.com/item/VirtualAlloc/1606859?fr=aladdin">https://baike.baidu.com/item/VirtualAlloc/1606859?fr=aladdin</a></p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><h3 id="反汇编内容形式"><a href="#反汇编内容形式" class="headerlink" title="反汇编内容形式"></a>反汇编内容形式</h3><h4 id="LOWORD-HIWORD"><a href="#LOWORD-HIWORD" class="headerlink" title="LOWORD/HIWORD"></a>LOWORD/HIWORD</h4><p>LOWORD：取得某个4字节变量(即32位的值)在内存中处于高位的两个字节,即一个word长的数据<br>       HIWORD：取得某个4字节变量(即32位的值)在内存中处于低位的两个字节,即一个word长的数据<br>  例如：0xCCDDEEFF<br>       HIWORD(0xCCDDEEFF)=oxCCDD<br>       LOWORD(0XCCDDEEFF)=0xEEFF</p><h6 id="LOBYTE-HIBYTE"><a href="#LOBYTE-HIBYTE" class="headerlink" title="LOBYTE/HIBYTE"></a>LOBYTE/HIBYTE</h6><p>LOBYTE（）是取得16进制数最低（最右边）那个字节的内容<br>        HIBYTE（）是取得16进制数最高（最左边）那个字节的内容</p><h3 id="界面框架"><a href="#界面框架" class="headerlink" title="界面框架"></a>界面框架</h3><ul><li><p>IDA View-A表示函数汇编，有两种表现形式，一是图形架构，即逻辑树形图，二是常规模式，二者可按空格键转换。</p></li><li><p>Hex View-1 16进制代码</p></li><li><p>Structures 查看程序中所有的结构体</p></li><li>Enums 查看枚举信息</li><li>Imports 查看输入函数，即程序中调用的外部函数</li><li>Exports 查看输出函数，即本程序内部函数</li></ul><p>参考：<a href="https://www.cnblogs.com/NekoCc/p/13265844.html">https://www.cnblogs.com/NekoCc/p/13265844.html</a></p><h3 id="快捷使用键"><a href="#快捷使用键" class="headerlink" title="快捷使用键"></a>快捷使用键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.IDA汇编界面Ctrl+X查看交叉引用</span><br><span class="line">2.shift+E 提取数据</span><br><span class="line">3.空格切换IDA View-A的两种格式查看汇编 -图形架构（逻辑树形图） 常规模式</span><br><span class="line">4.Tab键切换反汇编窗口和汇编窗口</span><br><span class="line">5.N修改函数名</span><br><span class="line">6./注释</span><br><span class="line">7.A生成数组</span><br><span class="line">8.右键选中Synchronize with可以使IDA View-A，Pesudocode，Hex View1三者互相跟随（适合在小窗口时使用）</span><br><span class="line">9.R转换为字符</span><br><span class="line">10.Option-&gt;General-&gt;Disassembly-&gt;Number of opcode bytes后的数据由0改为8回出现硬编码（8的情况下，硬编码一般是全的)</span><br></pre></td></tr></table></figure><h2 id="常见知识点"><a href="#常见知识点" class="headerlink" title="常见知识点"></a>常见知识点</h2><h4 id="mode参数"><a href="#mode参数" class="headerlink" title="mode参数"></a>mode参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">①&#x27;r&#x27;:只读模式</span><br><span class="line"> ②&#x27;w&#x27;:只写模式，文件不存在的话，创建文件；文件存在的话，首先清空文件，然后开始写；</span><br><span class="line"> ③&#x27;a&#x27;:追加模式，文件不存在话，创建文件；文件存在的话，不会清空文件；每次写都是从结尾开始写；</span><br><span class="line"> ④&#x27;r+&#x27;:读写模式，文件不存在的话，报FileNotFoundError（python2是IOError）；</span><br><span class="line"> ⑤&#x27;w+&#x27;:只写模式，文件不存在的话，创建文件；文件存在的话，首先清空文件；</span><br><span class="line"> ⑥&#x27;a+&#x27;:追加模式，文件不存在话，创建文件；文件存在的话，不会清空文件；</span><br><span class="line"> ⑦&#x27;x&#x27;:python3新加——创建文件并写操作，操作必须是不存在的文件，如果操作的文件已存在，则报错FileExistsError不可读，如果进行了读操作</span><br><span class="line"> ⑧&#x27;b&#x27;:二进制形式读写文件</span><br><span class="line"> 参考：https://www.shuzhiduo.com/A/pRdBBevDdn/</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/229469918-16b83b19-329d-4bd0-bc13-a1eacc760916.png" alt="https://user-images.githubusercontent.com/116374553/229469918-16b83b19-329d-4bd0-bc13-a1eacc760916.png"></p><h4 id="异或-或-且-偏移"><a href="#异或-或-且-偏移" class="headerlink" title="异或 或 且 偏移"></a>异或 或 且 偏移</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.两次xor等于没有xor</span><br><span class="line">(a[i]^a[i+1])^a[i+1] &lt;==&gt; a[i]^(a[i+1]^a[i+1]) == 原来的a</span><br><span class="line">2.100|5 = 105</span><br><span class="line">  0x105 &amp; 0xf = 5</span><br><span class="line">3.0x55 &lt;&lt; 0x8 = 0x5500</span><br><span class="line">4.key ^= key &gt;&gt; 17</span><br><span class="line">现在key为key1</span><br><span class="line">则原来的key = key1 ^ (key1 &gt;&gt; 17)</span><br></pre></td></tr></table></figure><h4 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.数左移一位 = 数 * 2</span><br><span class="line">2.汇编中带有h的数字为十六进制</span><br><span class="line">3.（,）C语言运算符</span><br><span class="line">逗号运算符，其算式称为逗号表达式</span><br><span class="line">算式1,算式2,……,算式n</span><br><span class="line">其中逗号表达式的解为算式n的结果(求解过程，是从左到右)</span><br><span class="line">参考：https://blog.csdn.net/YJG7D314/article/details/86761470</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 逆向知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/08/09/SpringBoot/"/>
      <url>/2023/08/09/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="SpringBoot概述"><a href="#SpringBoot概述" class="headerlink" title="SpringBoot概述"></a>SpringBoot概述</h2><p>SpringBoot简化Spring的开发，快速开发Spring项目，而不是对Spring功能的增强</p><p><img src="https://user-images.githubusercontent.com/116374553/234645367-178162b5-4332-4e33-bd5d-616b4f120715.png" alt=""></p><h3 id="SpringBoot功能"><a href="#SpringBoot功能" class="headerlink" title="SpringBoot功能"></a>SpringBoot功能</h3><p>1.自动配置</p><p><img src="https://user-images.githubusercontent.com/116374553/234648099-b1c077cb-4b28-4fbb-91ef-b2eead26a52a.png" alt=""></p><p>2.起步依赖</p><p><img src="https://user-images.githubusercontent.com/116374553/234648401-a2bbec93-d022-40e9-9e02-19b1bc83c649.png" alt=""></p><p>3.辅助功能</p><p><img src="https://user-images.githubusercontent.com/116374553/234648648-22dcce52-b63e-4cc6-aea7-97f4e90b3aad.png" alt=""></p><h2 id="SpringBoot快速入门"><a href="#SpringBoot快速入门" class="headerlink" title="SpringBoot快速入门"></a>SpringBoot快速入门</h2><h3 id="实现1"><a href="#实现1" class="headerlink" title="实现1"></a><strong>实现1</strong></h3><p>搭建SpringBoot工程，定义HelloControl.hello方法，并返回“Hello”</p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h4><p>①创建Maven工程</p><p>②导入SpringBoot起步依赖</p><p>③定义Controller</p><p>④编写引导类</p><p>⑤启动测试</p><ul><li>创建Maven工程</li></ul><p>格式：<img src="https://user-images.githubusercontent.com/116374553/235570626-9b431c41-badb-4978-8702-7a2b6e64a6df.png" style="zoom:50%;" /></p><ul><li>导入SpringBoot起步依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>untitled<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baibai.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span><span class="comment">//访问路径为hello</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Spring Boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写引导类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引导类的后缀名都是以Application结尾的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 引导类。SoringBoot项目的入口</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">//java中@代表注解的含义，特殊的注解，这些标志可以在编译，类加载，运行时被读取，并执行相应的处理，以便于其他工具补充信息或者进行部署</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class,args);</span><br><span class="line">    &#125;<span class="comment">//运行springboot的项目直接运行main方法即可</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动测试</li></ul><p><img src="https://user-images.githubusercontent.com/116374553/235571262-1ff77559-f93c-4348-84ce-f7adf7abc6a9.png" alt=""></p><p>访问：localhost:8080/hello</p><p><strong>注意</strong>：<em>Tomacat是由Apache推出的一款免费开源的Servlet容器，可实现JavaWeb程序的装载</em></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>①SpingBoot在创建项目时，使用jar的打包方式（由于在pom中未指定打包方式，同时是用main方法直接启动的）</p><p>②SpringBoot的引导类，是项目入口，运行main方法就可以启动项目</p><p>③使用SpingBoot和Spring构建项目，业务代码编写方式完全一样</p><h3 id="实现2"><a href="#实现2" class="headerlink" title="实现2"></a>实现2</h3><p>使用idea快速构建SpringBoot工程。定义HelloController.hello()方法，返回“Hello SpringBoot”</p><p>在idea中快速构建spring boot项目（会出现报错，请修改环境将17改为1.8或8，然后重新加载maven即可，可以尝试修改parent的依赖的版本（降低版本），将starter-web的版本号version也添加上）</p><h2 id="SpringBoot起步依赖原理分析"><a href="#SpringBoot起步依赖原理分析" class="headerlink" title="SpringBoot起步依赖原理分析"></a>SpringBoot起步依赖原理分析</h2><p>（依赖传递）</p><p>①spring-boot-starter-parent</p><p>版本信息（依赖的父工程），组合了一套最优搭配的技术版本</p><p>②spring-boot-starter-web</p><p><strong>在各种的starter中，定义了完成该功能需要的坐标合集，其中大部分版本信息来自于父工程</strong></p><p>工程在继承parent，引入starter后，通过依赖传递，就可以简单方便获得需要的jar包，并且不会存在版本冲突问题</p><h2 id="SpringBoot配置"><a href="#SpringBoot配置" class="headerlink" title="SpringBoot配置"></a>SpringBoot配置</h2><h3 id="配置文件类"><a href="#配置文件类" class="headerlink" title="配置文件类"></a>配置文件类</h3><p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的haunt，就可以使用application.properties或者application.yml(application.yaml)进行配置。</p><p><strong>注意：配置文件的默认名称：application</strong></p><p>properties：</p><p>（键值对）//端口号</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080#程序自动识别的内容</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">abc#自定义内容，需要在程序中使用一些方式去加载</span></span><br></pre></td></tr></table></figure><p>yml：</p><p>冒号和值之间有空格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sever：</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>同时打开yaml，yml，properties</p><p>在同一级目录下：properties&gt;yml&gt;yaml(第一优先级的属性会被识别)</p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>一种直观的能够被电脑识别的数据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互。以数据为核心，比传统的xml方式更加简洁</p><h4 id="yaml，properties，xml对比"><a href="#yaml，properties，xml对比" class="headerlink" title="yaml，properties，xml对比"></a>yaml，properties，xml对比</h4><p>properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string">port=8080</span></span><br><span class="line"><span class="attr">server</span>:<span class="string">address=127.0.0.1</span></span><br></pre></td></tr></table></figure><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">adress</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">adress</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">adderss:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h4 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h4><ul><li>大小写敏感</li><li>数据值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><h1 id="表示注释，从这个字符一直到行尾，都会被解析器忽略"><a href="#表示注释，从这个字符一直到行尾，都会被解析器忽略" class="headerlink" title="表示注释，从这个字符一直到行尾，都会被解析器忽略"></a>表示注释，从这个字符一直到行尾，都会被解析器忽略</h1></li></ul><h4 id="yaml数据格式"><a href="#yaml数据格式" class="headerlink" title="yaml数据格式"></a>yaml数据格式</h4><ul><li>对象（map）：键值对的集合</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>数组：一组按次序排列的值(使用‘-’表示数组的每个元素)</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">address:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">address:</span> [<span class="string">beijing</span>,<span class="string">shanghai</span>]</span><br></pre></td></tr></table></figure><ul><li>纯量：单个的、不可再分的值（相当于常量）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">msg1:</span> <span class="string">&#x27;hello \n world&#x27;</span><span class="comment">#单引号忽略转义字符</span></span><br><span class="line"><span class="attr">msg2:</span> <span class="string">&quot;hello \n world&quot;</span><span class="comment">#双引号识别转义字符</span></span><br></pre></td></tr></table></figure><h4 id="yaml参数引用"><a href="#yaml参数引用" class="headerlink" title="yaml参数引用"></a>yaml参数引用</h4><p>${key}</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;name&#125;#引用上边的定义的name值</span></span><br></pre></td></tr></table></figure><h3 id="读取配置文件内容"><a href="#读取配置文件内容" class="headerlink" title="读取配置文件内容"></a>读取配置文件内容</h3><p>①@Value（注解方式）</p><p>②Environment（环境配置）</p><p>③@ConfigurationProperties</p><ul><li>Value</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Value括号中的值即为之后定义的变量的初始值</span></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span><span class="comment">//$中的内容必须和配置文件中的名称一致</span></span><br><span class="line">   <span class="keyword">private</span> String name;<span class="comment">//此处的名称不一定和配置文件中一致</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span><span class="comment">//$中的内容必须和配置文件中的名称一致</span></span><br><span class="line">   <span class="keyword">private</span> String name2;<span class="comment">//此处的名称不一定和配置文件中一致</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span><span class="comment">//$中的内容必须和配置文件中的名称一致</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//此处的名称不一定和配置文件中一致</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//此处似乎只能在行内写法时有效（数组）</span></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;adress2[1]&#125;&quot;)</span><span class="comment">//$中的内容必须和配置文件中的名称一致</span></span><br><span class="line">   <span class="keyword">private</span> String address1;<span class="comment">//此处的名称不一定和配置文件中一致</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//纯量</span></span><br><span class="line"><span class="comment">//单引号</span></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;msg1&#125;&quot;)</span><span class="comment">//$中的内容必须和配置文件中的名称一致</span></span><br><span class="line">   <span class="keyword">private</span> String msg1;<span class="comment">//此处的名称不一定和配置文件中一致</span></span><br><span class="line"><span class="comment">//双引号</span></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;msg2&#125;&quot;)</span><span class="comment">//$中的内容必须和配置文件中的名称一致</span></span><br><span class="line">   <span class="keyword">private</span> String msg2;<span class="comment">//此处的名称不一定和配置文件中一致</span></span><br></pre></td></tr></table></figure><ul><li>Evironment</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">System.out.println(env.getProperty(<span class="string">&quot;person.name&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>@ConfigurationProperties</li></ul><p>编写一个类方法：其中定义自己在配置文件中写的内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文件</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;name&#125;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">address:</span></span><br><span class="line">    <span class="string">-beijing</span></span><br><span class="line">    <span class="string">-shanghai</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类方法</span></span><br><span class="line"><span class="keyword">package</span> com.baibai.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//表示person类被spring识别</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><span class="comment">//指定是哪一个对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getAddress() &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String[] address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + Arrays.toString(address) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在控制台获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(person);</span><br><span class="line">        String[] address = person.getAddress();<span class="comment">//获取数组的方法</span></span><br><span class="line">        <span class="keyword">for</span>(String s : address)&#123;<span class="comment">//从address中循环获取值，赋给s</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>由于同一套程序会处于不同的开发，测试，生产环境，因此profile提供一下了一种功能来进行动态配置切换。不同环境下配置的动态切换</p><h4 id="profile配置方式"><a href="#profile配置方式" class="headerlink" title="profile配置方式"></a>profile配置方式</h4><h6 id="多profile文件方式"><a href="#多profile文件方式" class="headerlink" title="多profile文件方式"></a>多profile文件方式</h6><p>dev开发，pro生产，test测试</p><p><img src="https://user-images.githubusercontent.com/116374553/235824617-667a522c-b81f-4d32-b184-644b3cbacbb2.png" style="zoom:67%;" /></p><p>在application.properties中激活profile</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#激活profile，其等号右边与后缀名相同</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></table></figure><h6 id="yml多文档方式"><a href="#yml多文档方式" class="headerlink" title="yml多文档方式"></a>yml多文档方式</h6><p>在同一yaml文件中编写不同环境的配置，并在最后激活profile即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多文档方式</span></span><br><span class="line"><span class="comment">#以三根‘-‘来分隔不同的环境配置</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="comment">#配置运行信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#激活profile</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h4 id="profile激活方式"><a href="#profile激活方式" class="headerlink" title="profile激活方式"></a>profile激活方式</h4><h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><p>上方讲述中已经提到了</p><h6 id="虚拟机参数"><a href="#虚拟机参数" class="headerlink" title="虚拟机参数"></a>虚拟机参数</h6><p><img src="https://user-images.githubusercontent.com/116374553/235864213-070ff5e3-f80e-4db0-b988-d115df0e9fa3.png" style="zoom:67%;" /></p><p>点击Demo2这个地方，选择Eidt Configurations</p><p>然后选择Modify options,选择其中的add vm option</p><p>然后选择成功后在该处写下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=dev  //等号后面是激活的配置</span><br></pre></td></tr></table></figure><h6 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h6><p>与选取add vm option的方式相同，在同一目录下选择Program argument</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--spring.profiles.active=dev</span><br></pre></td></tr></table></figure><h3 id="内部配置加载顺序"><a href="#内部配置加载顺序" class="headerlink" title="内部配置加载顺序"></a>内部配置加载顺序</h3><h4 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h4><p>SpringBoot程序启动时，会从以下位置加载配置文件：</p><p>1.file:./config：当前项目下的/config目录下</p><p>2.file:./：当前目录的根目录</p><p>3.classpath:/config/：classpath的/config目录</p><p>4.classpath:/：classpath根目录</p><p>加载顺序入上排序顺序，高优先级配置的属性会生效</p><p>项目打包的时候会将java和resources打包到classpath下</p><p>而我们的<strong>①</strong>resources中的properties是最低的，然后在<strong>②</strong>resources中再创建一个config文件夹，其中的properties的等级优先于之前的那个</p><p>而我们每一个小的项目会放在一个大的文件夹中，<strong>③</strong>可以点击Project Files打开，并在其中添加properties即可获取更高配置优先级，在<strong>④</strong>同级目录下创建config文件夹，可以配置优先级更高的配置文件</p><p><img src="https://user-images.githubusercontent.com/116374553/235923279-453ac493-600d-4486-9e78-e6271610c24c.png" alt=""></p><p>其中demo，demo2，springboot-config均存放在SpringBoot文件夹下</p><h4 id="配置的加载（互补加载）"><a href="#配置的加载（互补加载）" class="headerlink" title="配置的加载（互补加载）"></a>配置的加载（互补加载）</h4><p>在配置文件中写</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改项目的访问路径 默认值为/ 此处的是项目的访问路径</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>而在我们的controller中用RequestMapping规定的路径则是资源路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部分代码</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">//此处的/hello是资源的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello config&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在浏览器中访问的时候</p><p>localhost:端口/hello  访问的是项目</p><p>localhost:端口/hello/hello 访问的是资源</p><p>但是如果没有在配置文件中规定项目的访问路径，那么就可以直接使用  localhost:端口/hello  来访问我们的资源</p><h3 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h3><h4 id="springboot外部加载"><a href="#springboot外部加载" class="headerlink" title="springboot外部加载"></a>springboot外部加载</h4><p><img src="https://user-images.githubusercontent.com/116374553/235935885-9932a068-3056-47cc-b924-c431ab019e7d.png" alt=""></p><h4 id="外部加载常用"><a href="#外部加载常用" class="headerlink" title="外部加载常用"></a>外部加载常用</h4><h6 id="1-Command-line-argument-命令行"><a href="#1-Command-line-argument-命令行" class="headerlink" title="1.Command line argument(命令行)"></a>1.Command line argument(命令行)</h6><p>此时打包小项目的时候，没有将整个项目工程的properties打包进来，因为主项目不满足maven的结构</p><p>将项目用package命令打包成jar包，在target目录下去找到打包的jar包，在此处进入终端，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\springboot-config-0.0.1-SNAPSHOT.jar --server.port=8082</span><br></pre></td></tr></table></figure><p>此时就可以改变项目的端口信息</p><p>在命令行中可以输入多个配置参数，其中利用空格隔开即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\springboot-config-0.0.1-SNAPSHOT.jar --server.port=8082 --server.servlet.context-path=/hhha</span><br></pre></td></tr></table></figure><p>也可以引用外部的配置文件，使用spring.config.locatioin=配置文件的绝对路径</p><h6 id="2-自动加载（12-14）"><a href="#2-自动加载（12-14）" class="headerlink" title="2.自动加载（12~14）"></a>2.自动加载（12~14）</h6><p>在打包项目为jar包之后（jar包存放在target目录下）</p><p><strong>①</strong>在jar包的同级目录下配置properties，可以自动读取配置信息</p><p><strong>②</strong>在target目录下创建config文件夹，在其中配置properties</p><p>②&gt;①</p><p><strong>外部加载会优先生效，会覆盖内部的相关配置（多文件互补）</strong></p><h2 id="SpringBoot整合其他框架"><a href="#SpringBoot整合其他框架" class="headerlink" title="SpringBoot整合其他框架"></a>SpringBoot整合其他框架</h2><h3 id="SpringBoot整合junit"><a href="#SpringBoot整合junit" class="headerlink" title="SpringBoot整合junit"></a>SpringBoot整合junit</h3><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><ul><li>搭建springboot工程</li><li>引入starter-test起步依赖</li><li>编写测试类</li><li>添加测试相关注解<ul><li>@RunWith（SpringRunner.class)</li><li>@SpringBootTest（class=启动类.class)（此处的启动类.class可以去mian中的引导类中去找）</li></ul></li><li>编写测试方法</li></ul><p><strong>搭建springboot工程</strong>（使用快速搭建即可）</p><p>此时需要在我们的<strong>main中的java下的包中，添加UserService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>引入test起步依赖</strong>：自动配置springboot的时候已经在properties中配置好了</p><p><strong>编写测试类</strong>：在test的java下创建包com.xxx.test，然后在包下写上UserServiceTest的java类</p><p><strong>添加测试相关注释</strong>：上述所加，此时可能需要引入junit的坐标</p><p><strong>编写测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes=SpringbootTestApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;<span class="comment">//定义了一个UserService的变量，用userService调用方法</span></span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//测试方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：main的文件夹的com.xxx一定要和test中的com.xxx相同，否者会报错。错误后修改，需要重新加载maven</p><p>如果test中的包是main中的com这个包的子包或者和他一样，则不需要在测试类中SprintBootTest中指定classes</p><p><img src="https://user-images.githubusercontent.com/116374553/235991090-e213ab1c-edc1-4ff3-b0e6-193d22433910.png" style="zoom:67%;" /></p><p>此时的springboottest下的UserServiceTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合Redis-了解没有配置相应数据库"><a href="#SpringBoot整合Redis-了解没有配置相应数据库" class="headerlink" title="SpringBoot整合Redis(了解没有配置相应数据库)"></a>SpringBoot整合Redis(了解没有配置相应数据库)</h3><h4 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h4><ul><li>搭建SpringBoot工程</li><li>引入redis起步依赖</li><li>配置redis相关属性</li><li>注入RedisTemplate</li><li>编写测试方法，测试</li></ul><p>搭建springboot，勾选Nosql(非关系型数据库)中的redis</p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootRedisApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;<span class="comment">//注入redisTemplate</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">&quot;name&quot;</span>).set(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.boundValueOps(<span class="string">&quot;name&quot;</span>).get();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;<span class="comment">//本机的redis可以不用配置，默认端口6379</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="comment">#redis的主机ip</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5555</span></span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合MyBatis-持久层框架-—类似于JDBC"><a href="#SpringBoot整合MyBatis-持久层框架-—类似于JDBC" class="headerlink" title="SpringBoot整合MyBatis(持久层框架)—类似于JDBC"></a>SpringBoot整合MyBatis(持久层框架)—类似于JDBC</h3><h4 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h4><ul><li>搭建SpringBoot工程</li><li>引入mybatis起步依赖，添加mysql驱动</li><li>编写DataSource和MyBatis的相关配置</li><li>定义表和实体类</li><li>编写dao和mapper文件/纯注解开发</li><li>测试</li></ul><p>搭建SpringBoot工程，其中选择SQL中的mybatis框架，并且选择MySQL Driver，此时需要在project Strecture，点击Global Libraries，选择mysql.connector并且选择最新的版本，然后在依赖中填写其版本即可正常运行。</p><p>在Navicat中写一张数据库表此处以t_user为例</p><p><img src="https://user-images.githubusercontent.com/116374553/236516882-1a3c906c-c8ac-44a1-a387-79602a0bceef.png" alt=""></p><p>然后在main的java包下的启动类的同级目录下创建domain文件夹，并编写User实体类（在其中映射数据库表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baibai.springbootmybatis.domain;</span><br><span class="line"><span class="comment">//映射数据库表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">user</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#datasource此时连接的是本地的mysql</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///springboot</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Xiong135</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#datasource不是本地mysql</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:/127.0.0.1:3306/TE</span> <span class="string">ST</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Xiong135</span></span><br><span class="line"><span class="comment">#mybatis的配置信息如果是注解开发就不用写</span></span><br></pre></td></tr></table></figure><p>①注解开发</p><p>在启动类的同级目录下，增加一个mapper文件夹，并在其中编写一个UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baibai.springbootmybatis.mapper;</span><br><span class="line"><span class="keyword">import</span> com.baibai.springbootmybatis.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//定义数据类型，定义一个接口，查找数据</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，在test文件夹下注入对应的mapper接口</p><h2 id="启动springboot"><a href="#启动springboot" class="headerlink" title="启动springboot"></a>启动springboot</h2><p>将springboot项目打包成jar包</p><p>在idea项目的右侧点开maven，点击Lifecycle，选择package，打包成功之后，在资源管理器的target目录下找到jar包，同时在该目录下打开电脑终端，然后运行以下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\demo2-0.0.1-SNAPSHOT.jar //其中.\后是运行的jar包的名称</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/235872029-35552cd8-0821-46b5-96dc-2bf6ac165d2c.png" alt=""></p><p>此时如果想确定程序的端口可以直接命令行执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\demo2-0.0.1-SNAPSHOT.jar --spring.profiles.active=pro</span><br></pre></td></tr></table></figure><h2 id="SpringBoot原理分析"><a href="#SpringBoot原理分析" class="headerlink" title="SpringBoot原理分析"></a>SpringBoot原理分析</h2><h3 id="SpringBoot自动配置"><a href="#SpringBoot自动配置" class="headerlink" title="SpringBoot自动配置"></a>SpringBoot自动配置</h3><p><strong>Condition</strong></p><p>condition是条件判断功能，用于选择性的创建Bean(Spring IOC容器的管理对象)操作</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/6f180d3a-2a9e-44cc-8c6a-6bed586d9ec4" alt=""></p><h3 id="SpringBoot监听机制"><a href="#SpringBoot监听机制" class="headerlink" title="SpringBoot监听机制"></a>SpringBoot监听机制</h3><h3 id="SpringBoot启动流程分析"><a href="#SpringBoot启动流程分析" class="headerlink" title="SpringBoot启动流程分析"></a>SpringBoot启动流程分析</h3><h2 id="SpringBoot监控"><a href="#SpringBoot监控" class="headerlink" title="SpringBoot监控"></a>SpringBoot监控</h2><h2 id="SpringBoot项目部署"><a href="#SpringBoot项目部署" class="headerlink" title="SpringBoot项目部署"></a>SpringBoot项目部署</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM</title>
      <link href="/2023/08/09/VM%E7%BC%96%E5%86%99/"/>
      <url>/2023/08/09/VM%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h1><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>通过直接在终端中加载loader程序即可，程序可以进行debug调试指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./Loader input.txt -nd (debug模式)</span><br><span class="line">./Loader input.txt -d (normal模式)</span><br></pre></td></tr></table></figure><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><h5 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h5><p><img src="https://s2.loli.net/2024/08/31/AFZU3PXOWSQJnlc.png" alt="image.png"></p><h5 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h5><p><img src="https://s2.loli.net/2024/08/31/EY7AQgCjTxtGpMN.png" alt="image.png"></p><p><img src="https://s2.loli.net/2024/08/31/oYBdbu2sP1tRrm4.png" alt="image.png"></p><p><img src="https://s2.loli.net/2024/08/31/3WZ74iPYmycLTSV.png" alt="image.png"></p><p><img src="https://s2.loli.net/2024/08/31/evlNc1Ju9Bx5dL3.png" alt="image.png"></p><h5 id="debug模式下："><a href="#debug模式下：" class="headerlink" title="debug模式下："></a><strong>debug模式下</strong>：</h5><p>①输入其他非法指令将直接终止程序</p><p>②F7是单步，F8是步过</p><p>③c代表查看栈或者数据段信息：输入s查看栈，d查看数据段，q退出</p><p>​                                                         b代表往后查看，f代表往前查看</p><h5 id="路径配置："><a href="#路径配置：" class="headerlink" title="路径配置："></a>路径配置：</h5><p>运行前需要确定Loader程序源码中的VM.dll动态链接库的路径是否正确</p><h5 id="检测调试器"><a href="#检测调试器" class="headerlink" title="检测调试器"></a>检测调试器</h5><p>程序具有一定的检测调试器的功能，当在x64_dbg等软件中运行程序时会报错</p><h3 id="文件作用"><a href="#文件作用" class="headerlink" title="文件作用"></a>文件作用</h3><p><strong>Loader文件夹</strong>:加载程序源码（其中包含debug模式源码，检测调试器源码)</p><p><strong>VM文件夹</strong>:vm指令执行源码</p><p><strong>assetobin.py</strong>：将指令转为二进制编码</p><p><strong>input.txt</strong>:指令文件(目前已经写好一个指令，可以直接运行)</p><p><strong>output.bin</strong>:存储指令转换为的二进制编码</p><p><strong>instructions_annotation.txt</strong>：指令集和寄存器说明信息</p><blockquote><p> 详细代码请见:<a href="https://github.com/WhiteIsBlank/VM">https://github.com/WhiteIsBlank/VM</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 2023 </tag>
            
            <tag> 暑假考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2023/08/09/Maven/"/>
      <url>/2023/08/09/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h3 id="maven简介"><a href="#maven简介" class="headerlink" title="maven简介"></a>maven简介</h3><p>基于java平台的项目构建，依赖管理和项目信息管理。</p><h3 id="项目构建工具"><a href="#项目构建工具" class="headerlink" title="项目构建工具"></a>项目构建工具</h3><p>打包项目即是项目构建</p><p><strong>Ant构建、Maven、Gradle</strong></p><h3 id="Maven特性"><a href="#Maven特性" class="headerlink" title="Maven特性"></a>Maven特性</h3><p>1.依赖管理系统</p><p>坐标属性简介</p><p>maven坐标为各种组件引入秩序，任何一个组件都必须明确定义自己的坐标</p><ul><li>groupld（公司名称）</li><li>artifactld（当前公司项目）</li><li>version（项目版本）</li></ul><p>2.多模块构建</p><p>将一个项目分为多个模块</p><p>3.一致的项目结构</p><p>统一java的项目结构（不同编辑器导致不同的改进）</p><p>4.一致的构建模型和插件机制</p><h3 id="Maven目录结构"><a href="#Maven目录结构" class="headerlink" title="Maven目录结构"></a>Maven目录结构</h3><div class="table-container"><table><thead><tr><th>目录</th><th>目的</th></tr></thead><tbody><tr><td>${basedir}</td><td>存放pom.xml(配置文件)和所有的子目录</td></tr><tr><td>${basedir}/src/main/java</td><td>项目的java源码</td></tr><tr><td>${basedir}/src/main/resources</td><td>项目的资源，比如说property文件</td></tr><tr><td>${basedir}/src/test/java</td><td>项目的测试类，比如说JUnit代码</td></tr><tr><td>${basedir}/src/test/resources</td><td>测试使用的资源</td></tr></tbody></table></div><h3 id="Maven命令"><a href="#Maven命令" class="headerlink" title="Maven命令"></a>Maven命令</h3><p>格式：mvn [plugin-name]:[goal -name]</p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><div class="table-container"><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mvn -version</td><td>显示版本信息</td></tr><tr><td>mvn clean</td><td>清理项目产生的临时文件，一般是模块下的target目录</td></tr><tr><td>mvn compile</td><td>编译源代码，一般编译模块下的src/main/java目录</td></tr><tr><td>mvn package</td><td>项目打包工具，会在模块下的target目录生成jar或war等文件</td></tr><tr><td>mvn test</td><td>测试命令，或执行src/test/java下junit的测试用例</td></tr><tr><td>mvn install</td><td>将打包的jar/war文件复制到你的本地仓库中，供其他模板优先使用</td></tr><tr><td>mvn deploy</td><td>将打包的文件发布到远程参考，提供其他人员进行下载的依赖</td></tr><tr><td>mvn site</td><td>生成项目相关信息的网站</td></tr><tr><td>mvn eclipse:eclipse</td><td>将项目转换为eclipse项目</td></tr><tr><td>mvn dependency:tree</td><td>打印出项目的整个依赖树</td></tr><tr><td>mvn archetype:generate</td><td>创建Maven的普通java项目</td></tr><tr><td>mvn tomcat7:run</td><td>在tomcat容器中运行web项目</td></tr><tr><td>mvn jetty:run</td><td>调用jetty插件的Run目标在Jetty Servlet容器中启动Web应用</td></tr></tbody></table></div><p>使用maven指令的时候，一定要定位到maven项目的目录，也就是pom.xml文件所在的目录</p><h5 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h5><h6 id="D"><a href="#D" class="headerlink" title="-D"></a>-D</h6><p>以-D开头，将maven</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统</title>
      <link href="/2023/08/09/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/08/09/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="图书管理系统"><a href="#图书管理系统" class="headerlink" title="图书管理系统"></a>图书管理系统</h4><h5 id="准备环境："><a href="#准备环境：" class="headerlink" title="准备环境："></a>准备环境：</h5><h6 id="数据库表-tb-brand（自行修改）"><a href="#数据库表-tb-brand（自行修改）" class="headerlink" title="数据库表 tb_brand（自行修改）"></a>数据库表 tb_brand（自行修改）</h6><p><img src="https://user-images.githubusercontent.com/116374553/210260857-660b0665-26da-4a5d-82c6-d13383ae011e.png" alt=""></p><h6 id="实体类-Brand"><a href="#实体类-Brand" class="headerlink" title="实体类 Brand"></a>实体类 Brand</h6><p>在我们的项目的pojo包中创建一个新的类Brand，在我们的实体类中建议基本数据类型都用我们的包装类型</p><p>按Alt和鼠标左键可以整列的修改内容</p><p><img src="https://user-images.githubusercontent.com/116374553/210261145-e18e8c00-4c80-4219-9bcc-7095bc33a9d6.png" alt=""></p><p>然后引入我们的setter和getter方法</p><p>并且使用toString方法</p><h6 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h6><p>放在另一个自己生成的包下</p><p>创建一个新的类来写我们之后的操作</p><p>标红的是我们需要关注的内容</p><p><img src="https://user-images.githubusercontent.com/116374553/210261674-319bb058-41a5-4cb3-89f5-3f1db80ebfcd.png" alt=""></p><p>​      操作：</p><p>​         <strong><em>查询：</em></strong>其余为jdbc的统一格式</p><p><img src="https://user-images.githubusercontent.com/116374553/210262276-28ef26c3-39bf-44fe-9338-494433b7d098.png" alt=""></p><p>​         <strong><em>增加：</em></strong>用户不能更改id，只能自增。但是其余内容都需要有用户自己来进行更改</p><p><img src="https://user-images.githubusercontent.com/116374553/210262946-59835e1f-8862-4179-a9a6-4a05055f2fbb.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/210262949-258ab3b9-290c-4c59-a828-49a13ca02019.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/210262952-cd66884f-7bdd-4c6c-9aee-afbdc5175a52.png" alt=""></p><p>​         <strong><em>删除</em></strong>：</p><p><img src="https://user-images.githubusercontent.com/116374553/210263687-d766cafa-1e6c-4e47-9403-6eabe1098f18.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/210263695-0e881367-710e-4729-b8a7-016be910e481.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/210263702-089624e9-6e5f-4304-ae01-6a1ba5797676.png" alt=""></p><p>​         <strong><em>修改：</em></strong></p><p><img src="https://user-images.githubusercontent.com/116374553/210264278-a58afde4-58de-443f-9dc8-7e27dc04452c.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/210264281-083769ea-1513-40b5-a81b-14c6e8eb9800.png" alt=""></p><p>​        jf.setLayout(new FlowLayout(FlowLayout.LEFT));</p><p>​        jf.setResizable(false);//禁止最大化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Box b = Box.createHorizontalBox();</span><br><span class="line">jf.add(b);</span><br><span class="line">jf.setVisible(true);</span><br><span class="line">jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);//关闭页面的方式</span><br><span class="line">JButton jb = new JButton(&quot;登录&quot;);//创建登录按钮</span><br><span class="line">JPanel jp = new JPanel(new FlowLayout());//创建一个面板，并传入一个布局</span><br><span class="line">jf.add(jb);</span><br></pre></td></tr></table></figure><pre><code>    jf.setSize(700,500);//设置页面的大小    jf.setLocation(900,400);//设置控制面板的位置</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    Box b2 = Box.createHorizontalBox();//创建一个容器</span><br><span class="line">jf.add(b2);//将外层横向Box添加进窗体</span><br><span class="line">JLabel Produce = new JLabel(&quot;请做出你的选择&quot;,SwingConstants.CENTER);//使其居中</span><br><span class="line">jf.add(Produce);</span><br><span class="line">b2.add(Box.createVerticalStrut(200));//添加高度框架</span><br><span class="line">b2.add(Box.createHorizontalStrut(800));//添加宽度框架</span><br><span class="line">b2.add(Box.createHorizontalGlue());//添加水平胶水</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 后端练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷宫问题相关题目</title>
      <link href="/2023/08/09/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/"/>
      <url>/2023/08/09/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="迷宫问题相关题目"><a href="#迷宫问题相关题目" class="headerlink" title="迷宫问题相关题目"></a>迷宫问题相关题目</h1><h3 id="buu-maze"><a href="#buu-maze" class="headerlink" title="buu_maze"></a>buu_maze</h3><p>先用Die打开文件，发现是ELF64位文件。用IDA64打开。</p><p>首先进行字符串查找，发现flag字符，打开该处的反汇编代码。总体观察函数，会发现结尾有一个分支语句，当asc_601060数组中的某一个值等于‘#’，就会出现”Congratulations!”。往上会有一个大的while循环，当v3的数值大于s1数组索引长度时，如果满足v5不为0则结束循环。然后前面有几个分支语句的判断会对v6赋值，之后v6赋值给v5。</p><p>main函数在输入s1后，出现了一个if判断语句，当它没有判断成功时，程序才会往下继续执行。</p><p><img src="https://user-images.githubusercontent.com/116374553/223597000-780ff1a6-ad07-4666-a910-fb2840fe7242.png" alt=""></p><p>由此处可以知道s1数组的长度为24，且s1数组的前五个字符为”nctf{“,然后数组*(byte_6010BF + 24)的值是‘}’;</p><p>继续往下是一个大的while循环;</p><p>判断v4的值，分别进行了4种不同运算。</p><p>往下分析是一个if判断，如果成立就会直接跳转到LABEL_21，判断错误，退出程序。因此要使得其中函数的返回值为非零值</p><p>分析sub_400690函数</p><p><img src="https://user-images.githubusercontent.com/116374553/223623635-a8440f29-ac33-40f7-89f7-47adbc39b8b0.png" alt=""></p><p>返回的结果是result的值，其中的a1是数组asc_601060的地址，a2为v10[0]的值，a3为v9的值</p><p>asc_601060数组（由此也可粗略的判断这是一道迷宫问题）：</p><p><img src="https://user-images.githubusercontent.com/116374553/223624529-a4258e63-5741-46d0-9739-6934801c833e.png" alt=""></p><p>在sub_400690函数中，result的值是赋值等式的结果取十六进制数的最低位的值，即当result等于‘ ’或是‘#’时返回1，为‘*’时返回0。</p><p>即‘#’为出口，‘ ’为通路，‘*’为墙。</p><p>与此同时result的第一次赋值时是取asc_601060数组的初始地址，进行了两次的偏移，第一次是a2，第二次是8*a3。由此可以很容易的知道迷宫的长度为8，并且v10[0]为左右向，v9为上下向。</p><p>即可得到迷宫：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  ******</span><br><span class="line">*   *  *</span><br><span class="line">*** * **</span><br><span class="line">**  * **</span><br><span class="line">*  *#  *</span><br><span class="line">** *** *</span><br><span class="line">**     *</span><br><span class="line">********</span><br></pre></td></tr></table></figure><p>之后再对之前的四个分支语句进行逐一的分析。</p><p>其中sub_400650和sub_400670，sub_400660和sub_400680函数内容相同</p><p>sub_400650函数</p><p><img src="https://user-images.githubusercontent.com/116374553/223627248-d29c2c7a-b622-4336-a9b6-9d593eb1a164.png" alt=""></p><p>对输入的数值进行减一的操作（均是对v10和v9相应地址的值进行了改变），当超过迷宫大小范围时则返回0</p><p>sub_400660函数</p><p><img src="https://user-images.githubusercontent.com/116374553/223627604-41882521-8a1f-4423-94cf-2e2d56b1a37b.png" alt=""></p><p>对输入的数值进行加一操作，当超过迷宫大小范围时则返回0</p><p>结合之前对v10和v9移动的大致方向的判断，就可以得出当v4 == ‘O’(左)，v4 == ‘o’(右)，v4 == ‘.’(上)，v4 == ‘0’(下)</p><p>得出flag为nctf{o0oo00O000oooo…OO}</p><h3 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h3><p>先将程序拖入Die中，得知是以个32位的程序</p><p>从打印的一些字符来看，很容易的得知是一道迷宫问题</p><p>迷宫数组v3为：“*11110100001010000101111#”</p><p>由while循环的最后两个分支可知，‘1’为墙，‘#’为出口。</p><p><img src="https://user-images.githubusercontent.com/116374553/223636154-5dd512ca-453d-46b0-ab76-93ae868fcf3a.png" alt=""></p><p>其中v7数组的初始位置和v3数组的初始位置刚好相差41位，则可以直接将v7[5 <em> </em>(_DWORD <em>)&amp;v3[25] - 41 + v4]看做v3[5</em>v3[25] + v4]，由此可知v3初始位置为迷宫起点，v3[25]为上下向，v4为左右向。与此同时迷宫的长度为5</p><p>可得到迷宫：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*1111</span><br><span class="line">01000</span><br><span class="line">01010</span><br><span class="line">00010</span><br><span class="line">1111#</span><br></pre></td></tr></table></figure><p>最终得到flag为flag{222441144222}</p><h3 id="攻防世界-easy-maze"><a href="#攻防世界-easy-maze" class="headerlink" title="攻防世界_easy_maze"></a>攻防世界_easy_maze</h3><p>将程序拖入Die发现是一个64位ELF文件，用IDA64打开，查看main函数。</p><p><img src="https://user-images.githubusercontent.com/116374553/227716456-2bfd5f9f-30d3-4d29-b813-2ff247c4042b.png" alt=""></p><p>程序中Step_0函数是给v6数组中未赋值的内容进行赋值的，Step_1是用赋值之后的v6去给v5进行赋值，最终得到迷宫的地图，再将地图传入Step_2</p><p>当分析到Step_1函数的时候发现，在函数中有个getAStart函数</p><p><img src="https://user-images.githubusercontent.com/116374553/227717022-89cb9036-190d-4eaf-b7ab-190f8068a8c4.png" style="zoom: 33%;" /></p><p>进入该函数后又有一个getA函数</p><p><img src="https://user-images.githubusercontent.com/116374553/227717024-1a56b044-140e-45f4-b703-a6dc3f21678c.png" style="zoom: 33%;" /></p><p>进入getA函数后就会一直循环的进入同一个getA函数，导致无法分析程序</p><p><img src="https://user-images.githubusercontent.com/116374553/227717029-f2484a83-3c51-4e6e-aa3c-6d02b61bf1f3.png" style="zoom:33%;" /></p><p>于是只能通过动态调试的方法来得到地图，此处使用IDA远程动态调试linux的文件</p><p>在Step_1函数处下一个断点，F9运行，进入动态调试界面后，单步F8步过函数，直接到v3，将鼠标箭头放置到v5数组处，即可看见v5数组已经被赋值了，记下赋值的内容</p><p><img src="https://user-images.githubusercontent.com/116374553/227716458-f2ebee57-442b-42e3-a739-ca5cba482f31.png" alt=""></p><p>进入Step_2函数，其中出现了(<em>a1)[7 </em> v10 + v9] == 1</p><p>由此可以看出，v10应该为迷宫的上下向，v9为左右向，并且迷宫每七个字符为一行（7列），由于v10和v9均为0，则迷宫的起点为（0,0）。while循环仅在a1数组取值为1的时候执行，可以知道1为通路，0为墙。在函数的末尾处有一个双分支的判断语句当v10 == 6 &amp;&amp; v9 == 6时，则走迷宫成功，可以得知终点为（6,6）。接着分析方向，由于v9为左右向，那么++v9就为右，—v9为左，v10同理，得出方向‘d’右，‘s’下，‘w’上，’a‘左。</p><p><img src="https://user-images.githubusercontent.com/116374553/227717296-a5f741d3-e528-47c9-b2a4-6dd24b5e0153.png" style="zoom: 50%;" /></p><p>迷宫图像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1001111</span><br><span class="line">1011001</span><br><span class="line">1110111</span><br><span class="line">0001100</span><br><span class="line">1111000</span><br><span class="line">1000111</span><br><span class="line">1111101</span><br></pre></td></tr></table></figure><p>可知迷宫的行数也为7</p><p>将以上的条件代入自动走迷宫脚本</p><p><img src="https://user-images.githubusercontent.com/116374553/227718708-be2af14e-4174-4276-bb0b-4bfbd6cc023b.png" alt=""></p><p>得到路径ssddwdwdddssaasasaaassddddwdds</p><p>在Step_2处下断点，再次对程序进行动态调试，并且在终端中输入得到的结果，用F8步过函数，即可得到flag</p><p><img src="https://user-images.githubusercontent.com/116374553/227718709-720ff66e-1a1f-430a-a3b4-e854f6316031.png" alt=""></p><p>最终得到flag为UNCTF{ssddwdwdddssaasasaaassddddwdds}</p><p>总结：①在程序陷入无限循环导致无法自主得出一部分内容的时候，可以选择动态调试，跳过某一过程直接获取数值</p><p>​            ②对于得到一大堆数据内容（没有任何的符号），但又需要将其变为数组的时候，可以考略利用python，input循环输入（直接将数据复制粘贴到输入框中），再打印将其变为元组即可。</p><p>​            ③对于linux中的ELF文件动态调试除了使用IDA，还可以直接在linux中利用gdb进行调试（需要进一步学习）</p><h3 id="buu-HDCTF2019-maze"><a href="#buu-HDCTF2019-maze" class="headerlink" title="buu_[HDCTF2019]maze"></a>buu_[HDCTF2019]maze</h3><p>脱壳博客中</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.当遇到题目中含有并未赋值的数组却又需要用，可能需要考略它的地址是否和其他变量的地址有一定联系。</p><p>2.分析程序时尽可能的找到关键点（字符串等）。</p><p>3.对于反汇编代码中的一些int型数据，可以考略转换为char类型。</p><p>大多的迷宫问题，一般不仅仅只是专注于迷宫问题，其中还会伴随着ELF文件的动态调试（例如：通过动态态调试寻找迷宫图像）、对程序的脱壳等一系列的其他问题。这些问题都还</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 迷宫问题 </tag>
            
            <tag> 逆向题目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC数据库连接</title>
      <link href="/2023/07/20/JDBC/"/>
      <url>/2023/07/20/JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC数据库连接"><a href="#JDBC数据库连接" class="headerlink" title="JDBC数据库连接"></a>JDBC数据库连接</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JDBC（一套接口）是使用java语言操作的关系型数据库的一套API</span><br><span class="line">java数据库连接</span><br><span class="line">MySQL对JDBC的驱动（实现）注册驱动可以不写</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210243553-04608566-874d-412e-a6e2-a8937e64e90c.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">新建一个project——&gt;创建一个新模块Modules——&gt;创建Directory（导入驱动代包）——&gt;点击Add as Library（识别驱动代包）——&gt;选择模块有效（Module Library）——&gt;在src中写程序</span><br><span class="line"></span><br><span class="line">JDBC API</span><br><span class="line">1.DriverManager 可在url后?useSSL=false</span><br><span class="line">2.Connection</span><br><span class="line">事物管理</span><br><span class="line">开启事务：setAutoCommit(boolean autoCommit) true为自动提交事务；false为手动提交事务，即为开启事务</span><br><span class="line">提交事务：commit()</span><br><span class="line">回滚事务:rollback()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210247179-da36eee2-38b4-40c1-8ad9-6939f5de1c85.png" alt="屏幕截图 2023-01-02 223952"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.Statement（执行SQL语句）：executrUpdate（sql）</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210248760-17e187f7-5a17-4f10-bd12-d3b5da87b74f.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">4.ResultSet（结果及对象）</span><br><span class="line">封装了DQL查询语句的结果：ResultSet stmt.executeQuery(sql):执行DQL语句，返回对象ResultSet</span><br><span class="line">两个方法：①boolean next（）方法（将光标下移，判断当前行是否为有效行）</span><br><span class="line">        ②xxx getXxx（参数）——&gt;xxx是表示的数据的类型</span><br><span class="line">        参数：int：列的编号，从1开始</span><br><span class="line">             String：列的名称</span><br><span class="line">        用循环来实现该方法</span><br><span class="line">        while（rs.next（））&#123;</span><br><span class="line">        //获取数据</span><br><span class="line">        rs.getXxx(参数)；</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">一般情况下如果要将查询的数据展现（可以将其存放在数组中），新建一个包（pojo一般用来存放实体类的），并在其中创建一个新的类叫Account，并且在类中定义私有的id、name等等——&gt;之后使用getter和setter方法，并且使用toString方法让我们直观可见</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210251908-b739d6c7-af94-45b6-86b0-216fb4305160.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/210252386-6845a683-a3e9-4a48-8a95-c68696aa7f41.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最后可以用system.out.println(list)来访问集合</span><br><span class="line">5.PreparedStatement（继承Statement）</span><br><span class="line">预编译SQL语句并执行（性能更高）：预防SQL注入问题</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210254162-3adcc0d1-b5f4-4740-a1b0-9d536ec9642a.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">为了避免SQL注入（此方法是将输入的内容类似于‘的符号，全部加上了转义字符，表示其是文本形式，我们将username，password后面的拼接改为 username = ？ and password = ？</span><br><span class="line">修改后的，之后的释放资源中的stmt需要更改为pstmt</span><br><span class="line">之后依旧要判断是否登录成功</span><br><span class="line">其中pstmt.setXxx()会转义我们输入的内容，达到之前所说的效果</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210255511-54140234-49c9-4844-a761-15d5bba478f5.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/210255811-7705babc-28f1-4da0-9409-2d9308aa583c.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开PreparedStatement的预编译功能，在我们的URL后面加&amp;useSeverPrepStmts=true</span><br><span class="line">如果想要多次的去执行我们的预编译，可以在前面对我们的对象进行声明（尽管我们执行了两次预编译但是我们对SQL语句的检查只会执行一次）</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210257077-af5a6413-2506-47e2-86d5-d4da2f6c6df2.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据库的连接池（是 个容器、负责分配。管理数据库连接）</span><br><span class="line">资源重用</span><br><span class="line">提升系统的响应速度</span><br><span class="line">避免数据库连接遗漏</span><br><span class="line">数据库连接池实现</span><br><span class="line">标准接口：DataSource</span><br><span class="line">常见数据库连接池（Druid（德鲁伊））</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210258048-f3c11e21-f728-493a-821b-8ca77364bf5a.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">①导包过程和之前导入mysql是一致的</span><br><span class="line">②Driud的配置文件，在我们定义的包中的pojo中，存在于一个properties中</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210258551-b4fe4448-d94c-48f4-bffc-f7188ae3c773.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">③加载配置文件</span><br><span class="line">④获取连接池对象</span><br><span class="line">在我们写的连接池的类中写下</span><br><span class="line">⑤获取数据库连接Connection</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/210258941-660a374a-8270-4d03-a8ac-16d15eedb72e.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">但是我们加载配置文件的路径可能会报错，所以我们还需要先system.out.println(System.getProperty(&quot;user.dir&quot;));</span><br><span class="line">以此来获取我们的一个路径，然后有文件管理器进入该路径，查看我们的properties的准确路径:</span><br><span class="line">项目名/src/druid.properties</span><br></pre></td></tr></table></figure><p>](<a href="https://user-images.githubusercontent.com/116374553/210199969-9436c809-e380-4cf7-996e-aca46194042b.png">https://user-images.githubusercontent.com/116374553/210199969-9436c809-e380-4cf7-996e-aca46194042b.png</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyre</title>
      <link href="/2023/06/14/easyre-xctf/"/>
      <url>/2023/06/14/easyre-xctf/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-easyre-xctf"><a href="#攻防世界-easyre-xctf" class="headerlink" title="攻防世界_easyre-xctf"></a>攻防世界_easyre-xctf</h1><p>1.part1部分缺失数据内容，应在汇编界面去寻找实际的数据信息</p><p><img src="https://user-images.githubusercontent.com/116374553/228751407-d96b4a42-a035-4486-ba47-a0457d229403.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/228751411-e9ab85bf-5b6d-450c-acf8-af78acd14597.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE文件结构</title>
      <link href="/2023/06/04/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2023/06/04/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h1><h2 id="Ⅰ-含义"><a href="#Ⅰ-含义" class="headerlink" title="Ⅰ.含义"></a>Ⅰ.含义</h2><p>任何一个在Windows上运行的可执行文件都要遵循一定的格式，这个格式就是PE文件的结构。比如：exe、dll、部分sys</p><p>PE文件在16进制工具内存中打开时，都是以4D 5A开头的，作为可执行文件的一个标记（MZ）</p><p>以WPS为例，运行WPS在winhex中以内存的形式打开WPS</p><p><img src="https://user-images.githubusercontent.com/116374553/230752170-8a91623d-c080-497e-a8f2-cfb22ac89ce1.png" alt=""></p><h3 id="①PE文件分节"><a href="#①PE文件分节" class="headerlink" title="①PE文件分节"></a>①PE文件分节</h3><h6 id="分节含义"><a href="#分节含义" class="headerlink" title="分节含义"></a>分节含义</h6><p>在内存和硬盘中pe文件被分为了一节一节的存放，节间空隙以0来填充</p><h6 id="PE结构是分节的原因"><a href="#PE结构是分节的原因" class="headerlink" title="PE结构是分节的原因"></a>PE结构是分节的原因</h6><ol><li>节省硬盘空间（<strong>老的编译器</strong>）</li></ol><p><img src="https://user-images.githubusercontent.com/116374553/230732307-6db32ddb-fc75-49fd-b3d1-97f5133d6ed7.png" style="zoom: 67%;" /></p><ul><li>硬盘对齐：200h</li><li>内存对齐：1000h</li></ul><p>​                                          ——硬盘对齐为了增加读写的速度</p><p>由前两点即可得知，当exe在内存中加载时会有一个拉伸的效果</p><p>即pe文件存在这两种不同的形态：磁盘文件和内存映像</p><p><strong>新的编译器（新的硬盘）</strong></p><p>对齐一致，减小了运算量</p><p><img src="https://user-images.githubusercontent.com/116374553/230750819-4bff2c1a-fb04-4694-86be-1e92a420be24.png" style="zoom:67%;" /></p><p>2.节省硬盘空间</p><p>由于<strong>多开</strong>的原因</p><p><img src="https://user-images.githubusercontent.com/116374553/230751229-c53d1692-7780-4771-a88e-6a07b231026b.png" style="zoom: 67%;" /></p><h3 id="②PE磁盘文件与内存映像的结构图"><a href="#②PE磁盘文件与内存映像的结构图" class="headerlink" title="②PE磁盘文件与内存映像的结构图"></a>②PE磁盘文件与内存映像的结构图</h3><p><img src="https://user-images.githubusercontent.com/116374553/230751953-02de5621-8e35-4a3a-ba56-d0b00fd2dc80.png" style="zoom: 67%;" /></p><h3 id="③PE文件结构图"><a href="#③PE文件结构图" class="headerlink" title="③PE文件结构图"></a>③PE文件结构图</h3><p><img src="https://user-images.githubusercontent.com/116374553/230752214-03d33392-2206-4ae3-85b2-93ddc4b6fe7c.jpg" alt=""></p><h2 id="Ⅱ-PE文件头解析"><a href="#Ⅱ-PE文件头解析" class="headerlink" title="Ⅱ.PE文件头解析"></a>Ⅱ.PE文件头解析</h2><h3 id="①DOS头-MZ文件头和DOS-Stub"><a href="#①DOS头-MZ文件头和DOS-Stub" class="headerlink" title="①DOS头(MZ文件头和DOS Stub)"></a>①DOS头(MZ文件头和DOS Stub)</h3><p>​        ——&gt;40(确定大小)</p><p>​        ——16位系统中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0x00 WORD e_magic;                *//5A4D  判断PE文件的标识符（MZ） </span><br><span class="line">0x02 WORD e_cblp;                 //</span><br><span class="line">0x04 WORD e_cp;                   //0090</span><br><span class="line">0x06 WORD e_crlc;                 //0003</span><br><span class="line">0x08 WORD e_cparhdr;              //0000</span><br><span class="line">0x0a WORD e_minalloc;             //0004</span><br><span class="line">0x0c WORD e_maxalloc;             //0000</span><br><span class="line">0x0e WORD e_ss;                   //FFFF</span><br><span class="line">0x10 WORD e_sp;                   //0000</span><br><span class="line">0x12 WORD e_csum;                 //00B8</span><br><span class="line">0x14 WORD e_ip;                   //0000</span><br><span class="line">0x16 WORD e_cs;                   //0000</span><br><span class="line">0x18 WORD e_lfarlc;               //0040</span><br><span class="line">0x1a WORD e_ovno;                 //0000 </span><br><span class="line">0x1c WORD e_res[4];               //0000 * 4</span><br><span class="line">0x24 WORD e_oemid;                //0000</span><br><span class="line">0x26 WORD e_oeminfo;              //0000</span><br><span class="line">0x28 WORD e_res2[10];             //0000*10</span><br><span class="line">0x3c DWORD e_lfanew;              *//000000E8(不尽相同)  pe文件的偏移量(从起始位置开始算)，寻找pe头的位置</span><br></pre></td></tr></table></figure><p><strong>重点</strong>：e_magic/e_lfanew</p><h3 id="②NT头"><a href="#②NT头" class="headerlink" title="②NT头"></a>②NT头</h3><p>NT头——&gt;标准PE头/<strong>可选PE头</strong></p><p>通过e_lfanew即可找到PE头</p><p><img src="https://user-images.githubusercontent.com/116374553/230752930-64b41565-ecea-42f5-a8fb-5495b629ee54.png" alt=""></p><p>在DOS头和PE头之间的数据为垃圾数据（由编译器决定）</p><h5 id="●NT头"><a href="#●NT头" class="headerlink" title="●NT头"></a>●<strong>NT头</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x00 DWORD Signature;                          //00005045 PE的标记</span><br><span class="line">0x04 _IMAGE_FILE_HEADER FileHeader;            //标准PE头</span><br><span class="line">0x18 _IMAGE_OPTIONAL_HEADRE Optional Header;   //可选PE头</span><br></pre></td></tr></table></figure><h5 id="●标准PE头"><a href="#●标准PE头" class="headerlink" title="●标准PE头"></a>●标准PE头</h5><p> ——&gt;20(确定大小)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x00 WORD Machine;           **//014C 程序运行的CPU型号:0x0任何处理器/0x14C Intel 386及后续处理器</span><br><span class="line">0x02 WORD NumberOfSections;  **//0005 文件中存在的节的总数，除了头，还有几节数据，如果要新增节或者合并节就要修改这个值</span><br><span class="line">0x04 DWORD TimeDateStamp;   *//535883B8 时间日期戳(文件创建的时间)，和操作系统无关，编译器填写</span><br><span class="line">0x08 DWORD PointerToSymbolTable;            </span><br><span class="line">0x0c DWORD NumberOfSymbols;                 </span><br><span class="line">0x10 WORD SizeOfOptionalHeader;  **//00E0 可选PE头的大小，32位PE文件默认E0h 64位PE文件默认为F0h  大小可以自定义</span><br><span class="line">0x12 WORD Characteristics;       *//0102 pe文件属性 每一位含义不同 </span><br></pre></td></tr></table></figure><h6 id="NumberOfSections"><a href="#NumberOfSections" class="headerlink" title="NumberOfSections"></a>NumberOfSections</h6><p>——除了头还有几节数据</p><p><img src="https://user-images.githubusercontent.com/116374553/230756605-29cb568f-a7ae-4ee3-9e79-bceb09c4e934.png" style="zoom:50%;" /></p><h6 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h6><p>将WORD的数据拆成一个二进制数，代表勾选的内容</p><p>例如现在我打开的程序Characteristics为0102，即：0000 0001 0000 0010（1即设置标志勾选的内容）</p><p><img src="https://user-images.githubusercontent.com/116374553/230757079-317f17c0-c18c-4ab0-823a-50640adb939b.png" alt=""></p><p><strong>重点</strong>：Machine / NumberOfSections / TimeDateStamp / SizeOfOptionalHeader / Characteristics</p><p>特别是带“**”</p><h5 id="●可选PE头-大小不确定32-64位不同"><a href="#●可选PE头-大小不确定32-64位不同" class="headerlink" title="●可选PE头(大小不确定32/64位不同)"></a>●可选PE头(大小不确定32/64位不同)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">0x00 WORD Magic; **//说明文件类型：010B-&gt;32位下的PE文件 020B-&gt;64位下的PE文件</span><br><span class="line">0x02 BYTE MajorLinkerVersion;</span><br><span class="line">0x03 BYTE MinorLinkerVersion;</span><br><span class="line">0x04 DWORD SizeOfCode; *//代码大小/所有代码节的和，必须是FileAlignment的整数倍 编译器填的 没用</span><br><span class="line">0x08 DWORD SizeOfInitializedData; *//已初始化数据大小的和，必须是 FileAlignment的整数倍 编译器填的 没用</span><br><span class="line">0x0c DWORD SizeOfUninitializedData; *//未初始化数据大小的和，必须是 FileAlignment的整数倍 编译器填的 没用 </span><br><span class="line">0x10 DWORD AddressOfEntryPoint; **//程序入口（OEP)</span><br><span class="line">0x14 DWORD BaseOfCode; *//代码开始的基址，编译器填的 没用</span><br><span class="line">0x18 DWORD BaseOfData; *//数据开始的基址，编译器填的 没用</span><br><span class="line">0x1c DWORD ImageBase; **//内存镜像基址</span><br><span class="line">0x20 DWORD SectionAlignment; **//内存对齐，区段对齐</span><br><span class="line">0x24 DWORD FileAlignment; **//文件对齐</span><br><span class="line">0x28 WORD MajorOperatingSy，stemVersion;</span><br><span class="line">0x2a WORD MinorOperatingSystemVersion;</span><br><span class="line">0x2c WORD MajorImageVersion;</span><br><span class="line">0x2e WORD MinorImageVersion;</span><br><span class="line">0x30 WORD MajorSubsystemVersion;</span><br><span class="line">0x32 WORD MinorSubsystemVersion;</span><br><span class="line">0x34 DWORD Win32VersionValue;</span><br><span class="line">0x38 DWORD SizeOfImage ; **//镜像大小/内存中整个PE文件的映射的尺寸，可以比实际的值大，但必须是SectionAlignment的整数倍（拉伸之后的大小）</span><br><span class="line">0x3c DWORD SizeOfHeaders; **// 所有头+节表，按照‘文件对齐 FileAlignment’后的大小（即如果现在加起来为1800h，要求1000h对齐，则认为大小为2000h），否则加载会出错</span><br><span class="line">0x40 DWORD CheckSum; *//校验和，一些系统文件有要求，用来判断文件是否被修改</span><br><span class="line">0x44 WORD Subsystem;</span><br><span class="line">0x46 WORD DllCharacteristics;</span><br><span class="line">0x48 DWORD SizeOfStackReserve; *//初始化时保留的堆栈大小</span><br><span class="line">0x4c DWORD SizeOfStackCommit; *//初始化时实际提交的大小</span><br><span class="line">0x50 DWORD SizeOfHeapReserve; *//初始化时保留的堆大小</span><br><span class="line">0x54 DWORD SizeOfHeapCommit; *//初始化时实际提交的大小</span><br><span class="line">0x58 DWORD LoaderFlags;</span><br><span class="line">0x5c DWORD NumberOfRvaAndSizes; *//目录项数目，RVA数目和大小</span><br><span class="line">0x60 _IMAGE_DATA_DIRECTORY DataDirectory[16]; 16个结构体，每个结构体是8个字节</span><br></pre></td></tr></table></figure><p>程序在内存中真正的地址：内存镜像基地址+OEP</p><p>​                                   原因：ImageBase的地址可能被抢占，为了保证被抢占了之后依旧可以运行</p><h6 id="CheckSum"><a href="#CheckSum" class="headerlink" title="CheckSum"></a>CheckSum</h6><p>用于检查PE文件的完整性,一般exe文件可以使其值为0，在一些内核模式驱动文件及DLL文件中,该值必须是存在且正确的</p><p>校验值的计算很简单:<br>将PE文件两个两个数据进行累加，如果存不下就自然溢出（剩多少就存多少），将计算结果与CheckSum进行比较,不相等则说明文件被修改过或不完整</p><p><strong>重点</strong>：带‘**’就是</p><p>一个exe不是一个PE文件，而是由多个PE文件构成的</p><p>一个exe有一个虚拟的独立的4G空间</p><h3 id="③PE加载过程"><a href="#③PE加载过程" class="headerlink" title="③PE加载过程"></a>③PE加载过程</h3><p><img src="https://user-images.githubusercontent.com/116374553/230759788-677dfd48-b69d-4eef-abf8-3dffdc28102a.png" style="zoom:67%;" /></p><h2 id="Ⅲ-节表"><a href="#Ⅲ-节表" class="headerlink" title="Ⅲ.节表"></a>Ⅲ.节表</h2><p>——存储节区的信息（相当于节区的目录）</p><h3 id="①PE整体解析"><a href="#①PE整体解析" class="headerlink" title="①PE整体解析"></a>①PE整体解析</h3><p><img src="https://user-images.githubusercontent.com/116374553/232229404-9b41444e-1cca-499b-829b-4ecc5a70ac6b.png" style="zoom: 60%;" /></p><p>节表的大小存储在标准pe头中——NumberOfSections</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_SECTION_HEADER</span><br><span class="line">&#123;</span><br><span class="line">        0x00 BYTE Name[IMAGE_SIZEOF_SHORT_NAME];//此处被宏定义为8个字节（#define IMAGE_SIZEOF_SHORT_NAME 8），储存了节表的名字（编译器会自动给出，也可自行修改），该处的数据为ASCII字符，需要以&#x27;\0&#x27;结尾，但如果是将8个字节全部占满，就会造成数组越界，如果直接用指针指向该处读取数据，会出现错误（由于一直没找到结束的标志&#x27;\0&#x27;,会出现乱码）—— 一般形式为.xxx,也可以没有&#x27;.&#x27;</span><br><span class="line">             union &#123;</span><br><span class="line">        0x08          DWORD PhysicalAddress;</span><br><span class="line">        0x08          DWORD VirtualSize;</span><br><span class="line">             &#125; Misc;//匿名的联合体，变量为Misc，该节没有对齐前的真实尺寸（这个值可以被修改，同时不影响程序的运行）</span><br><span class="line">        0x0c DWORD VirtualAddress; //内存中的偏移地址（相对于ImageBase的偏移），加上ImageBase之后为内存中的真实地址</span><br><span class="line">        0x10 DWORD SizeOfRawData; //节在文件中对齐后的尺寸</span><br><span class="line">        0x14 DWORD PointerToRawData; //节区在文件中的偏移，即每一个节区离头(文件中起始为0)有多远(其值是文件对齐的整数倍)</span><br><span class="line">        0x18 DWORD PointerToRelocations;</span><br><span class="line">        0x1c DWORD PointerToLinenumbers;</span><br><span class="line">        0x20 WORD NumberOfRelocations;</span><br><span class="line">        0x22 WORD NumberOfLinenumbers;</span><br><span class="line">        0x24 DWORD Characteristics; //当前节的属性（便于分析每一个节区的功能——特别是被加壳后修改名称的文件）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Misc-VirtualAdress"><a href="#Misc-VirtualAdress" class="headerlink" title="Misc/VirtualAdress"></a>Misc/VirtualAdress</h5><p><img src="https://user-images.githubusercontent.com/116374553/232231029-38afd01d-0c42-4737-ad18-6bcc6a0e33ad.png" style="zoom: 60%;" /></p><h5 id="Characteristics-1"><a href="#Characteristics-1" class="headerlink" title="Characteristics"></a>Characteristics</h5><p>将该处的数据对应着以下相应的属性（将对应拥有的属性的值相加即可获取该处的值）</p><p><img src="https://user-images.githubusercontent.com/116374553/232231154-3dfc22d2-7daa-4e2b-8565-80ce98109393.png" style="zoom:55%;" /></p><h3 id="②单一节表解析"><a href="#②单一节表解析" class="headerlink" title="②单一节表解析"></a>②单一节表解析</h3><p><img src="https://user-images.githubusercontent.com/116374553/232231796-c40a06c5-e31b-4437-9385-45913aa715d5.png" style="zoom:55%;" /></p><h2 id="Ⅳ-FileBuffer-ImageBuffer"><a href="#Ⅳ-FileBuffer-ImageBuffer" class="headerlink" title="Ⅳ.FileBuffer/ImageBuffer"></a>Ⅳ.FileBuffer/ImageBuffer</h2><h3 id="①FileBuffer-——-gt-ImageBuffer"><a href="#①FileBuffer-——-gt-ImageBuffer" class="headerlink" title="①FileBuffer ——&gt; ImageBuffer"></a>①FileBuffer ——&gt; ImageBuffer</h3><p><img src="https://user-images.githubusercontent.com/116374553/232238119-2f3c79ee-10b6-45a1-abcb-52df62526b2b.png" alt=""></p><h3 id="②计算ImageBuffer中某一节表的位置到FileBuffer中的位置"><a href="#②计算ImageBuffer中某一节表的位置到FileBuffer中的位置" class="headerlink" title="②计算ImageBuffer中某一节表的位置到FileBuffer中的位置"></a>②计算ImageBuffer中某一节表的位置到FileBuffer中的位置</h3><p>计算在ImageBuffer中某一节表中地址对应FileBuffer中的地址</p><p>ImageBuffer中的地址为501234，PE文件初位置为50000</p><p>其中节表的大致分布如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">节1：PointerToRawData 400</span><br><span class="line">    VirtualAdress 1000</span><br><span class="line">节2：PointerToRawData 600</span><br><span class="line">    VirtualAdress 2000</span><br><span class="line">节3：PointerToRawData 800</span><br><span class="line">    VirtualAdress 3000</span><br></pre></td></tr></table></figure><p>第一步：501234 - 500000 = 1234 //得出现下的偏移地址</p><p>第二步：VirtualAdress &lt; 1234 &lt; Misc.VirtualSize //判断目前处于哪一个节区 ——&gt;  得出在第一个节区</p><p>第三步：1234 - VirtualAdress = 234 //关于第一个节区的偏移</p><p>第四步：PointerToRawData + 234 = 634</p><h2 id="Ⅴ-代码节空白区插入代码"><a href="#Ⅴ-代码节空白区插入代码" class="headerlink" title="Ⅴ.代码节空白区插入代码"></a>Ⅴ.代码节空白区插入代码</h2><p><strong>以向某一个程序中插入MessageBox这个函数为例</strong></p><h3 id="①程序插入MessageBox"><a href="#①程序插入MessageBox" class="headerlink" title="①程序插入MessageBox"></a>①程序插入MessageBox</h3><h5 id="MessageBox函数"><a href="#MessageBox函数" class="headerlink" title="MessageBox函数"></a>MessageBox函数</h5><p><strong>MessageBox</strong>一个<strong>Win32API</strong>函数</p><p>MessageBox指的是显示一个模态对话框，其中包含一个系统图标、 一组按钮和一个简短的<em>特定于应用程序消息，如状态或错误的信息</em>。</p><h5 id="在OD中利用指令对函数下断点"><a href="#在OD中利用指令对函数下断点" class="headerlink" title="在OD中利用指令对函数下断点"></a>在OD中利用指令对函数下断点</h5><p>在OD中对MessageBox下断点的时候可以直接在OD下方的Command直接输入bp MessageBoxA，同时按Enter键。在断点清单中即可看到该函数。</p><p><img src="https://user-images.githubusercontent.com/116374553/234433867-6b5950ed-8cf4-4f09-9621-bbf3833999e2.png" style="zoom:67%;" /></p><p><img src="https://user-images.githubusercontent.com/116374553/234622569-dfa6e7a5-0344-400a-aa04-adf931579d59.png" style="zoom: 80%;" /></p><p><img src="https://user-images.githubusercontent.com/116374553/234621943-f59dca17-0ada-4656-925e-6f542b8bb7de.png" style="zoom:67%;" /></p><p>此时可以知道我电脑上的MessageBox函数的地址为779CA7D0</p><h5 id="在vs中查看反汇编"><a href="#在vs中查看反汇编" class="headerlink" title="在vs中查看反汇编"></a>在vs中查看反汇编</h5><p>参考：<a href="https://blog.csdn.net/avrdpy/article/details/128682835">https://blog.csdn.net/avrdpy/article/details/128682835</a></p><p>同时可以在上方的查看选项中调出需要的部分</p><p><img src="https://user-images.githubusercontent.com/116374553/234439394-6075ceb6-12f2-4355-8344-bb19d4bb5b63.png" style="zoom:67%;" /></p><h5 id="E8、E9计算公式"><a href="#E8、E9计算公式" class="headerlink" title="E8、E9计算公式"></a>E8、E9计算公式</h5><h6 id="E8："><a href="#E8：" class="headerlink" title="E8："></a>E8：</h6><p>call指令对应的硬编码，后接上4个字节的地址跳转（此跳转地址并不是我们想要的跳转的地方）</p><p><img src="https://user-images.githubusercontent.com/116374553/234441719-8eb69102-db55-4161-babd-26bea268c30a.png" alt=""></p><p>此处的硬编码E8后的地址并不是函数Function后的跳转地址</p><p>真正要跳转的地址 = E8这条指令的下一条指令 + X</p><p>于是通过该方程式<strong>求取X</strong>的值：</p><p>E8下一条指令的地址为A918D6</p><p><img src="https://user-images.githubusercontent.com/116374553/234442340-9542e174-bfd9-4c16-bc98-676873067ab9.png" alt=""></p><p>实际跳转的地址0A91023</p><p>①<strong>X = 真正要跳转的地址 - E8这条指令的下一条指令</strong></p><p>即：X = 0xA91023 - 0xA918D6 = 0xFFFF F74D</p><p><img src="https://user-images.githubusercontent.com/116374553/234443202-214c83c9-5d6b-44be-b1a2-046320210816.png" style="zoom:50%;" /></p><p>此值恰好是E8后面的地址</p><p><strong>注意</strong>：由于存储地址的地方都是四个字节，是双字，所以在利用计算器计算的时候需要选中DWORD</p><p>②<strong>X = 真正要跳转的地址 -（E8当前的地址（拉伸后的地址） + 5）（E8的下一条指令的地址 = E8 + 硬编码所占的字节数）</strong></p><h6 id="E9："><a href="#E9：" class="headerlink" title="E9："></a>E9：</h6><p>与E8同理</p><p>jmp指令对应的硬编码，后接上4个字节的地址跳转</p><h4 id="●构造shellcode-调用MessageBox"><a href="#●构造shellcode-调用MessageBox" class="headerlink" title="●构造shellcode(调用MessageBox)"></a>●构造shellcode(调用MessageBox)</h4><p><img src="https://user-images.githubusercontent.com/116374553/234475466-f619e567-2827-4a06-80fb-21e10890b02d.png" style="zoom: 67%;" /></p><p>调用MessageBox函数先是将参数push入栈，其硬编码为6A 00；然后是call指令调用函数(求取X = 值)；最后是jmp跳转到原来程序的OEP(求取jmp的X)。</p><h5 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h5><p><strong><em>6A 00 6A 00 6A 00 6A 00 E8 00 00 00 00 E9 00 00 00 00</em></strong></p><h5 id="求取E8后X"><a href="#求取E8后X" class="headerlink" title="求取E8后X"></a>求取E8后X</h5><p>此时需要填写E8和E9后的X</p><p>首先利用PETool工具打开我想要加入shellcode的程序，去到第一个节表中（判断空白的区域是否足够我插入代码（文件对齐后的大小 - 内存中的大小））</p><p><img src="https://user-images.githubusercontent.com/116374553/234625644-1f6df591-5bd9-47f6-874c-caea19abcda6.png" style="zoom: 67%;" /></p><p>在winhex中以文件模式打开该程序，先找到文件偏移的位置（即第一个节表的起始位置），加上文件中的偏移等于第二个节表开始的位置。在其中的空白区域填写我们的shellcode</p><p><img src="https://user-images.githubusercontent.com/116374553/234627090-53900013-28bd-4a54-9333-31da01a40541.png" style="zoom:50%;" /></p><p>由之前可知此时电脑中的MessageBox函数的地址为<strong><em>0x7544A7D0</em></strong>（真正要跳转的地址）</p><p>此时<strong><em>X = 7544A7D0 - E8下一条指令的地址</em></strong>（<strong>运行时</strong>的地址此时是拉伸之后的（Image Buffer））</p><p>其中：<strong><em>E8地址 = ImageBase + 偏移地址 = 400000 + 拉伸后E8下一条指令的地址 = 400000 + （244d - 400 + 1000）= 40304D</em></strong></p><p>注：244d - 400 + 1000  此时在file文件中e8下条指令的地址-文件中偏移+内存偏移</p><p>ImageBase：<img src="https://user-images.githubusercontent.com/116374553/234630622-445e36df-adec-45dc-853a-add9569d3969.png" alt=""></p><p>最终解得<strong><em>X = 7544A7D0 - 40304D = 75047783</em></strong>  </p><p>则<strong><em>E8 83 77 04 75</em></strong></p><p><img src="https://user-images.githubusercontent.com/116374553/234633620-92ea411d-57ab-48c3-8670-fb9f7d30d42d.png" alt=""></p><h5 id="求取E9后X"><a href="#求取E9后X" class="headerlink" title="求取E9后X"></a>求取E9后X</h5><p>跳转到真正的程序OEP处（入口地点）</p><p><img src="https://user-images.githubusercontent.com/116374553/234634266-9cb0421f-9b03-4bce-b882-2d15d84f1e6e.png" alt=""></p><p><strong><em>真正地址 = ImageBase + AddressOfEntryPoint = 4021A8</em></strong></p><p><strong><em>X = 真正地址 - E9下一条指令 = 4021A8 - （400000 + 2452 - 400 + 1000）= FFFFF156</em></strong></p><p>则<strong><em>E9 56 F1 FF FF</em></strong></p><p><img src="https://user-images.githubusercontent.com/116374553/234639802-d10db288-cbad-4295-aadd-f3d2f326af60.png" alt=""></p><h4 id="●修改OEP"><a href="#●修改OEP" class="headerlink" title="●修改OEP"></a>●修改OEP</h4><p>现在oep = 现在构造的shellcode的起始位置 = 2440 - 400 + 1000 = 3040</p><p><strong>原来</strong>：<img src="https://user-images.githubusercontent.com/116374553/234640243-411c5fb3-888c-444f-8947-b67efac2da8e.png" style="zoom:50%;" /></p><p><strong>修改</strong>后：<img src="https://user-images.githubusercontent.com/116374553/234640925-7588306e-1349-42e2-b38b-a46ab24e5269.png" style="zoom:50%;" /></p><h4 id="●运行结果"><a href="#●运行结果" class="headerlink" title="●运行结果"></a>●运行结果</h4><p><strong>原来</strong>：<img src="https://user-images.githubusercontent.com/116374553/234641315-168e0f3b-937c-4fde-82cc-d872b9a87802.png" style="zoom:50%;" /></p><p><strong>现在</strong>：<img src="https://user-images.githubusercontent.com/116374553/234641613-0c78e699-9f8c-48d4-8214-7f2407472ec9.png" style="zoom:50%;" /></p><p>点击确定后<img src="https://user-images.githubusercontent.com/116374553/234641740-50ebd33c-dfd6-44ec-b165-5c481f80d790.png" style="zoom:50%;" /></p><h6 id="FF15和E8"><a href="#FF15和E8" class="headerlink" title="FF15和E8"></a>FF15和E8</h6><p><strong>注意</strong>：①00A018EB FF 15 98 B0 A0 00    call        dword ptr [<strong>imp</strong>MessageBoxW@16 (0A0B098h)]  </p><p>当call指令的硬编码为FF15时，后跟的地址是绝对地址</p><p>②00A018F3 E8 51 F9 FF FF       call        __RTC_CheckEsp (0A01249h) </p><p>当call指令的硬编码为E8时，后跟的地址是相对偏移地址</p><h2 id="Ⅵ-在任意空白处添加代码"><a href="#Ⅵ-在任意空白处添加代码" class="headerlink" title="Ⅵ.在任意空白处添加代码"></a>Ⅵ.在任意空白处添加代码</h2><p><img src="https://user-images.githubusercontent.com/116374553/235347608-18d37579-e134-42eb-b635-3f8176e51983.png" alt="00"></p><p>相应代码在另一篇博客中(此处由于一些原因并未采取file-&gt;image-&gt;new这一过程)</p><h2 id="Ⅶ-新增节-添加代码"><a href="#Ⅶ-新增节-添加代码" class="headerlink" title="Ⅶ.新增节-添加代码"></a>Ⅶ.新增节-添加代码</h2><p>——常用于加壳软件（但是出现无法直接新增节的时候也会直接扩大节）</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/d4b83554-e998-42fe-8b3d-458e4ea70c7c" style="zoom: 67%;" /></p><p>每一个节表是40个字节</p><h5 id="目标："><a href="#目标：" class="headerlink" title="目标："></a><strong><em>目标：</em></strong></h5><p><em>新增一个节，并且它的大小为1000字节。</em></p><h5 id="初始运行程序："><a href="#初始运行程序：" class="headerlink" title="初始运行程序："></a><strong><em>初始运行程序</em></strong>：<img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/4d16f9ef-aae9-43a1-ac0a-9a93dd189df9" style="zoom:50%;" /></h5><h5 id="增加节表："><a href="#增加节表：" class="headerlink" title="增加节表："></a><strong><em>增加节表</em></strong>：</h5><h6 id="①修改节的数量"><a href="#①修改节的数量" class="headerlink" title="①修改节的数量"></a>①修改节的数量</h6><p>修改标准pe头中NumberOfSections的值</p><p>示例程序原来有5个节表，将5修改为6</p><h6 id="②修改pe文件的大小（sizeofimage）"><a href="#②修改pe文件的大小（sizeofimage）" class="headerlink" title="②修改pe文件的大小（sizeofimage）"></a>②修改pe文件的大小（sizeofimage）</h6><p>将新增节表的区域映射到内存中去</p><p>此时可以直接用petool打开pe文件，然后先找到pe标识，然后标准pe头20字节，到可选pe头后，直接根据petool中查到的sizeofimage，找到它的位置并进行修改。</p><p>示例程序原来的sizeofimage大小为38000h，此处由于新增节的大小为1000h，则将该数据修改为39000h</p><h6 id="③为新节开辟内存"><a href="#③为新节开辟内存" class="headerlink" title="③为新节开辟内存"></a>③为新节开辟内存</h6><p>在pe文件的最后一个字节，右键选择粘贴字节，此处插入字符应该填写十进制数（4096）</p><h6 id="④修改节表的信息"><a href="#④修改节表的信息" class="headerlink" title="④修改节表的信息"></a>④修改节表的信息</h6><p>此时可以对照petool中的其他节表去修改新增节表的信息（此处需要自己随便选择某一个节表，直接复制到新增节表的位置）</p><ul><li>修改VirtualSize的值的时候，直接将其修改为对齐后的值即可</li><li>PointerToRawData：<strong>PointerToRawData</strong> = PointerToRawData(上) + SizeOfRawData(上) 文件地址+文件中的大小</li><li>VirtualAddress：此时的<strong>VirtualAddress</strong> = VirtualAddress(上) + SizeOfRawData修改为内存对齐时的值   最后一个节表的偏移+文件中大小(或内存中大小（谁大加谁))之后按照对齐原则进行修改即可</li><li>Characteristics：由于复制的是代码节，则此处属性可以不用修改，如果有属性的改变可以对照相应的表格修改此处的数据</li></ul><p><strong>修改后的节表：</strong><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/f63b9931-bf10-4330-a298-703c43c11142" alt=""></p><h5 id="修改后运行："><a href="#修改后运行：" class="headerlink" title="修改后运行："></a><strong>修改后运行</strong>：<img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/4fe8c5ec-b608-4541-8353-7cbd5ce1fa1a" style="zoom:50%;" /></h5><h5 id="增加节的条件"><a href="#增加节的条件" class="headerlink" title="增加节的条件"></a>增加节的条件</h5><p>①节表后的空白空间足够大</p><p>②一些程序在节表之后节区之前自带有一些数据(不清楚用处)，此时可以将我们的NT头以及节表信息直接向上提，提到DOS与NT头之间的垃圾数据上去，同时修改e_lfanew的值。此后在多出来的区域直接填充0即可，在此填写新增的节表数据</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/b507da8f-6e4a-4dbb-a467-aab8adec9aa2" alt=""></p><p><strong><em>注意</em></strong>：节表结束后一定要留有一个节表的空白区域（40个0）</p><p>由于windows判断结构体数组结束的机制是，当出现一个结构体大小的空白区域时结构体数组结束（不一定会是如此）</p><p>③当DOS头NT头间的数据依旧不够用，则扩大最后一个节（因为不会影响其他节区的偏移）</p><p>相应代码在另一篇博客中</p><h2 id="Ⅷ-扩大节-合并节-数据目录"><a href="#Ⅷ-扩大节-合并节-数据目录" class="headerlink" title="Ⅷ.扩大节-合并节-数据目录"></a>Ⅷ.扩大节-合并节-数据目录</h2><h4 id="扩大节"><a href="#扩大节" class="headerlink" title="扩大节"></a>扩大节</h4><p>增加最后一个节的空间大小，在pe文件的结尾处（即最后一个节区）添加一段新的内存空间。（该方式是为了避免出现，当节表结束后一段的内存中出现重要信息，导致无法直接在原有节表后添加新的节表，同时这种情况之下提头也显得非常的麻烦，可以使用）</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/311431ba-026f-4896-b2d0-a8ceeeb40c96" style="zoom:67%;" /></p><p>1.在最后一个节区添加新的内存空间：SizeOfImage + Ex</p><p>2.将最后一个节的SizeOfRawData和VirtualSize修改为N</p><p>SizeOfRawData = VirtualSize = N</p><p>N = SizeOfRawData / VirtualSize内存对齐后的值 + Ex</p><p>3.修改SizeOfImage</p><p>SizeOfImage = SizeOfImage + Ex</p><h4 id="合并节"><a href="#合并节" class="headerlink" title="合并节"></a>合并节</h4><p>——合并节之后文件会变大</p><p>1.拉伸到内存</p><p>2.将第一个节的内存大小，文件大小改成一样</p><p>Max = SizeOfRawData &gt; VirtualSize?SizeOfRawData:VirtualSize</p><p>SizeOfRawData = VirtualSize = 最后一个节的VirtualAddress + Max - SizeOfHeaders内存对齐后的大小</p><p>3.将第一个节的属性改为包含所有节的属性</p><p>4.修改节的数量为1</p><h2 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h2>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> PE文件结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows API函数</title>
      <link href="/2023/06/04/Windows%20API%E5%87%BD%E6%95%B0/"/>
      <url>/2023/06/04/Windows%20API%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-API函数"><a href="#Windows-API函数" class="headerlink" title="Windows API函数"></a>Windows API函数</h1><h2 id="LoadLibrary"><a href="#LoadLibrary" class="headerlink" title="LoadLibrary"></a>LoadLibrary</h2><p>从操作系统的动态链接库(DLL)中加载指定的模块，其中包括外部函数、变量和资源文件等，以便在程序中使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMODULE LoadLibrary（LPCTSTR lpLibFileName）</span><br></pre></td></tr></table></figure><p><code>lpLibFileName</code>参数指定要加载的DLL文件的名称，返回值<code>HMODULE</code>是一个句柄，指向指定的DLL文件。</p><h2 id="GetProcAddress"><a href="#GetProcAddress" class="headerlink" title="GetProcAddress"></a>GetProcAddress</h2><p><code>GetProcAddress()</code>函数用于获取DLL中导出函数的地址</p><p>GetProcAddress将 DLL 模块处理 (由LoadLibrary、或 GetModuleHandle 返回的参数 ) ， 并采用要调用的函数的名称或函数的导出序号。</p><h2 id="FreeLibrary"><a href="#FreeLibrary" class="headerlink" title="FreeLibrary"></a>FreeLibrary</h2><p>释放指定的动态链接库。释放一个句柄。</p><h1 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h1>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> Windows API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2023/05/22/Mybatis/"/>
      <url>/2023/05/22/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h6 id="1-删除"><a href="#1-删除" class="headerlink" title="1.删除"></a>1.删除</h6><p><strong>删除</strong></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/cf2059a6-68f4-4caf-bb2f-3929273f9d20" alt=""></p><p><strong>批量删除</strong></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/32eaa4af-ec5a-4f18-b764-fc7764d827de" alt=""></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/af3b4916-e254-403b-93a0-bdac67739652" alt=""></p><h6 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h6><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/55eb228a-6c49-4175-9544-9d5ecbef0ece" alt=""></p><h6 id="3-插入"><a href="#3-插入" class="headerlink" title="3.插入"></a>3.插入</h6><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/5b15907e-324d-4e2a-96ba-2244785a32a6" alt=""></p><p>返回主键的值，用getid获取，如果没有那两个值，返回由于没有事务回滚会导致返回值为null</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/e52481a2-34ea-47dc-bec3-5ad4bd684642" alt=""></p><h6 id="4-修改"><a href="#4-修改" class="headerlink" title="4.修改"></a>4.修改</h6><p><strong>修改全部字段</strong></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/a2a68689-ee2d-41a6-be4f-acf6898dd785" alt=""></p><p><strong>动态修改字段</strong></p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/8e6553a2-ec44-4957-ba2c-b32042691525" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/05/22/git/"/>
      <url>/2023/05/22/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h5 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h5><p><img src="https://raw.githubusercontent.com/WhiteIsBlank/Image/main/332811630-bb6ad265-0739-40b1-8e2c-59d0512a527b.png" alt=""></p><h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><p>C:\Users\xxx.gitconfig文件中存储用户信息</p><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><h5 id="基本理论"><a href="#基本理论" class="headerlink" title="基本理论"></a>基本理论</h5><p>Git本地三个工作区域，工作目录、暂存区、资源库。如果加上远程的git仓库就可以分为四个工作区。</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/254b0e65-6316-491e-ac34-0834e98270d1" alt=""></p><ul><li>Workspace:工作区，就是你平时存放项目代码的地方</li><li>Index/Stage:暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository:仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote:远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换本地的三个区域确切的说应该是gt仓库中HEAD指向的版本：</li></ul><h5 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h5><ul><li>Untracked:未跟踪，此文件在文件夹中，但并没有加入到git库，不参与版本控制.通过git add状态变为staged</li><li>Unmodify::文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致.这种类型的文件有两种去处，如果它被修改，而变为Modified,如果使用git rm移出版本库，则成为Untracked文件</li><li>Modified:文件已修改，仅仅是修改，并没有进行其他的操作，这个文件也有两个去处，通过git add可进入暂存staged状态，使用git checkout则丢弃修改过，返回到unmodify状态，这个git checkout即从库中取出文件，覆盖当前修改！</li><li>Staged:暂存状态.执行git commit则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为Unmodify状态.执行git reset HEAD filename取消暂存，文件状态为Modified</li></ul><h5 id="Git操作基本步骤"><a href="#Git操作基本步骤" class="headerlink" title="Git操作基本步骤"></a>Git操作基本步骤</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;上传的信息&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h5 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出所有木地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment">#列出所有远程分支</span></span><br><span class="line">git branch-r</span><br><span class="line"><span class="comment">#新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="comment">#新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="comment">#合并指定分支到当前分支</span></span><br><span class="line">s git merge [branch]</span><br><span class="line"><span class="comment">#刷除分支</span></span><br><span class="line">s git branch -d [branch-name]</span><br><span class="line"><span class="comment">#刷除远程分支</span></span><br><span class="line">s git push origin --delete [branch-name]</span><br><span class="line">s git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 误打误撞的前端旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE文件添加节表代码</title>
      <link href="/2023/05/17/PE%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E8%8A%82%E8%A1%A8%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/05/17/PE%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E8%8A%82%E8%A1%A8%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="PE文件添加节表代码"><a href="#PE文件添加节表代码" class="headerlink" title="PE文件添加节表代码"></a>PE文件添加节表代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IN_PATH <span class="string">&quot;C:\\buu.exe&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OUT_PATH <span class="string">&quot;C:\\buu_new.exe&quot;</span></span></span><br><span class="line">DWORD <span class="title function_">OpenFile</span><span class="params">(OUT PVOID* pfilebuffer)</span>;<span class="comment">//打开文件</span></span><br><span class="line">BOOL <span class="title function_">MemeryToFile</span><span class="params">(LPVOID pfilebuffer, <span class="type">size_t</span> size)</span>;<span class="comment">//存盘</span></span><br><span class="line">BOOL <span class="title function_">isPE</span><span class="params">(IN PVOID pfilebuffer)</span>;<span class="comment">//判断文件是否为pe文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddSection</span><span class="params">(PVOID pfilebuffer,<span class="type">size_t</span> size)</span>;<span class="comment">//增加节表（仅限于节表区域有空闲区域时使用）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">PVOID pfilebuffer;</span><br><span class="line"><span class="type">size_t</span> size;</span><br><span class="line">size = OpenFile(&amp;pfilebuffer);</span><br><span class="line">AddSection(pfilebuffer,size);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">OpenFile</span><span class="params">(OUT PVOID* pfilebuffer)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* pfile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">size_t</span> filesize = <span class="number">0</span>;</span><br><span class="line">LPVOID filebuffer = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">size_t</span> file;</span><br><span class="line">pfile = fopen(IN_PATH, <span class="string">&quot;rb&quot;</span>);<span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">if</span> (!pfile)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未能成功打开文件！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">fseek(pfile, <span class="number">0</span>, <span class="number">2</span>);<span class="comment">//文件指针放在末尾</span></span><br><span class="line">filesize = ftell(pfile);<span class="comment">//读取文件大小</span></span><br><span class="line">fseek(pfile, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//恢复文件指针</span></span><br><span class="line">filebuffer = <span class="built_in">malloc</span>(filesize + <span class="number">0x1000</span>);<span class="comment">//此处后1000为增加的节区的大小</span></span><br><span class="line"><span class="keyword">if</span> (!filebuffer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未能成功申请空间！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(filebuffer, <span class="number">0</span>, filesize + <span class="number">0x1000</span>);<span class="comment">//初始化空间大小</span></span><br><span class="line">file = fread(filebuffer, filesize, <span class="number">1</span>, pfile);<span class="comment">//读取文件中的内容保存到filebuffer中去</span></span><br><span class="line"><span class="keyword">if</span> (!file)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未能成功读取数据&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">fclose(pfile);</span><br><span class="line">*pfilebuffer = filebuffer;</span><br><span class="line"><span class="keyword">return</span> filesize + <span class="number">0x1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">MemeryToFile</span><span class="params">(LPVOID pfilebuffer, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file = <span class="literal">NULL</span>;</span><br><span class="line">file = fopen(OUT_PATH, <span class="string">&quot;wb+&quot;</span>);<span class="comment">//文件指针</span></span><br><span class="line"><span class="keyword">if</span> (file == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;<span class="comment">//打开文件失败/创建文件失败</span></span><br><span class="line">&#125;</span><br><span class="line">fwrite(pfilebuffer, size, <span class="number">1</span>, file);<span class="comment">//向file中写入</span></span><br><span class="line">fclose(file);</span><br><span class="line">file = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">isPE</span><span class="params">(IN PVOID pfilebuffer)</span></span><br><span class="line">&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDOSHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">pDOSHeader = (PIMAGE_DOS_HEADER)pfilebuffer;</span><br><span class="line"><span class="keyword">if</span> (!pfilebuffer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;缓冲指针无效&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pDOSHeader-&gt;e_magic != <span class="number">0x5A4D</span>)<span class="comment">//可以用IMAGE_DOS_SIGNATURE代替</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不是有效的MZ标识符&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">pNTHeader = (PIMAGE_NT_HEADERS)((byte*)pDOSHeader + pDOSHeader-&gt;e_lfanew);</span><br><span class="line"><span class="keyword">if</span> (pNTHeader-&gt;Signature != <span class="number">0x4550</span>)<span class="comment">//可以用IMAGE_NT_SIGNATURE代替</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不是有效的PE标记&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddSection</span><span class="params">(PVOID pfilebuffer, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDOSHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER32 pOptionalHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">BOOL isOK;</span><br><span class="line"><span class="keyword">if</span> (!pfilebuffer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;缓冲区指针无效！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">BOOL whether = isPE(pfilebuffer);</span><br><span class="line"><span class="keyword">if</span> (!whether)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不是PE文件&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pDOSHeader = (PIMAGE_DOS_HEADER)pfilebuffer;</span><br><span class="line">pNTHeader = (PIMAGE_NT_HEADERS)((byte*)pfilebuffer + pDOSHeader-&gt;e_lfanew);</span><br><span class="line">pFileHeader = (PIMAGE_FILE_HEADER)((byte*)pNTHeader + <span class="number">4</span>);</span><br><span class="line">pOptionalHeader = (PIMAGE_OPTIONAL_HEADER32)((byte*)pFileHeader + <span class="number">20</span>);</span><br><span class="line">pSectionHeader = (PIMAGE_SECTION_HEADER)((byte*)pOptionalHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line"><span class="keyword">if</span> (pOptionalHeader-&gt;SizeOfHeaders - ((DWORD)((byte*)pSectionHeader - (byte*)pfilebuffer) + <span class="number">40</span> * (pFileHeader-&gt;NumberOfSections)) &lt; <span class="number">80</span>)<span class="comment">//节表和节区之间的空白部分是否可以可以又存放两个节表的空间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有足够的空闲区域&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pFileHeader-&gt;NumberOfSections++;<span class="comment">//节表数增加</span></span><br><span class="line">pOptionalHeader-&gt;SizeOfImage += <span class="number">0x1000</span>;<span class="comment">//增加pe文件在内存中的映射空间</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pFileHeader-&gt;NumberOfSections - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">pSectionHeader++;</span><br><span class="line">&#125;</span><br><span class="line">PIMAGE_SECTION_HEADER psection = --pSectionHeader;</span><br><span class="line">pSectionHeader++;</span><br><span class="line"><span class="built_in">memcpy</span>(pSectionHeader, psection, <span class="number">40</span>);</span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>] = <span class="string">&quot;.hello&quot;</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(pSectionHeader, name, <span class="keyword">sizeof</span>(name));<span class="comment">//修改节表名称</span></span><br><span class="line">pSectionHeader-&gt;Misc.VirtualSize = <span class="number">0x1000</span>;<span class="comment">//修改内存中的大小</span></span><br><span class="line">pSectionHeader-&gt;SizeOfRawData = <span class="number">0x1000</span>;<span class="comment">//修改文件中的大小</span></span><br><span class="line">pSectionHeader-&gt;Characteristics = <span class="number">0x60000020</span>;<span class="comment">//修改节表属性</span></span><br><span class="line">DWORD virtualsize;</span><br><span class="line"><span class="keyword">if</span> (psection-&gt;Misc.VirtualSize % pOptionalHeader-&gt;SectionAlignment != <span class="number">0</span>)</span><br><span class="line">virtualsize = psection-&gt;Misc.VirtualSize / pOptionalHeader-&gt;SectionAlignment + pSectionHeader-&gt;SizeOfRawData;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">virtualsize = psection-&gt;Misc.VirtualSize;</span><br><span class="line">pSectionHeader-&gt;VirtualAddress = psection-&gt;VirtualAddress + virtualsize;<span class="comment">//新的内存地址为上一个节表的内存地址加上上一个节表的内存大小，按照内存对齐之后的位置</span></span><br><span class="line">DWORD sectionsize;</span><br><span class="line"><span class="keyword">if</span> (psection-&gt;SizeOfRawData % pOptionalHeader-&gt;FileAlignment != <span class="number">0</span>)</span><br><span class="line">sectionsize = psection-&gt;SizeOfRawData / pOptionalHeader-&gt;FileAlignment + pOptionalHeader-&gt;FileAlignment;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sectionsize = psection-&gt;SizeOfRawData;</span><br><span class="line">pSectionHeader-&gt;PointerToRawData = sectionsize +psection-&gt;PointerToRawData;<span class="comment">//新的文件中的节区地址开始处</span></span><br><span class="line">isOK = MemeryToFile(pfilebuffer, size);</span><br><span class="line"><span class="keyword">if</span> (isOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;存盘成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(pfilebuffer);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> PE文件结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Init_re</title>
      <link href="/2023/05/14/Init_re/"/>
      <url>/2023/05/14/Init_re/</url>
      
        <content type="html"><![CDATA[<h1 id="Init-re"><a href="#Init-re" class="headerlink" title="Init_re"></a>Init_re</h1><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p><strong>init函数，先于main函数执行</strong>。</p><p>init函数，又称初始化函数。它将字符串、变量、数组等设置为特定的值。</p><p>_init(宏定义)，用于告诉编译器相关函数或变量仅用于初始化，编译器将标__init的所有代码存在特殊的内存段中，初始化结束后就释放这段内存。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>查壳发现是，64位的ELF文件，IDA打开程序进入main函数，发现flag的每一位都被进行了异或，然后进入compare函数进行字符串比较。</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/087ea02d-091a-4f3c-82e0-515654005bb4" style="zoom:67%;" /></p><p>进入compare函数</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/e780d6d1-0bdf-40a3-9409-1a0eb6a461f6" style="zoom:50%;" /></p><p>对数据中直接给出的final密文，进行解密flag，但是此时解出的flag的值并不正确，再由题目中曾提到程序不是从main函数开始的。于是联想题目的init，经过查询可以得到引入中对init函数的相关解释。因此我们可以知道，在main函数之前还执行了init函数，而init函数可能对final密文进行了一个加密，于是利用交叉引用(X)去查找final密文在程序中的调用情况，最终找到该函数</p><p><img src="https://github.com/WhiteIsBlank/Picture/assets/116374553/ff5a0ac1-15b7-46dd-8e47-a7766247f139" alt=""></p><p>然后编写脚本解密，得到正确的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ciphertext = [<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x63</span>,<span class="number">0x64</span>,<span class="number">0x7F</span>,<span class="number">0x56</span>,<span class="number">0x69</span>,<span class="number">0x6A</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x62</span>,<span class="number">0x62</span>,<span class="number">0x62</span>,<span class="number">0x6A</span>,<span class="number">0x51</span>,<span class="number">0x7D</span>,<span class="number">0x65</span>,<span class="number">0x7F</span>,<span class="number">0x4D</span>,<span class="number">0x71</span>,<span class="number">0x71</span>,<span class="number">0x73</span>,<span class="number">0x79</span>,<span class="number">0x65</span>,<span class="number">0x7D</span>,<span class="number">0x46</span>,<span class="number">0x77</span>,<span class="number">0x7A</span>,<span class="number">0x75</span>,<span class="number">0x73</span>,<span class="number">0x21</span>,<span class="number">0x62</span>]</span><br><span class="line">ciphertext[<span class="number">6</span>] = <span class="number">54</span></span><br><span class="line">ciphertext[<span class="number">11</span>] = <span class="number">58</span></span><br><span class="line">ciphertext[<span class="number">22</span>] = <span class="number">38</span></span><br><span class="line">ciphertext[<span class="number">30</span>] = <span class="number">63</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(ciphertext[i]^i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag：flag{S0meth1ng_run_bef0re_main!}</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyRE</title>
      <link href="/2023/05/14/easyRE/"/>
      <url>/2023/05/14/easyRE/</url>
      
        <content type="html"><![CDATA[<h1 id="easyRE"><a href="#easyRE" class="headerlink" title="easyRE"></a>easyRE</h1><p>是一个py的可执行文件，利用pyinstxtractor-master解包，利用代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:\\信安\\pycdc\\easyRE.pyc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#如果直接填写pyc文件名称无法运行，就填写pyc文件的绝对路径(绝对路径不能过长，否者会打开文件失败)</span></span><br><span class="line">    f.seek(<span class="number">16</span>)</span><br><span class="line">    dis.dis(marshal.load(f))</span><br></pre></td></tr></table></figure><p>运行环境需要和文件的Python的python环境一致，否者会报错。解包得到的easyRE.pyc将会变为字节码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>           <span class="number">0</span> RESUME                   <span class="number">0</span>                                <span class="comment">#表示函数的开始</span></span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>           <span class="number">2</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)                        <span class="comment">#import random</span></span><br><span class="line">             <span class="number">4</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">6</span> IMPORT_NAME              <span class="number">0</span> (random)                   </span><br><span class="line">             <span class="number">8</span> STORE_NAME               <span class="number">0</span> (random)</span><br><span class="line"></span><br><span class="line"> <span class="number">3</span>          <span class="number">10</span> PUSH_NULL                  <span class="comment">#r = random.Random(322376503)   </span></span><br><span class="line">            <span class="number">12</span> LOAD_NAME                <span class="number">0</span> (random)</span><br><span class="line">            <span class="number">14</span> LOAD_ATTR                <span class="number">1</span> (Random)</span><br><span class="line">            <span class="number">24</span> LOAD_CONST               <span class="number">2</span> (<span class="number">322376503</span>)</span><br><span class="line">            <span class="number">26</span> PRECALL                  <span class="number">1</span></span><br><span class="line">            <span class="number">30</span> CALL                     <span class="number">1</span></span><br><span class="line">            <span class="number">40</span> STORE_NAME               <span class="number">2</span> (r)</span><br><span class="line"></span><br><span class="line"> <span class="number">6</span>          <span class="number">42</span> PUSH_NULL</span><br><span class="line">            <span class="number">44</span> LOAD_NAME                <span class="number">3</span> (<span class="built_in">input</span>)</span><br><span class="line">            <span class="number">46</span> LOAD_CONST               <span class="number">3</span> (<span class="string">&#x27;Enter your flag: &#x27;</span>)</span><br><span class="line">            <span class="number">48</span> PRECALL                  <span class="number">1</span></span><br><span class="line">            <span class="number">52</span> CALL                     <span class="number">1</span></span><br><span class="line">            <span class="number">62</span> LOAD_METHOD              <span class="number">4</span> (encode)</span><br><span class="line">            <span class="number">84</span> PRECALL                  <span class="number">0</span></span><br><span class="line">            <span class="number">88</span> CALL                     <span class="number">0</span></span><br><span class="line">            <span class="number">98</span> STORE_NAME               <span class="number">5</span> (pt)  pt = <span class="built_in">input</span>(<span class="string">&quot;Enter your flag: &quot;</span>).encode()</span><br><span class="line"></span><br><span class="line"> <span class="number">8</span>         <span class="number">100</span> LOAD_CONST               <span class="number">4</span> (<span class="string">b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span>)</span><br><span class="line">           <span class="number">102</span> STORE_NAME               <span class="number">6</span> (ct)           ct = <span class="string">b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span>         <span class="number">104</span> BUILD_LIST               <span class="number">0</span>           <span class="comment">#buf = []</span></span><br><span class="line">           <span class="number">106</span> STORE_NAME               <span class="number">7</span> (buf)</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>         <span class="number">108</span> LOAD_NAME                <span class="number">5</span> (pt)            <span class="comment">#for b in pt</span></span><br><span class="line">           <span class="number">110</span> GET_ITER</span><br><span class="line">       &gt;&gt;  <span class="number">112</span> FOR_ITER                <span class="number">46</span> (to <span class="number">206</span>)<span class="comment">#此处标注循环结束的位置下一句</span></span><br><span class="line">           <span class="number">114</span> STORE_NAME               <span class="number">8</span> (b)</span><br><span class="line"></span><br><span class="line"><span class="number">13</span>         <span class="number">116</span> LOAD_NAME                <span class="number">7</span> (buf)  <span class="comment">#buf.append(r.randint(0,255)^b)</span></span><br><span class="line">           <span class="number">118</span> LOAD_METHOD              <span class="number">9</span> (append)</span><br><span class="line">           <span class="number">140</span> LOAD_NAME                <span class="number">2</span> (r)</span><br><span class="line">           <span class="number">142</span> LOAD_METHOD             <span class="number">10</span> (randint)</span><br><span class="line">           <span class="number">164</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">           <span class="number">166</span> LOAD_CONST               <span class="number">5</span> (<span class="number">255</span>)</span><br><span class="line">           <span class="number">168</span> PRECALL                  <span class="number">2</span></span><br><span class="line">           <span class="number">172</span> CALL                     <span class="number">2</span></span><br><span class="line">           <span class="number">182</span> LOAD_NAME                <span class="number">8</span> (b)</span><br><span class="line">           <span class="number">184</span> BINARY_OP               <span class="number">12</span> (^)</span><br><span class="line">           <span class="number">188</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">192</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">202</span> POP_TOP</span><br><span class="line">           <span class="number">204</span> JUMP_BACKWARD           <span class="number">47</span> (to <span class="number">112</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">15</span>     &gt;&gt;  <span class="number">206</span> PUSH_NULL                                   <span class="comment">#if bytes(buf) == ct:</span></span><br><span class="line">           <span class="number">208</span> LOAD_NAME               <span class="number">11</span> (<span class="built_in">bytes</span>)</span><br><span class="line">           <span class="number">210</span> LOAD_NAME                <span class="number">7</span> (buf)</span><br><span class="line">           <span class="number">212</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">216</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">226</span> LOAD_NAME                <span class="number">6</span> (ct)</span><br><span class="line">           <span class="number">228</span> COMPARE_OP               <span class="number">2</span> (==)</span><br><span class="line">           <span class="number">234</span> POP_JUMP_FORWARD_IF_TRUE     <span class="number">2</span> (to <span class="number">240</span>)</span><br><span class="line">           <span class="number">236</span> LOAD_ASSERTION_ERROR</span><br><span class="line">           <span class="number">238</span> RAISE_VARARGS            <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">17</span>     &gt;&gt;  <span class="number">240</span> PUSH_NULL</span><br><span class="line">           <span class="number">242</span> LOAD_NAME               <span class="number">12</span> (<span class="built_in">print</span>)</span><br><span class="line">           <span class="number">244</span> LOAD_CONST               <span class="number">6</span> (<span class="string">&#x27;Correct!&#x27;</span>)</span><br><span class="line">           <span class="number">246</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">250</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">260</span> POP_TOP</span><br><span class="line">           <span class="number">262</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">           <span class="number">264</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><p>手撸字节码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">r = random.Random(<span class="number">322376503</span>)</span><br><span class="line">pt = <span class="built_in">input</span>(<span class="string">&#x27;Enter your flag: &#x27;</span>).encode()</span><br><span class="line">ct = <span class="string">b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span></span><br><span class="line">buf = []</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> pt:</span><br><span class="line">buf.append(r.randint(<span class="number">0</span>, <span class="number">255</span>) ^ b)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">bytes</span>(buf) == ct:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Correct!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> Assert Error</span><br></pre></td></tr></table></figure><p>然后编写脚本进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">r = random.Random(<span class="number">322376503</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">buf = <span class="string">b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> buf:</span><br><span class="line">    flag += <span class="built_in">chr</span>(i^(r.randint(<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag：flag{69858b56-4987-438f-a02c-5ab5c09e5138}</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在空白处添加代码</title>
      <link href="/2023/05/14/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%A4%84%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/05/14/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%A4%84%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="在空白处添加代码"><a href="#在空白处添加代码" class="headerlink" title="在空白处添加代码"></a>在空白处添加代码</h1><h4 id="PE文件分节："><a href="#PE文件分节：" class="headerlink" title="PE文件分节："></a>PE文件分节：</h4><div class="table-container"><table><thead><tr><th>节区名</th><th>功能</th></tr></thead><tbody><tr><td>.text</td><td>包含可执行代码</td></tr><tr><td>.rdata</td><td>包含程序中全局可访问的只读数据</td></tr><tr><td>.data</td><td>存储程序中都可以访问的全局数据</td></tr><tr><td>.idata</td><td>有时会显示和存储导入函数信息，如果此节不存在，导入函数信息会存储在rdata中</td></tr><tr><td>.edata</td><td>导出</td></tr><tr><td>.pdata</td><td>只在64位可执行文件中存在，存储异常处理信息</td></tr><tr><td>.rsrc</td><td>存储可执行文件所需的资源</td></tr><tr><td>.reloc</td><td>包含用来重定位库文件的信息</td></tr></tbody></table></div><h4 id="使用c语言在-text处添加shellcode"><a href="#使用c语言在-text处添加shellcode" class="headerlink" title="使用c语言在.text处添加shellcode"></a>使用c语言在.text处添加shellcode</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILEPATH_IN <span class="string">&quot;D:\\buu.exe&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILEPATH_OUT <span class="string">&quot;D:\\buu1.exe&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHELLCODE 0x12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MESSAGEBOXADDR 0x7561A7D0 <span class="comment">//messagebox的地址在每一次重启电脑都会有所改变</span></span></span><br><span class="line">DWORD <span class="title function_">ReadPEFile</span><span class="params">(OUT LPVOID* pFileBuffer)</span>;<span class="comment">//读取文件</span></span><br><span class="line">BOOL <span class="title function_">isPE</span><span class="params">(IN LPVOID pFileBuffer)</span>;<span class="comment">//判断是否为pe文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestAddCodeInCodeSec</span><span class="params">()</span>;<span class="comment">//在空白区域写入代码</span></span><br><span class="line">BOOL <span class="title function_">MemeryTOFile</span><span class="params">(LPVOID pMemBuffer, <span class="type">size_t</span> size)</span>;<span class="comment">//写入新的文件中</span></span><br><span class="line"></span><br><span class="line">BYTE shellcode[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x6A</span>,<span class="number">00</span>,<span class="number">0x6A</span>,<span class="number">00</span>,<span class="number">0x6A</span>,<span class="number">00</span>,<span class="number">0x6A</span>,<span class="number">00</span>,<span class="comment">//push参数</span></span><br><span class="line"><span class="number">0xE8</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="comment">//执行call</span></span><br><span class="line"><span class="number">0xE9</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span></span><br><span class="line">&#125;;<span class="comment">//定义全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">TestAddCodeInCodeSec();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">ReadPEFile</span><span class="params">(OUT LPVOID* pFileBuffer)</span><span class="comment">//读取PE文件</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* pFile = <span class="literal">NULL</span>;<span class="comment">//文件指针</span></span><br><span class="line">DWORD fileSize = <span class="number">0</span>;<span class="comment">//文件大小</span></span><br><span class="line">LPVOID pTempFileBuffer = <span class="literal">NULL</span>;<span class="comment">//申请空间指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">pFile = fopen(FILEPATH_IN, <span class="string">&quot;rb&quot;</span>);<span class="comment">//以二进制的可读形式打开文件</span></span><br><span class="line"><span class="keyword">if</span> (!pFile)<span class="comment">//如果读取的数据为空，则未能成功打开文件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法打开EXE文件！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取文件大小</span></span><br><span class="line">fseek(pFile, <span class="number">0</span>, SEEK_END);<span class="comment">//将文件指针指向文件末尾</span></span><br><span class="line">fileSize = ftell(pFile);<span class="comment">//读取文件大小</span></span><br><span class="line">fseek(pFile, <span class="number">0</span>, SEEK_SET);<span class="comment">//将文件指针放到起始位置</span></span><br><span class="line"><span class="comment">//分配缓冲区</span></span><br><span class="line">pTempFileBuffer = <span class="built_in">malloc</span>(fileSize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!pTempFileBuffer)<span class="comment">//如果没有成功申请内存空间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请内存空间失败！&quot;</span>);</span><br><span class="line">fclose(pFile);<span class="comment">//关闭文件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将文件数据读取到缓冲区</span></span><br><span class="line"><span class="type">size_t</span> n = fread(pTempFileBuffer, fileSize, <span class="number">1</span>, pFile);</span><br><span class="line"><span class="keyword">if</span> (!n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取数据失败！\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(pTempFileBuffer);<span class="comment">//释放开辟的内存空间</span></span><br><span class="line">fclose(pFile);<span class="comment">//关闭文件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">*pFileBuffer = pTempFileBuffer;<span class="comment">//将开辟的空间指针给我们的缓冲区指针</span></span><br><span class="line">pTempFileBuffer = <span class="literal">NULL</span>;<span class="comment">//释放指针</span></span><br><span class="line">fclose(pFile);</span><br><span class="line"><span class="keyword">return</span> fileSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">isPE</span><span class="params">(IN LPVOID pFileBuffer)</span><span class="comment">//判断是否是PE文件</span></span><br><span class="line">&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;<span class="comment">//PE的DOS头指针</span></span><br><span class="line">PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;<span class="comment">//NT头指针</span></span><br><span class="line">PIMAGE_FILE_HEADER pPEHeader = <span class="literal">NULL</span>;<span class="comment">//PE文件头指针</span></span><br><span class="line">PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;<span class="comment">//PE可选PE头的指针</span></span><br><span class="line">PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;<span class="comment">//文件的节表指针</span></span><br><span class="line">LPVOID pTempImageBuffer = <span class="literal">NULL</span>;<span class="comment">//开辟内存空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pFileBuffer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;缓冲区指针无效&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否有有效的MZ标记（两位十六进制码占据一个字节）</span></span><br><span class="line"><span class="keyword">if</span> (*((PWORD)pFileBuffer) != IMAGE_DOS_SIGNATURE)<span class="comment">//将FileBuffer的指针强制转换为WORD类型（四字节） IMAGE_DOS_SIGNATURE宏定义PE头的MZ标志</span></span><br><span class="line">&#123;<span class="comment">//去FileBuffer的地址，读取两个字节的数据内容与DOS头即PE文件的标识进行对比</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不是有效的MZ标志&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;<span class="comment">//将pFileBuffe的文件指针,赋给Dos头指针（同种指针才可以互相赋值）</span></span><br><span class="line"><span class="comment">//判断是否是有效的PE标志，从文件头开始加上pe头从文件起始的偏移位置</span></span><br><span class="line"><span class="keyword">if</span> (*((PDWORD)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)</span><br><span class="line">&#123;<span class="comment">//强制转换为四个字节的指针，并且取其中的四个值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无有效的PE标志\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestAddCodeInCodeSec</span><span class="params">()</span><span class="comment">//在代码区添加shellcode</span></span><br><span class="line">&#123;</span><br><span class="line">LPVOID pFileBuffer = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">PBYTE codeBegin = <span class="literal">NULL</span>;</span><br><span class="line">BOOL isOK = FALSE;</span><br><span class="line">DWORD size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//File--&gt;FileBuffer</span></span><br><span class="line">size = ReadPEFile(&amp;pFileBuffer);</span><br><span class="line"><span class="keyword">if</span> (!pFileBuffer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件--&gt;缓冲区失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//谁得到指针谁去释放相应的内存空间</span></span><br><span class="line"><span class="comment">//判断是否为pe文件</span></span><br><span class="line"><span class="keyword">if</span> (!isPE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;并不是PE文件&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断代码段空闲区是否足够存储shellcode代码</span></span><br><span class="line">pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;</span><br><span class="line">pNTHeader = (PIMAGE_NT_HEADERS)((byte *)pFileBuffer + pDosHeader-&gt;e_lfanew);</span><br><span class="line">pFileHeader = (PIMAGE_FILE_HEADER)((byte*)pNTHeader + <span class="number">4</span>);</span><br><span class="line">pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((byte*)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line"><span class="comment">//第一个节目录指针</span></span><br><span class="line">pSectionHeader = (PIMAGE_SECTION_HEADER)((byte*)pOptionHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line"><span class="keyword">if</span> (((pSectionHeader-&gt;SizeOfRawData) - (pSectionHeader-&gt;Misc.VirtualSize)) &lt; SHELLCODE)</span><br><span class="line">&#123;<span class="comment">//求取在文件中对齐后和未对齐的差值，判断是否可以存储下编写的shellcode</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;代码空闲区空间不够&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(pFileBuffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将代码复制到空闲区</span></span><br><span class="line"><span class="comment">//shellcode起始位置,此处是在文件中代码段的最后一节</span></span><br><span class="line">codeBegin = (PBYTE)((byte*)pFileBuffer + pSectionHeader-&gt;PointerToRawData + pSectionHeader-&gt;Misc.VirtualSize);</span><br><span class="line"><span class="comment">//复制shellcode</span></span><br><span class="line"><span class="built_in">memcpy</span>(codeBegin, shellcode, SHELLCODE);</span><br><span class="line"><span class="comment">//修正E8(将跳转地址减去E8下一条指令的地址)                      //此处直接将codeBegin这个地址指针，直接强制改变为一个数据</span></span><br><span class="line">DWORD callAddr = (MESSAGEBOXADDR - (pOptionHeader-&gt;ImageBase + ((DWORD)codeBegin - (DWORD)pFileBuffer + <span class="number">0xD</span> - pSectionHeader-&gt;PointerToRawData + pSectionHeader-&gt;VirtualAddress)));</span><br><span class="line"><span class="comment">//跳转地址           E8的下一条指令的地址         shellcode的起始位置 + e8指令前这段指令的大小（push部分和e8指令） - 文件对齐大小 + 内存对齐大小</span></span><br><span class="line">*(PDWORD)(codeBegin + <span class="number">0x9</span>) = callAddr;<span class="comment">//向e8指令后的空白指令填写相应的地址参数</span></span><br><span class="line"><span class="comment">//修正E9,跳转到oep处，此时jmp后的地址依旧是跳转地址-jmp下一条指令地址</span></span><br><span class="line">DWORD jmpAddr = ((DWORD)pOptionHeader-&gt;AddressOfEntryPoint - (((DWORD)codeBegin + <span class="number">0x12</span>) - (DWORD)pFileBuffer - (DWORD)pSectionHeader-&gt;PointerToRawData + (DWORD)pSectionHeader-&gt;VirtualAddress ));</span><br><span class="line">*(PDWORD)(codeBegin + <span class="number">0xE</span>) = jmpAddr;</span><br><span class="line"><span class="comment">//修改OEP</span></span><br><span class="line">pOptionHeader-&gt;AddressOfEntryPoint = (DWORD)codeBegin - (DWORD)pFileBuffer - (DWORD)pSectionHeader-&gt;PointerToRawData + (DWORD)pSectionHeader-&gt;VirtualAddress;</span><br><span class="line"></span><br><span class="line">isOK = MemeryTOFile(pFileBuffer, size);</span><br><span class="line"><span class="keyword">if</span> (isOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;存盘成功&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(pFileBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">MemeryTOFile</span><span class="params">(LPVOID pMemBuffer, <span class="type">size_t</span> size)</span><span class="comment">//将newbuffer存盘</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有一个文件</span></span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line">fp = fopen(FILEPATH_OUT, <span class="string">&quot;wb+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line"><span class="comment">//向该文件中写入我们的newbuffer中的内容信息</span></span><br><span class="line">fwrite(pMemBuffer, size, <span class="number">1</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line">fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> PE文件结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印PE文件结构（C语言）</title>
      <link href="/2023/05/01/%E6%89%93%E5%8D%B0PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
      <url>/2023/05/01/%E6%89%93%E5%8D%B0PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="打印PE文件结构（C语言）"><a href="#打印PE文件结构（C语言）" class="headerlink" title="打印PE文件结构（C语言）"></a>打印PE文件结构（C语言）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> filepath <span class="string">&quot;&quot;</span></span></span><br><span class="line">LPVOID <span class="title function_">OpenFiles</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDOSHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">LPVOID buffer;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------读取文件头部信息-----------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------------------DOS头-----------------------------------\n&quot;</span>);</span><br><span class="line">buffer = OpenFiles();<span class="comment">//打开文件读取文件信息</span></span><br><span class="line">pDOSHeader = (PIMAGE_DOS_HEADER)buffer;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_magic                             %04x(PE文件的标识符MZ)\n&quot;</span>, pDOSHeader-&gt;e_magic);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_cblp                              %04x\n&quot;</span>, pDOSHeader-&gt;e_cblp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_cp                                %04x\n&quot;</span>, pDOSHeader-&gt;e_cp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_crlc                              %04x\n&quot;</span>, pDOSHeader-&gt;e_crlc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_cparhdr                           %04x\n&quot;</span>, pDOSHeader-&gt;e_cparhdr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_minalloc                          %04x\n&quot;</span>, pDOSHeader-&gt;e_minalloc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_maxalloc                          %04x\n&quot;</span>, pDOSHeader-&gt;e_maxalloc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_ss                                %04x\n&quot;</span>, pDOSHeader-&gt;e_ss);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_sp                                %04x\n&quot;</span>, pDOSHeader-&gt;e_sp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_csum                              %04x\n&quot;</span>, pDOSHeader-&gt;e_csum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_ip                                %04x\n&quot;</span>, pDOSHeader-&gt;e_ip);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_cs                                %04x\n&quot;</span>, pDOSHeader-&gt;e_cs);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_lfarlc                            %04x\n&quot;</span>, pDOSHeader-&gt;e_lfarlc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_ovno                              %04x\n&quot;</span>, pDOSHeader-&gt;e_ovno);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_res[4]                            %04x%04x%04x%04x\n&quot;</span>, pDOSHeader-&gt;e_res[<span class="number">0</span>], pDOSHeader-&gt;e_res[<span class="number">1</span>], pDOSHeader-&gt;e_res[<span class="number">2</span>], pDOSHeader-&gt;e_res[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_oemid                             %04x\n&quot;</span>, pDOSHeader-&gt;e_oemid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_oeminfo                           %04x\n&quot;</span>, pDOSHeader-&gt;e_oeminfo);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e_res2[10]                          %04x&quot;</span>, pDOSHeader-&gt;e_res2[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%04x&quot;</span>, pDOSHeader-&gt;e_res2[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ne_lfanew                            %08x(PE头文件偏移)\n&quot;</span>, pDOSHeader-&gt;e_lfanew);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n-------------------------------------NT头-----------------------------------\n&quot;</span>);</span><br><span class="line">pNTHeader = (PIMAGE_NT_HEADERS)((byte *)buffer + pDOSHeader-&gt;e_lfanew);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Signature                           %08x(PE标记)\n&quot;</span>, pNTHeader-&gt;Signature);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n-----------------------------------标准PE头---------------------------------\n&quot;</span>);</span><br><span class="line">pFileHeader = (PIMAGE_FILE_HEADER)((byte*)pNTHeader + <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Machine                             %04x(程序运行的CPU型号)\n&quot;</span>, pFileHeader-&gt;Machine);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NumberOfSections                    %04x(文件中存在的节的总数)\n&quot;</span>, pFileHeader-&gt;NumberOfSections);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TimeDateStamp                       %08x(时间日期戳)\n&quot;</span>, pFileHeader-&gt;TimeDateStamp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PointerToSymbolTable                %08x\n&quot;</span>, pFileHeader-&gt;PointerToSymbolTable);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NumberOfSymbols                     %08x\n&quot;</span>, pFileHeader-&gt;NumberOfSymbols);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfOptionalHeader                %04x(可选PE头的大小)\n&quot;</span>, pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Characteristics                     %04x(pe文件属性)\n&quot;</span>, pFileHeader-&gt;Characteristics);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n-----------------------------------可选PE头---------------------------------\n&quot;</span>);</span><br><span class="line">pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((byte*)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Magic                               %04x(文件类型)\n&quot;</span>, pOptionHeader-&gt;Magic);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MajorLinkerVersion                  %02x\n&quot;</span>, pOptionHeader-&gt;MajorLinkerVersion);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MinorLinkerVersion                  %02x\n&quot;</span>, pOptionHeader-&gt;MinorLinkerVersion);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfCode                          %08x(代码大小)\n&quot;</span>, pOptionHeader-&gt;SizeOfCode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfInitializedData               %08x(已初始化数据大小的和)\n&quot;</span>, pOptionHeader-&gt;SizeOfInitializedData);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfUninitializedData             %08x(未初始化数据大小的和)\n&quot;</span>, pOptionHeader-&gt;SizeOfUninitializedData);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AddressOfEntryPoint                 %08x(程序入口(OEP))\n&quot;</span>, pOptionHeader-&gt;AddressOfEntryPoint);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;BaseOfCode                          %08x(代码开始的基址)\n&quot;</span>, pOptionHeader-&gt;BaseOfCode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;BaseOfData                          %08x(数据开始的基址)\n&quot;</span>, pOptionHeader-&gt;BaseOfData);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ImageBase                           %08x(内存镜像基址)\n&quot;</span>, pOptionHeader-&gt;ImageBase);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SectionAlignment                    %08x(内存对齐)\n&quot;</span>, pOptionHeader-&gt;SectionAlignment);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;FileAlignment                       %08x(文件对齐)\n&quot;</span>, pOptionHeader-&gt;FileAlignment);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MajorOperatingSystemVersion         %04x\n&quot;</span>, pOptionHeader-&gt;MajorOperatingSystemVersion);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MinorOperatingSystemVersion         %04x\n&quot;</span>, pOptionHeader-&gt;MinorOperatingSystemVersion);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MajorImageVersion                   %04x\n&quot;</span>, pOptionHeader-&gt;MajorImageVersion);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MinorImageVersion                   %04x\n&quot;</span>, pOptionHeader-&gt;MinorImageVersion);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MajorSubsystemVersion               %04x\n&quot;</span>, pOptionHeader-&gt;MajorSubsystemVersion);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MinorSubsystemVersion               %04x\n&quot;</span>, pOptionHeader-&gt;MinorSubsystemVersion);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Win32VersionValue                   %08x\n&quot;</span>, pOptionHeader-&gt;Win32VersionValue);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfImage                         %08x(镜像大小)\n&quot;</span>, pOptionHeader-&gt;SizeOfImage);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfHeaders                       %08x(所有头+节表)\n&quot;</span>, pOptionHeader-&gt;SizeOfHeaders);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;CheckSum                            %08x(校验和)\n&quot;</span>, pOptionHeader-&gt;CheckSum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Subsystem                           %04x\n&quot;</span>, pOptionHeader-&gt;Subsystem);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;DllCharacteristics                  %04x\n&quot;</span>, pOptionHeader-&gt;DllCharacteristics);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfStackReserve                  %08x(初始化时保留的堆栈大小)\n&quot;</span>, pOptionHeader-&gt;SizeOfStackReserve);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfStackCommit                   %08x(初始化时实际提交的大小)\n&quot;</span>, pOptionHeader-&gt;SizeOfStackCommit);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfHeapReserve                   %08x(初始化时保留的堆大小)\n&quot;</span>, pOptionHeader-&gt;SizeOfHeapReserve);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfHeapCommit                    %08x(初始化时实际提交的大小)\n&quot;</span>, pOptionHeader-&gt;SizeOfHeapCommit);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;LoaderFlags                         %08x\n&quot;</span>, pOptionHeader-&gt;LoaderFlags);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NumberOfRvaAndSizes                 %08x(目录项数目，RVA数目和大小)\n&quot;</span>, pOptionHeader-&gt;NumberOfRvaAndSizes);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n-----------------------------------节表-------------------------------------\n&quot;</span>);</span><br><span class="line">pSectionHeader = (PIMAGE_SECTION_HEADER)((byte*)pOptionHeader + pFileHeader-&gt;SizeOfOptionalHeader);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pFileHeader-&gt;NumberOfSections; i++, pSectionHeader++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n------------------------------节表[%-8s]--------------------------------\n&quot;</span>, pSectionHeader-&gt;Name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Misc                                %08x(该节没有对齐前的真实尺寸)\n&quot;</span>, (pSectionHeader-&gt;Misc).VirtualSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VirtualAddress                      %08x(内存中的偏移地址)\n&quot;</span>, pSectionHeader-&gt;VirtualAddress);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SizeOfRawData                       %08x(节在文件中对齐后的尺寸)\n&quot;</span>, pSectionHeader-&gt;SizeOfRawData);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PointerToRawData                    %08x(节区在文件中的偏移)\n&quot;</span>, pSectionHeader-&gt;PointerToRawData);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PointerToRelocations                %08x\n&quot;</span>, pSectionHeader-&gt;PointerToRelocations);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PointerToLinenumbers                %08x\n&quot;</span>, pSectionHeader-&gt;PointerToLinenumbers);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NumberOfRelocations                 %04x\n&quot;</span>, pSectionHeader-&gt;NumberOfRelocations);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NumberOfLinenumbers                 %04x\n&quot;</span>, pSectionHeader-&gt;NumberOfLinenumbers);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Characteristics                     %08x(当前节的属性)\n&quot;</span>, pSectionHeader-&gt;Characteristics);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">LPVOID <span class="title function_">OpenFiles</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* pfile = <span class="literal">NULL</span>;<span class="comment">//文件指针</span></span><br><span class="line"><span class="type">size_t</span> filesize = <span class="number">0</span>;</span><br><span class="line">LPVOID filebuffer = <span class="literal">NULL</span>;<span class="comment">//申请储存文件的指针</span></span><br><span class="line"><span class="type">size_t</span> file;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">pfile = fopen(filepath, <span class="string">&quot;rb&quot;</span>);<span class="comment">//以二进制形式打开文件</span></span><br><span class="line"><span class="keyword">if</span> (!pfile)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有成功打开文件&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">// 程序异常退出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置文件指针到文件末尾处</span></span><br><span class="line">fseek(pfile, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//读取文件大小</span></span><br><span class="line">filesize = ftell(pfile);</span><br><span class="line"><span class="comment">//重定位指针</span></span><br><span class="line">fseek(pfile, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">filebuffer = <span class="built_in">malloc</span>(filesize);<span class="comment">//为存储文件信息开辟空间</span></span><br><span class="line"><span class="keyword">if</span> (!filebuffer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未能成功申请内存空间&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(filebuffer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(filebuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(filesize));<span class="comment">//初始化开辟的空间</span></span><br><span class="line"><span class="comment">//读取文件信息</span></span><br><span class="line">file = fread(filebuffer, filesize, <span class="number">1</span>, pfile);</span><br><span class="line">          <span class="comment">//文件存储位置  文件大小  读取次数 文件指针</span></span><br><span class="line"><span class="keyword">if</span> (!file)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取文件失败\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(filebuffer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(pfile);</span><br><span class="line"><span class="comment">//返回文件指针</span></span><br><span class="line"><span class="keyword">return</span> filebuffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> PE文件结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python逆向</title>
      <link href="/2023/04/20/Python/"/>
      <url>/2023/04/20/Python/</url>
      
        <content type="html"><![CDATA[<h1 id="Python逆向"><a href="#Python逆向" class="headerlink" title="Python逆向"></a>Python逆向</h1><h3 id="Python基础使用"><a href="#Python基础使用" class="headerlink" title="Python基础使用"></a>Python基础使用</h3><p>1.pip升级：在相应的python文件夹下，有python.exe的目录下cmd运行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python.exe -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>2.pip降级：在相应的python文件夹下，有python.exe的目录下cmd运行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install pip==指定版本号</span><br></pre></td></tr></table></figure><p>3.电脑python版本修改：电脑的python环境是由，环境变量中PATH变量下置顶的那一个python版本决定的，如果想要切换python的版本，可以选择直接修改环境变量中PATH变量下置顶的版本即可。</p><p>注意：有的时候可能会失灵，多试几次就行了。如果在终端中查看python环境切换正确，那么就是真的切换正确了。cmd中切换正确就不一定了</p><p>参考：<a href="https://blog.csdn.net/weixin_44244190/article/details/128116010">https://blog.csdn.net/weixin_44244190/article/details/128116010</a></p><h3 id="Pyinstaller打包"><a href="#Pyinstaller打包" class="headerlink" title="Pyinstaller打包"></a>Pyinstaller打包</h3><p>使用PyInstaller Extractor工具进行解包</p><p>在有pyinstxtractor.py的目录下cmd进入命令提示符窗口，同时将需要解包的文件复制到该目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py -xxx.exe</span><br><span class="line">直接在vscode终端：</span><br><span class="line">pyinstaller --onefile easy_python.py （这样不会有附加的一些资源库的调用）</span><br></pre></td></tr></table></figure><p>运行该指令后会得到一个文件夹，里面包含主程序所引用的所有库以及代码的pyc文件</p><p><strong>注意事项</strong>：需要在与exe文件相同的python环境去解包我们的exe文件（在解包之后可以通过查看目录下的pythonx.dll文件了解python版本环境），否则解包后的xxx.exe_extracted文件夹会是空的。</p><p>此时可能需要<strong>切换电脑的python版本</strong>，方法入上文所示</p><h4 id="识别被pyinstaller打包的python"><a href="#识别被pyinstaller打包的python" class="headerlink" title="识别被pyinstaller打包的python"></a>识别被pyinstaller打包的python</h4><ul><li>未被抹去掉特征的python：在.rdata段会出现<ul><li>“<strong><em>PyInstaller</em></strong>: FormatMessageW failed.”</li><li>“Installing <strong><em>PYZ</em></strong>: Could not get sys.path”</li></ul></li></ul><h3 id="pyd"><a href="#pyd" class="headerlink" title="pyd"></a>pyd</h3><h4 id="查看pyd信息"><a href="#查看pyd信息" class="headerlink" title="查看pyd信息"></a>查看pyd信息</h4><p>首先需要安装cython这个模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cython</span><br></pre></td></tr></table></figure><p>然后使用</p><p>比如我有个<code>unknown.cp38-win_amd64.pyd</code>这个名字的pyd文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unknown</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(unknown))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(unknown))//输出unknow的相关信息</span><br></pre></td></tr></table></figure><h3 id="pyc"><a href="#pyc" class="headerlink" title=".pyc"></a>.pyc</h3><p>运行.pyc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python 1.pyc</span><br><span class="line">python .\1.pyc</span><br></pre></td></tr></table></figure><p>将.py-&gt;.pyc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m py_compile filename.py  //生成的.pyc与原文件同名</span><br></pre></td></tr></table></figure><ol><li><p>uncompyle6反编译</p><p>版本存在一定的限制，3.9以上的python版本是无法使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 -o xxx.py xxx.pyc</span><br><span class="line">uncompyle6.exe xxx.pyc</span><br></pre></td></tr></table></figure></li><li><p>pycdc工具（3.9以上）</p><p>必须在终端中使用才可以（pycdc文件和需要反编译的文件在同一个目录下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pycdc xxx.pyc</span><br></pre></td></tr></table></figure></li></ol><p>​      参考：<a href="https://blog.csdn.net/qq_63585949/article/details/127080253">https://blog.csdn.net/qq_63585949/article/details/127080253</a></p><p>   3.在线网站</p><p>​      <a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a></p><h3 id="pyinstaller-—-gt-pyc-—-gt-源文件"><a href="#pyinstaller-—-gt-pyc-—-gt-源文件" class="headerlink" title="pyinstaller —&gt; .pyc —&gt; 源文件"></a>pyinstaller —&gt; .pyc —&gt; 源文件</h3><h4 id="exe-——-gt-pyc"><a href="#exe-——-gt-pyc" class="headerlink" title=".exe ——&gt; .pyc"></a>.exe ——&gt; .pyc</h4><p>​                              ——<strong>pyc文件修复</strong></p><p>如果电脑安装的python版本和需解包文件的python版本不同，需要我们利用.exe_extracted文件夹中的main.py(可能会是其他的名称)和struct.py对main.pyc文件进行修改</p><p><img src="https://user-images.githubusercontent.com/116374553/232314331-197c379c-6eaf-47bc-bb82-32573774cc26.png" style="zoom: 50%;" /></p><p><strong>补充小知识</strong>：python文件打包成exe文件过程中，会抹去pyc文件前的部分信息，所以在反编译之前需要检查并添加则部分信息</p><p>但是依我目前解包的文件来看，似乎我们的主函数反编译并没有太大问题，只是会影响注释的内容</p><p><strong>*就拿buu_login的解包后的文件来看</strong>：*</p><p><strong>我</strong>：</p><p>利用winhex分别打开</p><p><img src="https://user-images.githubusercontent.com/116374553/232316178-0feacf33-c441-476b-9d75-15a8b71207e8.png" style="zoom:50%;" /></p><p><img src="https://user-images.githubusercontent.com/116374553/232316236-65f6dc88-1b12-4639-8063-8b30851120aa.png" style="zoom:50%;" /></p><p>当我将main.pyc红框中的数据修改得和struct.pyc中一样的时候，反编译之后发现其实只有注释发生了变化（magic number占据四字节的内容，但是需要补齐其他的一些部分，以0补齐即可）</p><p><img src="https://user-images.githubusercontent.com/116374553/232315961-52f57892-30e0-48ed-9601-5acae8c77352.png" style="zoom: 100%;" /></p><p><strong>其他人</strong>：参考：<a href="https://blog.csdn.net/m0_46296905/article/details/116266390">https://blog.csdn.net/m0_46296905/article/details/116266390</a></p><p><img src="https://user-images.githubusercontent.com/116374553/232316731-50c3e5e3-dacd-4736-9186-b602bfff5d39.png" style="zoom: 67%;" /></p><p><img src="https://user-images.githubusercontent.com/116374553/232317353-1b76dccc-a18a-4a63-b79d-f075cd94c0bb.png" style="zoom:67%;" /></p><p>修改后的login.pyc</p><p><img src="https://user-images.githubusercontent.com/116374553/232317776-eef60c17-56c9-4b8c-8473-864c1fcb3e03.png" style="zoom:67%;" /></p><p>如果是在这种情况之下，当我们直接反编译login.pyc文件会出现以下的文字</p><p><img src="https://user-images.githubusercontent.com/116374553/232320756-ac6e1836-892d-4205-84cb-b3de3bc1e600.png" alt=""></p><p>所以就需要我们还原magic number(与python版本有关)，方法就是上图所示</p><p>其中还有一点就是向<strong>winhex中插入数据</strong>：</p><p>我们赋制struct中我们想要插入login.pyc的内容，也可以我们自己编写相应的内容在记事本中，然后粘贴到我们想要插入的起始位置</p><p>详细参考：<a href="https://blog.csdn.net/destiny1507/article/details/101352748?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161968055116780264099891%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161968055116780264099891&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-4-101352748.pc_search_result_cache&amp;utm_term=winhex%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE">https://blog.csdn.net/destiny1507/article/details/101352748?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161968055116780264099891%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161968055116780264099891&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-4-101352748.pc_search_result_cache&amp;utm_term=winhex%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE</a></p><h4 id="python魔数"><a href="#python魔数" class="headerlink" title="python魔数"></a>python魔数</h4><p>python2是前8位，python3是前16位</p><p>python3.6：330D0D0A7079693001010000E3000000</p><p>python3.10：6F0D0D0A000000007079693010010000</p><p>python3.11：A70D0D0A000000003A3E1C6484000000</p><h4 id="pyc-—-gt-源文件"><a href="#pyc-—-gt-源文件" class="headerlink" title=".pyc —&gt; 源文件"></a>.pyc —&gt; 源文件</h4><h5 id="1-无Key参数的逆向"><a href="#1-无Key参数的逆向" class="headerlink" title="1.无Key参数的逆向"></a>1.无Key参数的逆向</h5><p>直接用Extractor工具解包，再反编译即可</p><h5 id="2-有Key参数的逆向"><a href="#2-有Key参数的逆向" class="headerlink" title="2.有Key参数的逆向"></a>2.有Key参数的逆向</h5><p>pyinstaller打包原理，将py编译成pyc，然后部分压缩为pyz，然后程序再调用pyc和pyz</p><p>此类文件解包后生成的是被加密的pyc文件，使用的是AES加密算法，密钥会被被存放在“pyimod00_crypto_key.pyc”文件中。</p><p>在生成的xxx.exe_extracted文件夹中含有Base_Library.zip里面都是库文件的pyc</p><p><strong>解密脚本</strong>（将我们需要的加密pyc给解密就可以了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tinyaes</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"> </span><br><span class="line">CRYPT_BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从crypt_key.pyc获取key，也可自行反编译获取</span></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="string">&#x27;xxxxxxxx&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#——&gt;xxxxx为key</span></span><br><span class="line">inf = <span class="built_in">open</span>(<span class="string">&#x27;xxx.pyc.encrypted&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="comment"># 打开加密文件</span></span><br><span class="line">outf = <span class="built_in">open</span>(<span class="string">&#x27;xxx.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="comment"># 输出文件</span></span><br><span class="line"><span class="comment">#可能会打开和输出失败，请写入绝对路径</span></span><br><span class="line"><span class="comment"># 按加密块大小进行读取</span></span><br><span class="line">iv = inf.read(CRYPT_BLOCK_SIZE)</span><br><span class="line">cipher = tinyaes.AES(key, iv) </span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">plaintext = zlib.decompress(cipher.CTR_xcrypt_buffer(inf.read()))</span><br><span class="line"><span class="comment"># 补pyc头(最后自己补也行)，补齐magic number</span></span><br><span class="line">outf.write(<span class="string">b&#x27;\x6F\x0D\x0D\x0A\x00\x00\x00\x00\x70\x79\x69\x30\x10\x01\x00\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># 写入解密数据</span></span><br><span class="line">outf.write(plaintext)</span><br><span class="line">inf.close()</span><br><span class="line">outf.close()</span><br></pre></td></tr></table></figure><h3 id="Python字节码"><a href="#Python字节码" class="headerlink" title="Python字节码"></a>Python字节码</h3><h4 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h4><p>有花指令的pyc文件是无法利用umcompyle6进行反编译的，高版本利用pycdc会出现什么情况未知。</p><p>出现花指令，需要通过winhex修改错误的指令，查找位置是利用opcode.h(这个是每一个python环境自带的)，通过这个文件能够查清每一个字节码的所代表的值，修改此处后需要更改pyobject中co_code的长度，可以通过len(marshal.loads(f[8/16:]).co_code)查看原长度，f为文件流。找位置的话一般通过指令的所代表的值，co_code也通过这个方式寻找</p><p>【【Python逆向】浅谈CTF-Python逆向】<a href="https://www.bilibili.com/video/BV1JL4y1p7Tt?vd_source=0594117fb42cd21e3bfb0166f3dfae8b">https://www.bilibili.com/video/BV1JL4y1p7Tt?vd_source=0594117fb42cd21e3bfb0166f3dfae8b</a></p><p>谈到了花字节码</p><h4 id="pyc——-gt-字节码"><a href="#pyc——-gt-字节码" class="headerlink" title="pyc——&gt;字节码/"></a>pyc——&gt;字节码/</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;xxx.pyc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#如果直接填写pyc文件名称无法运行，就填写pyc文件的绝对路径(绝对路径不能过长，否者会打开文件失败)</span></span><br><span class="line">    f.seek(<span class="number">16</span>)</span><br><span class="line">    dis.dis(marshal.load(f))</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：运行这段代码的时候，需要pyc的python环境和软件的python环境一致，否者会失败</p><h4 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h4><h5 id="字节码-1"><a href="#字节码-1" class="headerlink" title="字节码"></a>字节码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实例：    5          0      LOAD_FAST       0(a)</span><br><span class="line">含义：源码行号|指令在函数中的偏移|操作指令|操作数|实际参数值</span><br></pre></td></tr></table></figure><h6 id="RESUME"><a href="#RESUME" class="headerlink" title="RESUME"></a>RESUME</h6><p>无操作。执行内部跟踪、调试和优化检查。</p><ul><li><code>0</code>函数的开始</li><li><code>1</code>表达式后<code>yield</code>          yield是一个将普通函数变成生成器，yield一个值，迭代是可以得到一个值</li><li><code>2</code>表达式后<code>yield from</code>     yield from是将后面的值变成一个可迭代对象</li></ul><p>参考：<a href="https://blog.csdn.net/qq_43192617/article/details/117791470">python中yield和yield from的区别（附代码理解）<em>yield和yield from区别</em>七分辣度的博客-CSDN博客</a></p><ul><li><code>3</code>表达式后<code>await</code>    await将等待对象（协程对象，Future，Task对象（IO等待））</li></ul><p>参考：<a href="https://blog.csdn.net/qq_43380180/article/details/111573642">Python 异步 async/await（进阶详解）<em>python await</em>零否的博客-CSDN博客</a></p><h6 id="LOAD-CONST"><a href="#LOAD-CONST" class="headerlink" title="LOAD_CONST"></a>LOAD_CONST</h6><p>加载 const 变量，比如数值、字符串等等，一般用于传给函数的参数</p><h6 id="STORE-CONST"><a href="#STORE-CONST" class="headerlink" title="STORE_CONST"></a>STORE_CONST</h6><p>一般用于保存值到局部变量</p><h6 id="LOAD-NAME"><a href="#LOAD-NAME" class="headerlink" title="LOAD_NAME"></a>LOAD_NAME</h6><p>加载函数的名字、某些集合、强制转换所用的变量类型</p><h6 id="STORE-NAME"><a href="#STORE-NAME" class="headerlink" title="STORE_NAME"></a>STORE_NAME</h6><p>变量名</p><h6 id="导入函数包"><a href="#导入函数包" class="headerlink" title="导入函数包"></a><strong><em>导入函数包</em></strong></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>           <span class="number">2</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)                        <span class="comment">#import random</span></span><br><span class="line">            <span class="number">4</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">            <span class="number">6</span> IMPORT_NAME              <span class="number">0</span> (random)                   </span><br><span class="line">            <span class="number">8</span> STORE_NAME               <span class="number">0</span> (random)</span><br></pre></td></tr></table></figure><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h6 id="函数的调用-LOAD-NAME和LOAD-ATTR-PRECALL和CALL"><a href="#函数的调用-LOAD-NAME和LOAD-ATTR-PRECALL和CALL" class="headerlink" title="函数的调用(LOAD_NAME和LOAD_ATTR PRECALL和CALL )"></a><strong><em>函数的调用</em></strong>(LOAD_NAME和LOAD_ATTR PRECALL和CALL )</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> PUSH_NULL                  <span class="comment">#r = random.Random(322376503)   </span></span><br><span class="line"><span class="number">12</span> LOAD_NAME                <span class="number">0</span> (random)</span><br><span class="line"><span class="number">14</span> LOAD_ATTR                <span class="number">1</span> (Random)</span><br><span class="line"><span class="number">24</span> LOAD_CONST               <span class="number">2</span> (<span class="number">322376503</span>)</span><br><span class="line"><span class="number">26</span> PRECALL                  <span class="number">1</span></span><br><span class="line"><span class="number">30</span> CALL                     <span class="number">1</span></span><br></pre></td></tr></table></figure><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = random.Random(<span class="number">322376503</span>)</span><br></pre></td></tr></table></figure><h6 id="BUILD-LIST"><a href="#BUILD-LIST" class="headerlink" title="BUILD_LIST"></a><em>BUILD_LIST</em></h6><p>创建列表</p><h6 id="for循环-GET-ITER和FOR-ITER"><a href="#for循环-GET-ITER和FOR-ITER" class="headerlink" title="for循环  GET_ITER和FOR_ITER"></a><strong><em>for循环</em></strong>  GET_ITER和FOR_ITER</h6><p>for循环的开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>         <span class="number">108</span> LOAD_NAME                <span class="number">5</span> (pt)            <span class="comment">#for b in pt:</span></span><br><span class="line">           <span class="number">110</span> GET_ITER</span><br><span class="line">       &gt;&gt;  <span class="number">112</span> FOR_ITER                <span class="number">46</span> (to <span class="number">206</span>)<span class="comment">#此处标注循环结束的位置</span></span><br><span class="line">           <span class="number">114</span> STORE_NAME               <span class="number">8</span> (b)</span><br></pre></td></tr></table></figure><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> pt:</span><br></pre></td></tr></table></figure><p>for循环的中间部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">116</span> LOAD_NAME                    <span class="number">7</span> (buf)  <span class="comment">#buf.append(r.randint(0,255)^b)</span></span><br><span class="line"><span class="number">118</span> LOAD_METHOD              <span class="number">9</span> (append)</span><br><span class="line"><span class="number">140</span> LOAD_NAME                <span class="number">2</span> (r)</span><br><span class="line"><span class="number">142</span> LOAD_METHOD             <span class="number">10</span> (randint)  <span class="comment">#调用的变量的函数的方法</span></span><br><span class="line"><span class="number">164</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line"><span class="number">166</span> LOAD_CONST               <span class="number">5</span> (<span class="number">255</span>)</span><br><span class="line"><span class="number">168</span> PRECALL                  <span class="number">2</span></span><br><span class="line"><span class="number">172</span> CALL                     <span class="number">2</span></span><br><span class="line"><span class="number">182</span> LOAD_NAME                <span class="number">8</span> (b)</span><br><span class="line"><span class="number">184</span> BINARY_OP               <span class="number">12</span> (^)</span><br><span class="line"><span class="number">188</span> PRECALL                  <span class="number">1</span></span><br><span class="line"><span class="number">192</span> CALL                     <span class="number">1</span></span><br><span class="line"><span class="number">202</span> POP_TOP</span><br><span class="line"><span class="number">204</span> JUMP_BACKWARD           <span class="number">47</span> (to <span class="number">112</span>)    <span class="comment">#跳转到该指令的地址</span></span><br></pre></td></tr></table></figure><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.append(r.randint(<span class="number">0</span>,<span class="number">255</span>)^b)</span><br></pre></td></tr></table></figure><h6 id="if…eles…语句"><a href="#if…eles…语句" class="headerlink" title="if…eles…语句"></a>if…eles…语句</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>     &gt;&gt;  <span class="number">206</span> PUSH_NULL                                   <span class="comment">#if bytes(buf) == ct:</span></span><br><span class="line">           <span class="number">208</span> LOAD_NAME               <span class="number">11</span> (<span class="built_in">bytes</span>)</span><br><span class="line">           <span class="number">210</span> LOAD_NAME                <span class="number">7</span> (buf)</span><br><span class="line">           <span class="number">212</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">216</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">226</span> LOAD_NAME                <span class="number">6</span> (ct)</span><br><span class="line">           <span class="number">228</span> COMPARE_OP               <span class="number">2</span> (==)</span><br><span class="line">           <span class="number">234</span> POP_JUMP_FORWARD_IF_TRUE     <span class="number">2</span> (to <span class="number">240</span>)      <span class="comment">#for循环的跳转的地址240</span></span><br><span class="line">           <span class="number">236</span> LOAD_ASSERTION_ERROR                         <span class="comment">#else:</span></span><br><span class="line">           <span class="number">238</span> RAISE_VARARGS            <span class="number">1</span>                   <span class="comment">#     assert False</span></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line"><span class="number">17</span>     &gt;&gt;  <span class="number">240</span> PUSH_NULL</span><br><span class="line">           <span class="number">242</span> LOAD_NAME               <span class="number">12</span> (<span class="built_in">print</span>)          <span class="comment">#print(&#x27;Correct!&#x27;)</span></span><br><span class="line">           <span class="number">244</span> LOAD_CONST               <span class="number">6</span> (<span class="string">&#x27;Correct!&#x27;</span>)</span><br><span class="line">           <span class="number">246</span> PRECALL                  <span class="number">1</span></span><br><span class="line">           <span class="number">250</span> CALL                     <span class="number">1</span></span><br><span class="line">           <span class="number">260</span> POP_TOP</span><br><span class="line">           <span class="number">262</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">           <span class="number">264</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><h5 id="指令符号"><a href="#指令符号" class="headerlink" title="指令符号"></a>指令符号</h5><p>参考：官方文档：<a href="https://docs.python.org/zh-cn/3.8/library/dis.html">https://docs.python.org/zh-cn/3.8/library/dis.html</a></p><h3 id="python题型"><a href="#python题型" class="headerlink" title="python题型"></a>python题型</h3><ol><li>pyc文件</li></ol><ul><li><p>3.9以下：uncompyle6</p><p>3.9以上：pycdc</p><p> 2.pyc字节码</p></li><li><p>根据opcode文档，反编译pyc文件</p><p> 3.exe打包</p></li><li><p>pyinstaller解包</p></li><li>恢复pyc文件的时间属性和魔术版本</li><li>pyc文件</li></ul><p>​    4.加花pyc</p><ul><li>根据uncompyle6和字节码判断花</li></ul><ol><li>读取co_code的长度</li><li>去掉花 并修改co_code长度</li><li>保存uncompyle6即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> Python逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF_rev2 我不是病毒2.0</title>
      <link href="/2023/04/20/%E6%88%91%E4%B8%8D%E6%98%AF%E7%97%85%E6%AF%922.0/"/>
      <url>/2023/04/20/%E6%88%91%E4%B8%8D%E6%98%AF%E7%97%85%E6%AF%922.0/</url>
      
        <content type="html"><![CDATA[<h1 id="XCTF-rev2-我不是病毒2-0"><a href="#XCTF-rev2-我不是病毒2-0" class="headerlink" title="XCTF_rev2 我不是病毒2.0"></a>XCTF_rev2 我不是病毒2.0</h1><p>利用ExeinfoPE打开可执行文件</p><p><img src="https://user-images.githubusercontent.com/116374553/232828656-3fe088ab-bed1-4276-9032-38bc01204f5b.png" style="zoom: 67%;" /></p><p>发现该文件是一个由python打包来的exe可执行文件，于是利用工具PyInstaller Extractor，对文件进行解包</p><p><strong>注意</strong>：此时电脑使用的python环境应该和文件自身的python环境相一致，否则解包之后PYZ-00.pyz_extracted是一个空的文件夹。（可以在第一次解包后，查看xxx.exe_extracted文件夹下的pythonxx.dll的版本，然后切换电脑python环境再次解包即可）</p><p>第一次解包文件</p><p><img src="https://user-images.githubusercontent.com/116374553/232830205-d7adda8c-2a0d-43f1-a1ed-baf286ffa4f6.png" style="zoom: 67%;" /></p><p>此时PYZ-00.pyz_extracted文件夹为空，于是查看文件运行的python版本，发现是3.10与我自身电脑环境版本不同，切换版本再次解包，此时的PYZ-00.pyz_extracted文件中已经有内容量。</p><p>在查看我不是病毒2.0.exe_extracted文件夹时，发现一个名为pyimod04_ctypes.pyc的pyc文件，可以知道这是一个有参数key的逆向，并且密钥为pyimod04_ctypes.pyc中的内容。</p><p>利用pycdc反编译main.pyc和pyimod4_ctypes.pyc。将相应的两个文件复制到pycdc相应的同级目录下，在终端中运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pycdc xxx.pyc</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/232840358-a142ec36-0266-40a3-a926-80bab4dfb97f.png" style="zoom: 50%;" /></p><p>反编译后可以知道，main.pyc的源码中导入了sign这个包，并且调用用了其中的main函数。</p><p>于是在PYZ-00.pyz_extracted文件夹中找到sign.pyc.encrypted文件，该文件是被加密过的于是我们需要利用密钥对其进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tinyaes</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"> </span><br><span class="line">CRYPT_BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从crypt_key.pyc获取key，也可自行反编译获取</span></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="string">&#x27;HelloHiHowAreYou&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#——&gt;xxxxx为key</span></span><br><span class="line">inf = <span class="built_in">open</span>(<span class="string">&#x27;sign.pyc.encrypted&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="comment"># 打开加密文件</span></span><br><span class="line">outf = <span class="built_in">open</span>(<span class="string">&#x27;sign.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="comment"># 输出文件</span></span><br><span class="line"><span class="comment">#如果打开和输出失败，可以写入绝对路径</span></span><br><span class="line"><span class="comment"># 按加密块大小进行读取</span></span><br><span class="line">iv = inf.read(CRYPT_BLOCK_SIZE)</span><br><span class="line">cipher = tinyaes.AES(key, iv) </span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">plaintext = zlib.decompress(cipher.CTR_xcrypt_buffer(inf.read()))</span><br><span class="line"><span class="comment"># 补pyc头(最后自己补也行)，补齐magic number</span></span><br><span class="line">outf.write(<span class="string">b&#x27;\x6F\x0D\x0D\x0A\x00\x00\x00\x00\x70\x79\x69\x30\x10\x01\x00\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># 写入解密数据</span></span><br><span class="line">outf.write(plaintext)</span><br><span class="line">inf.close()</span><br><span class="line">outf.close()</span><br></pre></td></tr></table></figure><p>其中需要补齐magic number，此处可以查看我不是病毒2.0.exe_extracted中的struct.pyc,利用winhex或者其他16进制编辑器打开，将从0x0~0xF,这段偏移的数据填写到outf.write中。</p><p><img src="https://user-images.githubusercontent.com/116374553/232843262-96126aa6-1fab-4579-b251-b872edc5fc10.png" alt=""></p><p>此外也可以直接查找python3.10的魔数，其余位补零即可</p><p>运行该文件之后会在指定目录(或同级目录下生成sign.pyc),将该文件进行反编译，源文件中有一部分数据进行了URL编码，对其进行解码，并且对一些包进行了重命名对其进行修改.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#使VirtualAlloc的返回值类型与我们系统位数一致</span></span><br><span class="line">    ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_void_p</span><br><span class="line">    </span><br><span class="line"><span class="comment">#-------------------------------------------------获取shellcode----------------------------------------------</span></span><br><span class="line">    myinput = <span class="built_in">input</span>(<span class="string">&#x27;您的输入：&#x27;</span>)</span><br><span class="line">    data_b64 = <span class="string">&#x27;9K98jTmDKCXlg9E2kepX4nAi8H0DB57IU57ybV37xjrw2zutw+KnxkoYur3IZzi2ep5tDC6jimCJ7fDpgQ5F3fJu4wHA0LVq9FALbjXN6nMy57KrU8DEloh+Cji3ED3eEl5YWAyb8ktBoyoOkL1c9ASWUPBniHmD7RSqWcNkykt/USjhft9+aV930Jl5VjD6qcXyZTfjnY5MH3u22O9NBEXLj3Y9N5VjEgF2cFJ+Tq7jj92iIlEkNvx8Jl+eH5/hipsonKLTnoLGXs4a0tTQX/uXQOTMBbtd70x04w1Pa0fp+vA9tCw+DXvXj0xmX8c5HMybhpPrwQYDonx7xtS+vRIj/OmU7GxkHOOqYdsGmGdTjTAUEBvZtinOxuR7mZ0r9k+c9da0W93TWm5+2LKNR6OJjmILaJn0lq4foYcfD5+JITDsOD6Vg01yLRG1B4A6OxJ7Rr/DBUabSu2fYf1c4sTFvWgfMV8il6QfJiNMGkVLey1cBPSobenMo+TQC1Ql0//9M4P01sOiwuuVKLvTyDEv6dKO//muVL9S2gq/aZUBWkjj/I5rUJ6Mlt4+jsngmuke9plAjw22fUgz+8uSzn40dhKXfBX/BOCnlwWsMGAefAfoz/XAsoVSG2ioLFmlcYe/WBgaUJEoRUSyv73yiEOTVwIK6EPnDlwRgZZHx2toLu8udpEZ0aKGkex5sn7P8Jf9AbD4/EiQU+FdoJSxGorPSZGvrc4=&#x27;</span></span><br><span class="line">    key = hashlib.md5(<span class="string">&#x27;云南&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    data = base64.b64decode(data_b64)</span><br><span class="line">    shellcode = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    length = <span class="built_in">len</span>(key)</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="comment">#rc4_init(利用密钥搅乱S-box盒)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + <span class="built_in">ord</span>(key[i % length])) % <span class="number">256</span></span><br><span class="line">        <span class="comment">#s[i] = s[j]</span></span><br><span class="line">        <span class="comment">#s[j] = s[i] </span></span><br><span class="line">        <span class="comment">#此处反编译错误</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#rc4_crypt(加密)</span></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        <span class="comment">#s[i] = s[j]</span></span><br><span class="line">        <span class="comment">#s[j] = s[i]</span></span><br><span class="line">        <span class="comment">#同上</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">        shellcode += <span class="built_in">bytes</span>([</span><br><span class="line">            m ^ s[(s[i] + s[j]) % <span class="number">256</span>]])    <span class="comment">#将需要加密的数据data(m)进行异或操作，同时将这些数据强制转换为byte类型以获取shellcode</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#-----------------------------------------利用ctypes加载shellcode-------------------------------------------</span></span><br><span class="line">    四川 = ctypes.create_string_buffer(myinput.encode())</span><br><span class="line">    <span class="comment">#调用kernel132.dll动态链接库中的VirtualAlloc(API函数)</span></span><br><span class="line">    ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="built_in">len</span>(shellcode)), ctypes.c_int(<span class="number">12288</span>), ctypes.c_int(<span class="number">64</span>))</span><br><span class="line">    <span class="comment">#利用RtlMoveMemory函数,将shellcode移动到申请的内存中</span></span><br><span class="line">    ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_void_p(ptr), (ctypes.c_ubyte * <span class="built_in">len</span>(shellcode)).from_buffer(<span class="built_in">bytearray</span>(shellcode)), ctypes.c_size_t(<span class="built_in">len</span>(shellcode)))</span><br><span class="line">    <span class="comment">#创建线程并执行shellcode</span></span><br><span class="line">    ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="number">0</span>), ctypes.c_void_p(ptr), ctypes.byref(四川), ctypes.c_int(<span class="number">0</span>), ctypes.pointer(ctypes.c_int(<span class="number">0</span>)))</span><br><span class="line">    <span class="comment">#等待线程结束</span></span><br><span class="line">    ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht), ctypes.c_int(-<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 四川.raw == <span class="string">b&#x27;%db%1b%00Dy\\C%cc%90_%ca.%b0%b7m%ab%11%9b^h%90%1bl%19%01%0c%eduP6%0c0%7f%c5E-L%b0%fb%ba%f6%9f%00&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;是的！你得到了！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="literal">None</span>(<span class="string">&#x27;不，再尝试更多。 （笑脸符号）&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/weixin_47224111/article/details/122227817">https://blog.csdn.net/weixin_47224111/article/details/122227817</a></p><p>通过观察发现这是一个典型的利用python中的ctypes模块加载shellcode，同时这段代码还利用RC4算法对数据加密后得到shellcode。</p><p>编写代码求取shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用md5对密钥进行解密</span></span><br><span class="line">key = hashlib.md5(<span class="string">&#x27;云南&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment">#对加密内容进行base64加密</span></span><br><span class="line">data_b64 = <span class="string">&#x27;9K98jTmDKCXlg9E2kepX4nAi8H0DB57IU57ybV37xjrw2zutw+KnxkoYur3IZzi2ep5tDC6jimCJ7fDpgQ5F3fJu4wHA0LVq9FALbjXN6nMy57KrU8DEloh+Cji3ED3eEl5YWAyb8ktBoyoOkL1c9ASWUPBniHmD7RSqWcNkykt/USjhft9+aV930Jl5VjD6qcXyZTfjnY5MH3u22O9NBEXLj3Y9N5VjEgF2cFJ+Tq7jj92iIlEkNvx8Jl+eH5/hipsonKLTnoLGXs4a0tTQX/uXQOTMBbtd70x04w1Pa0fp+vA9tCw+DXvXj0xmX8c5HMybhpPrwQYDonx7xtS+vRIj/OmU7GxkHOOqYdsGmGdTjTAUEBvZtinOxuR7mZ0r9k+c9da0W93TWm5+2LKNR6OJjmILaJn0lq4foYcfD5+JITDsOD6Vg01yLRG1B4A6OxJ7Rr/DBUabSu2fYf1c4sTFvWgfMV8il6QfJiNMGkVLey1cBPSobenMo+TQC1Ql0//9M4P01sOiwuuVKLvTyDEv6dKO//muVL9S2gq/aZUBWkjj/I5rUJ6Mlt4+jsngmuke9plAjw22fUgz+8uSzn40dhKXfBX/BOCnlwWsMGAefAfoz/XAsoVSG2ioLFmlcYe/WBgaUJEoRUSyv73yiEOTVwIK6EPnDlwRgZZHx2toLu8udpEZ0aKGkex5sn7P8Jf9AbD4/EiQU+FdoJSxGorPSZGvrc4=&#x27;</span></span><br><span class="line">data = base64.b64decode(data_b64)    </span><br><span class="line">key = <span class="built_in">bytes</span>(key.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment">#对得到的数据进行RC4的加密（RC4是流加密算法，加密解密密钥一致，过程也是一致的)</span></span><br><span class="line">cipher = ARC4.new(key)</span><br><span class="line">shellcode = cipher.encrypt(<span class="built_in">bytes</span>(data))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(shellcode))</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.lmlphp.com/user/58551/article/item/2347479/">https://www.lmlphp.com/user/58551/article/item/2347479/</a></p><p>并利用C语言加载shellcode</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = &#123; <span class="number">81</span>, <span class="number">232</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">72</span>, <span class="number">129</span>, <span class="number">193</span>, <span class="number">97</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">229</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">236</span>, <span class="number">104</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">77</span>, <span class="number">152</span>, <span class="number">199</span>, <span class="number">69</span>, <span class="number">252</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">233</span>, <span class="number">49</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">252</span>, <span class="number">193</span>, <span class="number">224</span>, <span class="number">4</span>, <span class="number">72</span>, <span class="number">152</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">85</span>, <span class="number">152</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">1</span>, <span class="number">219</span>, <span class="number">186</span>, <span class="number">51</span>, <span class="number">35</span>, <span class="number">1</span>, <span class="number">219</span>, <span class="number">186</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">160</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">255</span>, <span class="number">238</span>, <span class="number">221</span>, <span class="number">204</span>, <span class="number">187</span>, <span class="number">170</span>, <span class="number">153</span>, <span class="number">136</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">239</span>, <span class="number">205</span>, <span class="number">171</span>, <span class="number">144</span>, <span class="number">120</span>, <span class="number">86</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">176</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">186</span>, <span class="number">220</span>, <span class="number">254</span>, <span class="number">33</span>, <span class="number">67</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">9</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">184</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">64</span>, <span class="number">8</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">192</span>, <span class="number">187</span>, <span class="number">111</span>, <span class="number">171</span>, <span class="number">119</span>, <span class="number">3</span>, <span class="number">124</span>, <span class="number">235</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">216</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">239</span>, <span class="number">190</span>, <span class="number">173</span>, <span class="number">222</span>, <span class="number">13</span>, <span class="number">240</span>, <span class="number">173</span>, <span class="number">11</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">199</span>, <span class="number">69</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">235</span>, <span class="number">127</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">224</span>, <span class="number">8</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">176</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">77</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">216</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">232</span>, <span class="number">10</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">193</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">184</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">224</span>, <span class="number">8</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">160</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">77</span>, <span class="number">216</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">232</span>, <span class="number">10</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">193</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">216</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">69</span>, <span class="number">200</span>, <span class="number">1</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">125</span>, <span class="number">200</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">134</span>, <span class="number">118</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">85</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">16</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">16</span>, <span class="number">144</span>, <span class="number">131</span>, <span class="number">69</span>, <span class="number">252</span>, <span class="number">1</span>, <span class="number">131</span>, <span class="number">125</span>, <span class="number">252</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">142</span>, <span class="number">197</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">196</span>, <span class="number">104</span>, <span class="number">93</span>, <span class="number">89</span>, <span class="number">19</span>, <span class="number">45</span>, <span class="number">239</span>, <span class="number">197</span>, <span class="number">133</span>, <span class="number">72</span>, <span class="number">183</span>, <span class="number">185</span>, <span class="number">107</span>, <span class="number">151</span>, <span class="number">30</span>, <span class="number">51</span>, <span class="number">174</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">61</span>, <span class="number">1</span>, <span class="number">135</span>, <span class="number">228</span>, <span class="number">208</span>, <span class="number">161</span>, <span class="number">110</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">91</span>, <span class="number">206</span>, <span class="number">249</span>, <span class="number">238</span>, <span class="number">144</span>, <span class="number">92</span>, <span class="number">65</span>, <span class="number">174</span>, <span class="number">91</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">186</span>, <span class="number">214</span>, <span class="number">131</span>, <span class="number">243</span>, <span class="number">10</span>, <span class="number">63</span>, <span class="number">162</span>, <span class="number">60</span>, <span class="number">255</span>, <span class="number">167</span>, <span class="number">103</span>, <span class="number">240</span>, <span class="number">110</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">131</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">175</span>, <span class="number">5</span>, <span class="number">27</span>, <span class="number">91</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">55</span>, <span class="number">133</span>, <span class="number">233</span>, <span class="number">252</span>, <span class="number">61</span>, <span class="number">193</span>, <span class="number">245</span>, <span class="number">231</span>, <span class="number">61</span>, <span class="number">59</span>, <span class="number">227</span>, <span class="number">129</span>, <span class="number">22</span>, <span class="number">225</span>, <span class="number">192</span>, <span class="number">43</span>, <span class="number">104</span>, <span class="number">237</span>, <span class="number">12</span>, <span class="number">203</span>, <span class="number">161</span>, <span class="number">134</span>, <span class="number">59</span>, <span class="number">150</span>, <span class="number">195</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">233</span>, <span class="number">200</span>, <span class="number">247</span>, <span class="number">163</span>, <span class="number">104</span>, <span class="number">183</span>, <span class="number">40</span>, <span class="number">98</span>, <span class="number">202</span>, <span class="number">104</span>, <span class="number">230</span>, <span class="number">204</span>, <span class="number">147</span>, <span class="number">157</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">119</span>, <span class="number">147</span>, <span class="number">46</span>, <span class="number">155</span>, <span class="number">235</span>, <span class="number">94</span>, <span class="number">213</span>, <span class="number">116</span>, <span class="number">152</span>, <span class="number">199</span>, <span class="number">174</span>, <span class="number">139</span>, <span class="number">97</span>, <span class="number">102</span>, <span class="number">248</span>, <span class="number">253</span>, <span class="number">19</span>, <span class="number">93</span>, <span class="number">75</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">251</span>, <span class="number">201</span>, <span class="number">193</span>, <span class="number">54</span>, <span class="number">64</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">145</span>, <span class="number">20</span>, <span class="number">125</span>, <span class="number">35</span>, <span class="number">174</span>, <span class="number">155</span>, <span class="number">130</span>, <span class="number">10</span>, <span class="number">139</span>, <span class="number">197</span>, <span class="number">132</span>, <span class="number">41</span>, <span class="number">205</span>, <span class="number">74</span>, <span class="number">219</span>, <span class="number">102</span>, <span class="number">67</span>, <span class="number">16</span>, <span class="number">221</span>, <span class="number">44</span>, <span class="number">3</span>, <span class="number">204</span>, <span class="number">94</span>, <span class="number">136</span>, <span class="number">122</span>, <span class="number">119</span>, <span class="number">231</span>, <span class="number">48</span>, <span class="number">112</span>, <span class="number">43</span>, <span class="number">57</span>, <span class="number">105</span>, <span class="number">91</span>, <span class="number">184</span>, <span class="number">10</span>, <span class="number">128</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">73</span>, <span class="number">52</span>, <span class="number">164</span>, <span class="number">22</span>, <span class="number">59</span>, <span class="number">254</span>, <span class="number">165</span>, <span class="number">105</span>, <span class="number">223</span>, <span class="number">237</span>, <span class="number">58</span>, <span class="number">180</span>, <span class="number">94</span>, <span class="number">129</span>, <span class="number">143</span>, <span class="number">114</span>, <span class="number">73</span>, <span class="number">61</span>, <span class="number">210</span>, <span class="number">121</span>, <span class="number">123</span>, <span class="number">115</span>, <span class="number">85</span>&#125;;<span class="comment">//填写shellcode的内容</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  PVOID exec = VirtualAlloc(<span class="number">0</span>, <span class="keyword">sizeof</span>(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);<span class="comment">//申请内存空间同，PVOID &lt;=&gt; void *</span></span><br><span class="line">  <span class="built_in">memcpy</span>(exec, shellcode, <span class="keyword">sizeof</span>(shellcode));<span class="comment">//将shellcode拷贝到申请的内存中</span></span><br><span class="line">  ((<span class="type">void</span>(*)())exec)();<span class="comment">//调用exec函数指针,exec指针强制转换为空类型</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将生成的exe文件用IDA打开，进入main函数，点击进入shellcode，但是此时的shellcode还是存储在数据段的一堆数据，点击C——&gt;将shellcode分析为代码,并创建函数</p><p><img src="https://user-images.githubusercontent.com/116374553/232972873-08e5f203-4147-42ff-a14b-c8e93acaad56.png" style="zoom: 50%;" /></p><p>参考：<a href="https://blog.csdn.net/whatday/article/details/120588389">https://blog.csdn.net/whatday/article/details/120588389</a></p><p>其实此时还有部分的shellcode并不能变成代码</p><p><img src="https://user-images.githubusercontent.com/116374553/233099470-2ba66f1c-03b8-463f-aa57-9b21bfcd6c15.png" alt=""></p><p>应该是0x14001C187前面的一段shellcode数据运行时对后面一部分shellcode进行了解密，即前面的一段数据对后面的部分进行了SMC，</p><p>利用x64dbg加载被修改后的exe文件(即创建函数)，找到main函数，同时在循环结束之后的地方下一个断点，让程序能够顺利的将shellcode解密完成。</p><p><img src="https://user-images.githubusercontent.com/116374553/233129469-314e6b76-53fe-49e8-b19d-8686634a9e37.png" style="zoom:50%;" /></p><p>直接运行程序，但是程序并不是在断点处停下，而是因为异常停留在了shellcode函数的结束的地方(由于此时并没有ret指令，无法返回函数执行前的下一条指令)</p><p><img src="https://user-images.githubusercontent.com/116374553/233129954-907157e8-f773-448e-9dc7-bdba6f37065d.png" style="zoom: 67%;" /></p><p>将已有的数据dump出来。</p><p><img src="https://user-images.githubusercontent.com/116374553/233132073-f84512c6-efbf-411b-98e6-f4e99a47703b.png" style="zoom: 50%;" /></p><p>观察整体的汇编指令发现，之前只是push了一次rbp，那么pop rbp后就可以直接ret了，由于ret是0xC3，于是直接在之前的数据后再添加一个0xC3即可。</p><p>将新获得的shellcode重新加载，并再次使用IDA加载exe文件，即可获得真正的加密函数</p><p><img src="https://user-images.githubusercontent.com/116374553/233138920-0c8ca2c1-fa8a-494e-bd73-172596e994e4.png" alt=""></p><p>其中被框起来的部分便是shellcode新加载出来的部分函数，这部分内容主要是对a1进行了加密，并返回了result这一结果</p><p>经过分析可知，在sign.py文件中曾让我们输入了一个数据，同时这个数据被传到了新创建的线程之中，可想而知这个输入的数据应该就是flag，在文件结尾处，当输入的数据通过线程加密之后，如果数据等于给定的url编码数据，即可得到“是的！你得到了！”。</p><p><strong>注意</strong>：URL编码的实质就是在一堆两位的十六进制的数据前加上%</p><p>观察加密函数中v9在每一次循环中的第一次赋值，都是由我们输入的两位数据合并得到的(因为我们输入的数据都为char类型，即1个字节。然而在给v9赋值的时候对指针进行了类型的强制转换，将数据每一次的偏移变为了两个字节)，然后在进行一系列的加密操作，再将该值赋给result</p><p>即将我们输入的内容两两合并进行加密。</p><p><strong>注意</strong>：当一个小的数模以一个较大的数据的时候，结果就为这个小的数</p><p>编写脚本直接爆破数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> result[] = &#123; <span class="number">219</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">121</span>, <span class="number">92</span>, <span class="number">67</span>, <span class="number">204</span>, <span class="number">144</span>, <span class="number">95</span>, <span class="number">202</span>, <span class="number">46</span>, <span class="number">176</span>, <span class="number">183</span>, <span class="number">109</span>, <span class="number">171</span>, <span class="number">17</span>, <span class="number">155</span>, <span class="number">94</span>, <span class="number">104</span>, <span class="number">144</span>, <span class="number">27</span>, <span class="number">108</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">237</span>, <span class="number">117</span>, <span class="number">80</span>, <span class="number">54</span>, <span class="number">12</span>, <span class="number">48</span>, <span class="number">127</span>, <span class="number">197</span>, <span class="number">69</span>, <span class="number">45</span>, <span class="number">76</span>, <span class="number">176</span>, <span class="number">251</span>, <span class="number">186</span>, <span class="number">246</span>, <span class="number">159</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> _int16 rs;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v6, v9, v8;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rs = result[i * <span class="number">2</span>] + (result[i * <span class="number">2</span> + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>);<span class="comment">//将加密结果两两合并</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">127</span>; j++)<span class="comment">//前一位数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">127</span>; k++)<span class="comment">//后一位数据</span></span><br><span class="line">&#123;</span><br><span class="line">v8 = <span class="number">2029</span>;</span><br><span class="line">v9 = j + (k &lt;&lt; <span class="number">8</span>);</span><br><span class="line">v6 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (v8)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((v8 &amp; <span class="number">1</span>)！=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">v6 = v9 * v6 % <span class="number">0xD1EF</span>;</span><br><span class="line">&#125;</span><br><span class="line">v9 = v9 * v9 % <span class="number">0xD1EF</span>;</span><br><span class="line">v8 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v6 == rs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>, j, k);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag为：XCTF{5c7ad71b-6c91-4481-af7a-69726a66aea8}</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言</title>
      <link href="/2023/03/25/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%881%EF%BC%89/"/>
      <url>/2023/03/25/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p><strong><em>1</em></strong>.<strong>存储单元</strong>（1Byte）：存储器被划分为若干存储单元，由0开始编号</p><p><strong>2</strong>.<strong>CPU对存储器读写</strong>：①存储单元的地址（地址信息）</p><p>​                                      ②器件的选择，读或写命令（控制信息）</p><p>​                                      ③读或写的数据（数据信息）</p><p><img src="https://user-images.githubusercontent.com/116374553/227700054-8dbe6227-d6ef-4ff3-84cd-c67c5946cde9.jpeg" alt=""></p><p>地址总线：CPU通过地址总线来指定存储器单元</p><p>​                   N根地址线，则地址总线宽度为N，最多可以寻找2的N次方个内存单元</p><p>数据总线：CPU和外界的数据传送速度</p><p>控制总线：CPU提供对外部器件的多少种控制（对外部器件的控制能力）</p><h3 id="寄存器（8086-16位结构CPU）"><a href="#寄存器（8086-16位结构CPU）" class="headerlink" title="寄存器（8086 16位结构CPU）"></a>寄存器（8086 16位结构CPU）</h3><p><strong><em>1</em></strong>.<strong>通用寄存器</strong>(16位)：AX、BX、CX、DX</p><p><img src="https://user-images.githubusercontent.com/116374553/227700856-2f37a3bf-d81d-4512-abc6-c50461fee746.jpg" alt=""></p><p>AX低八位构成AL，高八位构成AH。(AL和AH均可独立使用)</p><p>补充：32位寄存器eax的低16位即是ax，64位寄存器rax的低32即是eax</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|63..32|31..16|15-8|7-0|</span><br><span class="line">               |AH.|AL.|</span><br><span class="line">               |AX.....|</span><br><span class="line">       |EAX............|</span><br><span class="line">|RAX...................|</span><br></pre></td></tr></table></figure><p>在单独的使用al和ah时，它们将是两个毫不相干的寄存器，当要存入al中的值大于al中能存储的内容的时候，将会丢弃高位值但并不会存储到ah中</p><p><strong><em>2</em></strong>.<strong>物理地址</strong> = 段地址 * 16 + 偏移地址 （由两个16位地址合成一个20位的物理地址）</p><p>​                    = 基础地址 + 偏移地址</p><p><strong><em>3</em></strong>.<strong>CS</strong>（段寄存器）<strong>和IP</strong>：</p><p>CS为代码段寄存器，IP为指令指针寄存器 </p><p> 补充：cs和ip或cs和eip一起构成了下一条即将执行的指令的完整地址</p><p>任意时刻CPU将CS:IP指向的内容当做指令执行（若将CS、IP中内容分别设为M、N，则指向地址16*CS+IP)</p><p>在读取一条指令之后，IP的值会自增（以便CPU读取下一条指令）</p><p>8086CPU在加电启动或复位后CS = FFFFH,IP = 0000H</p><p><strong><em>4</em></strong>.<strong>修改CS和IP</strong>（mov指令不能用来设置CS和IP的值）：</p><p>方式：jmp 指令</p><p>​        ①同时修改CS、IP：jmp 段地址：偏移地址</p><p>​        ②修改IP：jmp 某一合法寄存器（相当于将寄存器的值赋给了IP） </p><p><strong><em>5</em></strong>.<strong>段和代码段</strong>：</p><p>段：根据需要将一组内存单元定义为一个段。内存并未分段，段的划分来自CPU。由于求取内存单元物理地址的方式，使得可以用分段的方式来管理内存。</p><p>代码段：用来存放程序执行代码的一块内存区域。</p><p><strong><em>6</em></strong>.<strong>内存中字的存储</strong>：</p><p>CPU中用16位寄存器来存储一个字。高八位存放高位字节，低八位存放低位字节</p><p><img src="https://user-images.githubusercontent.com/116374553/227703751-bff5879f-7538-4ec1-b052-5932f31fd6dc.jpg" style="zoom: 20%;" /></p><p>字单元：存放一个字型数据（16位）的内存单元</p><p><strong><em>7</em></strong>.<strong>DS和[address]</strong>:</p><p>例子：将1000:0的数据读取到al中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov bx,1000H</span><br><span class="line">mov ds,bx  /*将段地址放入ds*/</span><br><span class="line">mov al,[0] /*mov 寄存器名，内存单元地址*/</span><br></pre></td></tr></table></figure><p>“[….]”表示一个内存单元，“[….]”中括号中的内容表示内存单元的偏移地址</p><p>注意：80886CPU不支持将数据直接送入段寄存器</p><p>区别ds和cs：cs为代码段寄存器</p><p>​                        ds为数据段寄存器</p><p><strong><em>8</em></strong>.<strong>mov、add、sub指令</strong>：</p><p>mov：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mov 寄存器，数据</span><br><span class="line">mov 寄存器，寄存器</span><br><span class="line">mov 寄存器，内存单元  /*将ds:[...]中的值传入寄存器中*/</span><br><span class="line">mov 内存单元，寄存器  /*将寄存器中的值传入ds:[...]中*/</span><br><span class="line">mov 段寄存器，寄存器  /*将数据传递给段寄存器*/</span><br><span class="line">mov 寄存器，段寄存器  /*从段寄存器向寄存器传递数据*/</span><br><span class="line">mov 内存单元，段寄存器/*从段寄存器向内存单元传送数据*/</span><br><span class="line">/*例如：</span><br><span class="line">mov ax,1000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov [0],cs</span><br><span class="line">*/</span><br><span class="line">mov 段寄存器，内存单元</span><br><span class="line">/*例如：</span><br><span class="line">mov ax,1000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ds,[0]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>add:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add 寄存器，数据</span><br><span class="line">add 寄存器，寄存器</span><br><span class="line">add 寄存器，内存单元</span><br><span class="line">add 内存单元，寄存器</span><br></pre></td></tr></table></figure><p>sub：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sub 寄存器 数据</span><br><span class="line">sub 寄存器，寄存器</span><br><span class="line">sub 寄存器，内存单元</span><br><span class="line">sub 内存单元，寄存器</span><br></pre></td></tr></table></figure><p><strong><em>9</em></strong>.<strong>数据段</strong>：指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。</p><p>用ds存放数据段地址</p><p><strong><em>10</em></strong>.<strong>栈</strong>：访问方式：栈顶的元素最后入栈，出栈的时候最先取出（这种规则称为：LIFO)</p><p>入栈：将一个新的元素放到栈顶</p><p>出栈：从栈顶取出一个元素</p><p><strong><em>11</em></strong>.<strong>CPU提供的栈机制</strong>：入栈（push)和出栈（pop)操作均以字为单位进行</p><p>SS段寄存器：栈顶的段地址</p><p>SP寄存器：偏移地址</p><p>任意时刻SS:SP指向栈顶元素</p><p>入栈的时候执行一次push指令，SP -= 2（入栈由高地址向低地址增长）</p><p><img src="https://user-images.githubusercontent.com/116374553/227724581-4a468204-32b6-4509-b19f-78b0c92fe23a.png" style="zoom:50%;" /></p><p>出栈的时候执行一次pop指令，  SP += 2</p><p><img src="https://user-images.githubusercontent.com/116374553/227724560-a1fde403-e9b0-4997-8e53-d9e055ce0cff.png" style="zoom:50%;" /></p><p><strong><em>12</em></strong>.<strong>栈顶超界</strong>：覆盖其他地址的内容</p><p><strong><em>13</em></strong>.<strong>push、pop指令</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">push 寄存器</span><br><span class="line">pop 寄存器</span><br><span class="line"></span><br><span class="line">push 段寄存器</span><br><span class="line">pop 段寄存器</span><br><span class="line"></span><br><span class="line">push 内存单元</span><br><span class="line">pop 内存单元</span><br></pre></td></tr></table></figure><p><strong>14</strong>.<strong>栈段</strong>：采用栈方式工作的一段内存</p><h3 id="逆向练习："><a href="#逆向练习：" class="headerlink" title="逆向练习："></a>逆向练习：</h3><h5 id="buu-WUSTCTF2020-level1"><a href="#buu-WUSTCTF2020-level1" class="headerlink" title="buu_[WUSTCTF2020]level1"></a>buu_[WUSTCTF2020]level1</h5><p>打开题目文件，其中有一个名为output的txt文本文件，和level1名字的文件</p><p>用Die打开文件，发现它是一个64位的ELF文件，用IDA64打开，查看main函数</p><p><img src="https://user-images.githubusercontent.com/116374553/227707380-d9d5219e-dc95-48ce-9ae3-37a44db6aba4.png" alt=""></p><p>main函数大概就是，以只读的形式打开一个名为flag的文件，然后将其中的内容存储到ptr数组中，然后对其内容进行加密，最终输出内容。for循环一共进行了19次，打开output文件，发现其中刚好是19个数字，可想而知这是程序的打印值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ptr = [<span class="string">&#x27;198&#x27;</span>, <span class="string">&#x27;232&#x27;</span>, <span class="string">&#x27;816&#x27;</span>, <span class="string">&#x27;200&#x27;</span>, <span class="string">&#x27;1536&#x27;</span>, <span class="string">&#x27;300&#x27;</span>, <span class="string">&#x27;6144&#x27;</span>, <span class="string">&#x27;984&#x27;</span>, <span class="string">&#x27;51200&#x27;</span>, <span class="string">&#x27;570&#x27;</span>, <span class="string">&#x27;92160&#x27;</span>, <span class="string">&#x27;1200&#x27;</span>, <span class="string">&#x27;565248&#x27;</span>, <span class="string">&#x27;756&#x27;</span>, <span class="string">&#x27;1474560&#x27;</span>, <span class="string">&#x27;800&#x27;</span>, <span class="string">&#x27;6291456&#x27;</span>, <span class="string">&#x27;1782&#x27;</span>, <span class="string">&#x27;65536000&#x27;</span>,<span class="string">&#x27;0&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(ptr[i - <span class="number">1</span>]) &gt;&gt; i)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">int</span>(ptr[i - <span class="number">1</span>])/i))),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>最终输出：ctf2020{d9-dE6-20c}</p><p>则flag为：flag{d9-dE6-20c}</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言自动走迷宫</title>
      <link href="/2023/03/18/c%E8%AF%AD%E8%A8%80%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB/"/>
      <url>/2023/03/18/c%E8%AF%AD%E8%A8%80%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言自动走迷宫"><a href="#C语言自动走迷宫" class="headerlink" title="C语言自动走迷宫"></a><strong><em>C语言自动走迷宫</em></strong></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y,<span class="type">int</span> step)</span>;<span class="comment">//DFS算法</span></span><br><span class="line"><span class="type">char</span> dir[<span class="number">4</span>] = &#123; <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;d&#x27;</span> &#125;;<span class="comment">//下，左，上，右（定义方向）</span></span><br><span class="line"><span class="type">char</span> t = <span class="string">&#x27; &#x27;</span>;<span class="comment">//通路</span></span><br><span class="line"><span class="type">char</span> q = <span class="string">&#x27;*&#x27;</span>;<span class="comment">//墙</span></span><br><span class="line"><span class="comment">//以上部分需要根据迷宫内容进行更改</span></span><br><span class="line"><span class="type">int</span> end_x, end_y;<span class="comment">//迷宫的终点</span></span><br><span class="line"><span class="type">int</span> N_x, N_y;<span class="comment">//地图的行和列</span></span><br><span class="line"><span class="type">char</span> maze[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//定义地图</span></span><br><span class="line"><span class="type">int</span> v[<span class="number">100</span>][<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//判断是否走过该地址，0为未经过，1为经过</span></span><br><span class="line"><span class="type">char</span> flag[<span class="number">100</span>];<span class="comment">//获取迷宫路径</span></span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;<span class="comment">//用于坐标移动</span></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y, step = <span class="number">0</span>;<span class="comment">//step步数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入迷宫的行数和列数：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d%d&quot;</span>, &amp;N_x, &amp;N_y);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入迷宫地图：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N_x; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N_y; j++)</span><br><span class="line">scanf_s(<span class="string">&quot;%c&quot;</span>, &amp;maze[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入迷宫的起点坐标：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入迷宫的终点坐标：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d%d&quot;</span>, &amp;end_x, &amp;end_y);</span><br><span class="line">dfs(x, y, step);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> step)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">1</span>)<span class="comment">//以保证第一次开始运算时没有将ch的初值赋给flag</span></span><br><span class="line">flag[step - <span class="number">1</span>] = ch;</span><br><span class="line"><span class="keyword">if</span> ((x == end_x &amp;&amp; y == end_y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag&#123;%s&#125;\n&quot;</span>, flag);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; N_x || y &lt; <span class="number">0</span> || y &gt; N_y)<span class="comment">//判断有没有出地图</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (maze[x + dx[i]][y + dy[i]] == t &amp;&amp; v[x + dx[i]][y + dy[i]] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line">ch = dir[i];</span><br><span class="line">v[x + dx[i]][y + dy[i]] = <span class="number">1</span>;</span><br><span class="line">dfs(x + dx[i], y + dy[i], step + <span class="number">1</span>);</span><br><span class="line">step -= <span class="number">1</span>;<span class="comment">//回溯时还原之前的值</span></span><br><span class="line">v[x + dx[i]][y + dy[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 迷宫问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷宫问题</title>
      <link href="/2023/03/07/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/07/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><p>解决了几道迷宫问题后，对该类型问题的一些浅薄认识及自我总结。</p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>1.在题目中会有一个大的循环，其中会包含四个小的分支结构。循环的末尾处也会有一个双分支结构用来判断迷宫是否到达出口点或是碰到墙壁（通常此处的判断条件会告诉我们迷宫的宽度)。</p><p>2.特点1中的四个分支结构语句，用来判断方向（通常分支结构语句中会有两个整数，进行加一减一来改变方向）。</p><p>3.会有数组用来存放地图，数组中会大量的出现*、#或者0、1等一系列具有代表性的显性信号。</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>1.寻找地图（结合迷宫数组和迷宫长度)</p><p>2.找到迷宫的出口和入口，以及墙壁和通路。</p><p>3.判断方向（结合while循环结尾处的判断条件和分支语句中整数加减1的情况）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.当遇到题目中含有并未赋值的数组却又需要用，可能需要考略它的地址是否和其他变量的地址有一定联系。</p><p>2.分析程序时尽可能的找到关键点（字符串等）。</p><p>3.对于反汇编代码中的一些int型数据，可以考略转换为char类型。</p><p>大多的迷宫问题，一般不仅仅只是专注于迷宫问题，其中还会伴随着ELF文件的动态调试（例如：通过动态态调试寻找迷宫图像）、对程序的脱壳等一系列的其他问题。这些问题都还有待我进一步的学习。</p><p>相关题目在另一篇博客中</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 迷宫问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PVZ</title>
      <link href="/2023/02/02/PVZ-%E4%BF%AE%E6%94%B9%E5%99%A8/"/>
      <url>/2023/02/02/PVZ-%E4%BF%AE%E6%94%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="PVZ"><a href="#PVZ" class="headerlink" title="PVZ"></a>PVZ</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SunValue</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MoneyValue</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">AutomaticCollection</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CoolingTime</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PotatoesBreak</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LaunchSpeed</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">StartCar</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Seckill</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BackgroundOperation</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">JumpGrade</span><span class="params">(HANDLE hProcess)</span>;</span><br><span class="line">DWORD <span class="title function_">Adress</span><span class="params">(HANDLE hProcess, DWORD BaseAddress, DWORD FirstOffset, DWORD SecondOffset, <span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">float</span> <span class="title function_">Adress1</span><span class="params">(HANDLE hProcess, DWORD BaseAddress, DWORD FirstOffset, DWORD SecondOffset, DWORD ThirdOffset)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">WhichCarRunning</span><span class="params">(HANDLE hProcess,<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">AllCar</span><span class="params">(HANDLE hProcess, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">RunningTime</span><span class="params">(<span class="type">int</span> second, <span class="type">time_t</span> start)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Time</span><span class="params">(<span class="type">char</span> ch)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">WriteToMemory</span><span class="params">(HANDLE hProcess, <span class="type">int</span>* pSnAddr, <span class="type">int</span> n, <span class="type">unsigned</span> <span class="type">char</span>* pDnAddr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">HWND hGameWnd = FindWindow(<span class="string">L&quot;MainWindow&quot;</span>, <span class="string">L&quot;Plants vs. Zombies&quot;</span>);<span class="comment">//HWND窗口句柄：窗口的ID</span></span><br><span class="line"><span class="keyword">if</span> (hGameWnd == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;并没有运行“Plants vs. Zombies”\n请打开游戏&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;成功识别游戏！！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">DWORD dwPID;<span class="comment">//窗口进程ID</span></span><br><span class="line">GetWindowThreadProcessId(hGameWnd, &amp;dwPID);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;进程ID：%d\n&quot;</span>, dwPID);</span><br><span class="line"><span class="keyword">if</span> (dwPID == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取PID失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;成功获取PID\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID);<span class="comment">//获取进程句柄</span></span><br><span class="line"><span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开进程失败。错误代号：%d\n&quot;</span>, GetLastError());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————————————Plants vs. Zombies————————\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你可以获取以下的功能：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.修改阳光值\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.修改金币值\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.自动收集\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4.关闭冷却时间\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5.解除土豆破土时间\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6.豌豆射手发射加速\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;7.无限启动割草机\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;8.僵尸秒杀（普通僵尸、安全帽、盾牌护具有用)\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;9.后台运行(运行期间无法转换关卡,点击菜单)\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;10.跳关\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择你所需要的功能(退出请按0）:&quot;</span>);</span><br><span class="line"></span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;flag);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">SunValue(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">2</span>)</span><br><span class="line">MoneyValue(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">3</span>)</span><br><span class="line">AutomaticCollection(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">4</span>)</span><br><span class="line">CoolingTime(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">5</span>)</span><br><span class="line">PotatoesBreak(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">6</span>)</span><br><span class="line">LaunchSpeed(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">7</span>)</span><br><span class="line">StartCar(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">8</span>)</span><br><span class="line">Seckill(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">9</span>)</span><br><span class="line">BackgroundOperation(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">10</span>)</span><br><span class="line">JumpGrade(hProcess);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入正确的选项！！！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————------------------——————————\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SunValue</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Sunvalue;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你想要的阳光值(0~9990)：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;Sunvalue);</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9F38</span>, <span class="number">0x768</span>, <span class="number">0x5560</span>, <span class="number">1</span>)), &amp;Sunvalue, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MoneyValue</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Moneyvalue;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你想要金币值：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;Moneyvalue);</span><br><span class="line">Moneyvalue /= <span class="number">10</span>;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9F38</span>, <span class="number">0x82C</span>, <span class="number">0x28</span>, <span class="number">1</span>)), &amp;Moneyvalue, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AutomaticCollection</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> buffer[<span class="number">4</span>] = &#123; <span class="number">0x80</span>,<span class="number">0x7B</span>,<span class="number">0x50</span>,<span class="number">0x01</span> &#125;;<span class="comment">//修改的字节</span></span><br><span class="line">WriteToMemory(hProcess, (<span class="type">int</span>*)buffer, <span class="number">4</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="number">0x0043158B</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CoolingTime</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择冷却关闭时间(t/s)(一旦开启无法进行其他操作)\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a.30   b.60   c.90  d.120\n请做出选择：&quot;</span>);</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> second;<span class="comment">//时间</span></span><br><span class="line">second = Time(ch);</span><br><span class="line"><span class="type">time_t</span> start = time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">while</span> (RunningTime(second, start))</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(<span class="number">0x70</span> + i * <span class="number">0x50</span> + Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x144</span>, <span class="number">0</span>)), &amp;m, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PotatoesBreak</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> buffer[<span class="number">7</span>] = &#123; <span class="number">0xC7</span>,<span class="number">0x40</span>,<span class="number">0x54</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span> &#125;;<span class="comment">//修改的字节</span></span><br><span class="line">WriteToMemory(hProcess, (<span class="type">int</span>*)buffer, <span class="number">7</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="number">0x0045E34B</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LaunchSpeed</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择想要的发射速度\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a.1倍  b.2倍  c.3倍  d.4倍\n请做出选择：&quot;</span>);</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="type">int</span> buffer[<span class="number">4</span>] = &#123; <span class="number">0x83</span>,<span class="number">0x46</span>,<span class="number">0x58</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">buffer[<span class="number">3</span>] = <span class="number">0xFF</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">buffer[<span class="number">3</span>] = <span class="number">0xFE</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">buffer[<span class="number">3</span>] = <span class="number">0xFD</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">buffer[<span class="number">3</span>] = <span class="number">0xFC</span>;</span><br><span class="line">WriteToMemory(hProcess, (<span class="type">int</span>*)buffer, <span class="number">4</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="number">0x0045F8A9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">StartCar</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入想要哪一辆割草机启动(从上到下1~n(n&lt;=5))或者全部启动(6)\n请做出选择：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">WhichCarRunning(hProcess, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seckill</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> buffer[<span class="number">2</span>] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">WriteToMemory(hProcess, (<span class="type">int</span>*)buffer, <span class="number">2</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="number">0x0053178A</span>);<span class="comment">//普通僵尸，修改的字节0x7F,0x1D</span></span><br><span class="line">WriteToMemory(hProcess, (<span class="type">int</span>*)buffer, <span class="number">2</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="number">0x00531066</span>);<span class="comment">//头盔打掉，0x75，0x11</span></span><br><span class="line">WriteToMemory(hProcess, (<span class="type">int</span>*)buffer, <span class="number">2</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="number">0x00530CB1</span>);<span class="comment">//打掉盾牌，0x75，0x17</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">BackgroundOperation</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择后台运行状态\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a.开启  b.关闭\n请做出选择：&quot;</span>);</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="type">int</span> readbuffer[<span class="number">6</span>] = &#123; <span class="number">0x8B</span>,<span class="number">0x81</span>,<span class="number">0x2C</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span> &#125;;<span class="comment">//读取的字节</span></span><br><span class="line"><span class="type">int</span> buffer[<span class="number">6</span>] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span> &#125;;<span class="comment">//修改的字节</span></span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">WriteToMemory(hProcess, (<span class="type">int</span>*)buffer, <span class="number">6</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="number">0x00546310</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">WriteToMemory(hProcess, (<span class="type">int</span>*)readbuffer, <span class="number">6</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="number">0x00546310</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">JumpGrade</span><span class="params">(HANDLE hProcess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> grade;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入关卡后，请点击菜单重新运行\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你要选择的关卡(以去掉关卡中间的“-”的形式输入——例如：1-1(11))：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;grade);</span><br><span class="line">grade -= <span class="number">10</span>;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x82C</span>, <span class="number">0x24</span>, <span class="number">1</span>)), &amp;grade, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">Adress</span><span class="params">(HANDLE hProcess, DWORD BaseAddress, DWORD FirstOffset, DWORD SecondOffset, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD Base = <span class="number">0</span>;</span><br><span class="line">ReadProcessMemory(hProcess, (<span class="type">void</span>*)BaseAddress, &amp;Base, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">DWORD First = <span class="number">0</span>;</span><br><span class="line">ReadProcessMemory(hProcess, (<span class="type">void</span>*)(Base + FirstOffset), &amp;First, <span class="number">4</span>, <span class="literal">NULL</span>);<span class="comment">//一级偏移</span></span><br><span class="line">DWORD Second = <span class="number">0</span>;</span><br><span class="line">ReadProcessMemory(hProcess, (<span class="type">void</span>*)(First + SecondOffset), &amp;Second, <span class="number">4</span>, <span class="literal">NULL</span>);<span class="comment">//二级偏移</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> First + SecondOffset;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> Second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">Adress1</span><span class="params">(HANDLE hProcess, DWORD BaseAddress, DWORD FirstOffset, DWORD SecondOffset, DWORD ThirdOffset)</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD Base = <span class="number">0</span>;</span><br><span class="line">ReadProcessMemory(hProcess, (<span class="type">void</span>*)BaseAddress, &amp;Base, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">DWORD First = <span class="number">0</span>;</span><br><span class="line">ReadProcessMemory(hProcess, (<span class="type">void</span>*)(Base + FirstOffset), &amp;First, <span class="number">4</span>, <span class="literal">NULL</span>);<span class="comment">//一级偏移</span></span><br><span class="line">DWORD Second = <span class="number">0</span>;</span><br><span class="line">ReadProcessMemory(hProcess, (<span class="type">void</span>*)(First + SecondOffset), &amp;Second, <span class="number">4</span>, <span class="literal">NULL</span>);<span class="comment">//二级偏移</span></span><br><span class="line"><span class="type">float</span> Third = <span class="number">0</span>;</span><br><span class="line">ReadProcessMemory(hProcess, (<span class="type">void</span>*)(Second + ThirdOffset), &amp;Third, <span class="number">4</span>, <span class="literal">NULL</span>);<span class="comment">//三级偏移</span></span><br><span class="line"><span class="keyword">return</span> Third;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WhichCarRunning</span><span class="params">(HANDLE hProcess, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> m1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k1 , k2 , k3 , k4 , k5;</span><br><span class="line">k1 = k2 = k3 = k4 = k5 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">5</span> &amp;&amp; n &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span> + <span class="number">0x48</span> * (n - <span class="number">1</span>)), &amp;m, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">while</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span> + <span class="number">0x48</span> * (n - <span class="number">1</span>)) &lt;= (<span class="type">float</span>)<span class="number">785</span>);</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span> + <span class="number">0x48</span> * (n - <span class="number">1</span>)), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span> + <span class="number">0x48</span> * i), &amp;m, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span> + <span class="number">0x48</span>) != (<span class="type">float</span>)<span class="number">-21</span>)<span class="comment">//1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (k1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span>) &gt; (<span class="type">float</span>)<span class="number">785</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span>), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">k1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span> + <span class="number">0x48</span> * <span class="number">3</span>) != (<span class="type">float</span>)<span class="number">-21</span>)<span class="comment">//3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (k1 == <span class="number">0</span> || k2 == <span class="number">0</span> || k3 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span>) &gt; (<span class="type">float</span>)<span class="number">785</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span>), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">k1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span> + <span class="number">0x48</span>) &gt; (<span class="type">float</span>)<span class="number">785</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span> + <span class="number">0x48</span>), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">k2 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span> + <span class="number">0x48</span> * <span class="number">2</span>) &gt; (<span class="type">float</span>)<span class="number">785</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span> + <span class="number">0x48</span> * <span class="number">2</span>), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">k3 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//5</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (k1 == <span class="number">0</span> || k2 == <span class="number">0</span> || k3 == <span class="number">0</span> || k4 == <span class="number">0</span> || k5 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span>) &gt; (<span class="type">float</span>)<span class="number">785</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span>), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">k1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span> + <span class="number">0x48</span>) &gt; (<span class="type">float</span>)<span class="number">785</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span> + <span class="number">0x48</span>), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">k2 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span> + <span class="number">0x48</span> * <span class="number">2</span>) &gt; (<span class="type">float</span>)<span class="number">785</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span> + <span class="number">0x48</span> * <span class="number">2</span>), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">k3 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span> + <span class="number">0x48</span> * <span class="number">3</span>) &gt; (<span class="type">float</span>)<span class="number">785</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span> + <span class="number">0x48</span> * <span class="number">3</span>), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">k4 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">float</span>)Adress1(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0x8</span> + <span class="number">0x48</span> * <span class="number">4</span>) &gt; (<span class="type">float</span>)<span class="number">785</span>)</span><br><span class="line">&#123;</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(Adress(hProcess, <span class="number">0x6A9EC0</span>, <span class="number">0x768</span>, <span class="number">0x100</span>, <span class="number">0</span>) + <span class="number">0x2C</span> + <span class="number">0x48</span> * <span class="number">4</span>), &amp;m1, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">k5 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">RunningTime</span><span class="params">(<span class="type">int</span> second, <span class="type">time_t</span> start)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((time(<span class="literal">NULL</span>) - start) &gt; second)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Time</span><span class="params">(<span class="type">char</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">90</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">120</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WriteToMemory</span><span class="params">(HANDLE hProcess, <span class="type">int</span>* pSnAddr, <span class="type">int</span> n, <span class="type">unsigned</span> <span class="type">char</span>* pDnAddr)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">WriteProcessMemory(hProcess, (<span class="type">void</span>*)(pDnAddr + i), pSnAddr + i, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">//将pSnAddr指向的字节单元数据写入pDnAddr指向的字节单元</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 寒假考核 </tag>
            
            <tag> 2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>re1</title>
      <link href="/2023/01/20/re1/"/>
      <url>/2023/01/20/re1/</url>
      
        <content type="html"><![CDATA[<h1 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h1><h5 id="flag-w3lCOm3-7O-redrOck-5re"><a href="#flag-w3lCOm3-7O-redrOck-5re" class="headerlink" title="flag{w3lCOm3_7O_redrOck_5re}"></a>flag{w3lCOm3_7O_redrOck_5re}</h5><p>先F5查看返汇编的C代码，观察main函数，发现flag是由part1、part2、part3三部分组合而成，即v9、v7、v5的值</p><p><img src="https://user-images.githubusercontent.com/116374553/213494072-c90dd710-42db-4edd-a265-5146d98a0a03.png" alt=""></p><p>然后分步分析</p><h3 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h3><p>分析part1部分函数，大概就是整型数组v9强制转换为char类型，以字符串输入。之后就会用memcmp来判断，Buf1和aZ7g2zmcmmlgdtl(z7G2zMCMmLGdtLJI\0)这个数组的0x12(18)位是否相同。由于之前对变量均进行了初始化，则函数sub_4011A0就是用来为Buf1数组赋值的。</p><p><img src="https://user-images.githubusercontent.com/116374553/213495358-17330ce6-31e1-4964-927f-6e93120937e0.png" alt=""></p><p>查看sub_4011A0函数</p><p><img src="https://user-images.githubusercontent.com/116374553/213497931-daa5bdf1-331b-4c9a-9e5a-54ccdc94aff8.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/213498173-23d8bf24-ab88-4fd4-b53b-28246f363154.png" alt=""></p><p>观察该函数将a1(v9的地址)赋给了v6，a2(v9 + strlen(v9) + 1 - (v9 + 1) 即为strlen（v9))赋给了v7，将&amp;a1[a2]的地址赋给了v4。之后该函数以v4 - v6作为主线，将其与其他的数做出对比，从而进行不同的运算。其中一个大的if语句，所报包含的两个分支中，都提及了将61赋给某个地址，有ASCII码表可知，该字符为‘=’，并且两个分支的等号数还有所不同，由此hi产生一定的矛盾，为了避免这一矛盾，就只有跳过该if语句。然后与Buf1比较的数组，一共有16位，而while语句刚好每一次循环会给4个地址赋值。从而可以清晰的明白该函数是如何给Buf1赋值的。首先经过是4次循环给Buf1赋了16个字符，跳出循环后，17位赋值为0即‘\0’(字符串的结束符号)——从而达到为Buf1赋值的效果。</p><p>计算时出现了一个数组byte_404048,点击该字符后，右键db后的数字，点击Array，再点击OK，即可形成数组形式</p><p><img src="https://user-images.githubusercontent.com/116374553/213506704-2201f862-5ba4-4798-b275-8b1f8e9989c2.png" alt=""></p><p>得到数组</p><p>5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11, 20, 21, 22, 23, 16, 17, 18, 19, 28, 29, 30, 49,50, 51, 60, 61, 84, 85, 86, 87, 80, 81, 82, 83, 92, 93, 79, 75, 37, 38, 39, 32, 33, 34, 35, 44, 45,46, 47, 40, 41, 42, 43, 52, 53, 54, 55, 48, 62</p><p><img src="https://user-images.githubusercontent.com/116374553/213507600-d713a1ed-dbc0-43c4-9c14-dd442b7558e3.png" alt=""></p><p>然后用脚本对该数组，进行以上的运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">byte_404048 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">49</span>,<span class="number">50</span>, <span class="number">51</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">79</span>, <span class="number">75</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">44</span>, <span class="number">45</span>,<span class="number">46</span>, <span class="number">47</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">48</span>, <span class="number">62</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;byte_404048 = [&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    byte_404048[i] ^= <span class="number">0x64</span></span><br><span class="line">    <span class="built_in">print</span>(byte_404048[i],<span class="string">&quot;,&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">63</span>):</span><br><span class="line">        <span class="built_in">print</span>(byte_404048[i],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;]&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到新的数组</p><p><img src="https://user-images.githubusercontent.com/116374553/213513316-13e433c0-6620-456e-a090-775852afd0ce.png" alt=""></p><p>通过以下代码计算v6的值，即输入的v9的值。以一次while循环来编写的脚本，其中？，代表byte_404048数组的偏移位置。通过“z7G2zMCMmLGdtLJI\0”数组，一次给每个地址赋值，得出它们的ascii码值，到数组byte中去寻找它们的位置，减去一，就分别作为m、n、k、h的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> v6 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">102</span>,<span class="number">103</span>):</span><br><span class="line">    m = v6 &gt;&gt; <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(m == ?):</span><br><span class="line">        <span class="keyword">for</span> v61 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">112</span>):</span><br><span class="line">            n = (v61 &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * v6) &amp; <span class="number">48</span></span><br><span class="line">            <span class="keyword">if</span>(n == ?):</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> v62 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>,<span class="number">112</span>):</span><br><span class="line">                    h = (v62 &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * v61) &amp; <span class="number">60</span></span><br><span class="line">                    k = v62 &amp; <span class="number">63</span></span><br><span class="line">                    <span class="keyword">if</span>(k == ?&amp;h == ?):</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;v6=&quot;</span>,v6)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;v61=&quot;</span>,v61)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;v62=&quot;</span>,v62)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/213514875-f2e60a16-f485-46c8-9b94-c456c76c4911.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/213514889-c02eccb9-3131-4601-bc44-3965a25145bd.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/213514904-789a3ed5-952f-4e84-a511-0984c3e7979b.png" alt=""></p><p><img src="https://user-images.githubusercontent.com/116374553/213514916-8ccdfaa4-0f74-4e6b-9c5c-8685108f6fa0.png" alt=""></p><p>将这些数字从上到下排序，并对照ascii码表，最终得出</p><p>part1 =flag{w3lCOm3</p><p><img src="https://user-images.githubusercontent.com/116374553/213517319-5a9e1820-a1dd-4917-88f1-9aed5c4bdc69.png" alt=""></p><h3 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h3><p>观察该部分，是将v5进行一系列的运算后，将它的值与qword_404040(2977652789)的值作比较</p><p><img src="https://user-images.githubusercontent.com/116374553/213516435-439d13b4-2e5d-4de7-8a6f-8a0a8234c1c7.png" alt=""></p><p>查看函数sub_401490编写脚本</p><p><img src="https://user-images.githubusercontent.com/116374553/213516449-e9532f59-d2d4-425a-be47-e10c3937f51b.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> a11 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> a12 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> a13 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>):</span><br><span class="line">                <span class="keyword">if</span>(((a13 ^ <span class="number">0xCC</span>) &lt;&lt; <span class="number">24</span>) | ((a12 ^ <span class="number">0x1E</span>) &lt;&lt; <span class="number">16</span>) | ((a11 ^ <span class="number">0x12</span>) &lt;&lt; <span class="number">8</span>) | a1 == <span class="number">2977652789</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;a1 =&quot;</span>,a1,<span class="string">&quot; a11=&quot;</span>,a11, <span class="string">&quot;a12=&quot;</span>,a12,<span class="string">&quot; a13=&quot;</span>,a13)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/116374553/213517305-852ca2d3-b9df-4a73-b1a4-0724a71a39b1.png" alt=""></p><p>对照ASCII 码表得出它们所对应的字符</p><p>part3 = 5re}</p><h3 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h3><p>part2和part1相似，此处对输入的v7进行了操作，然后与unk_404018(165, 205, 181, 165, 136, 159, 158, 136, 181, 153, 145, 165)进行了比较</p><p><img src="https://user-images.githubusercontent.com/116374553/213518091-11afc5bc-171a-4b47-8add-5cac94bf00d7.png" alt=""></p><p>查看loc_401410函数，发现该函数并没有成功的反汇编</p><p><img src="https://user-images.githubusercontent.com/116374553/213518107-0f1dba82-e2de-4c75-a3cb-c05fddfb8284.png" alt=""></p><p>然后选中0040141D，右键选择undefine,然后选中其余的红色部分，点击P，即可将该函数返汇编。</p><p><img src="https://user-images.githubusercontent.com/116374553/213519489-7d5960ca-4db0-4852-8746-b32bc36a8c21.png" alt=""></p><p>其中dword_40403C为204，但是通过计算发现当其为204时算出的结果非常的奇怪。于是通过x32dbg来寻找它的值。通过字符串搜索找到main函数的位置，并对照IDA花指令在其中找到花指令干扰的位置(call re1.1D1410),进入该函数</p><p><img src="https://user-images.githubusercontent.com/116374553/216104120-147bc69b-e42f-43e4-85bc-ca03785d7b14.png" alt=""></p><p>将右键call指令出，点击二进制然后编辑，将E8改为90，将该语句填充为nop</p><p><img src="https://user-images.githubusercontent.com/116374553/216104129-eff17dd3-527d-4f96-a164-ceb068ad865b.png" alt=""></p><p>观察该函数，发现一个定值</p><p><img src="https://user-images.githubusercontent.com/116374553/216104915-ceb73a44-e580-41ea-934e-7b0ead833fef.png" alt=""></p><p>通过Ctrl+G，搜索相应的地址0x001D403C</p><p>如果直接搜索地址，其值依然为CC，如果点击x32dbg上方的右箭头先运行一下，则其值会变为FA</p><p><img src="https://user-images.githubusercontent.com/116374553/216107859-65e0cfb9-1cb5-4c93-b43f-9f2d2160b34a.png" alt=""></p><p>得到实际的dword_40403C值为250。编写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">unk_404018 = [<span class="number">165</span>, <span class="number">205</span>, <span class="number">181</span>, <span class="number">165</span>, <span class="number">136</span>, <span class="number">159</span>, <span class="number">158</span>, <span class="number">136</span>, <span class="number">181</span>, <span class="number">153</span>, <span class="number">145</span>, <span class="number">165</span>]</span><br><span class="line">a1 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a1 = [&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> unk_404018:</span><br><span class="line">        a1[k] = i ^ <span class="number">250</span></span><br><span class="line">        <span class="keyword">if</span>(k &lt; <span class="number">11</span>):</span><br><span class="line">            <span class="built_in">print</span>(a1[k],<span class="string">&quot;,&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">11</span>):</span><br><span class="line">            <span class="built_in">print</span>(a1[k],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">part2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    part2 += <span class="built_in">chr</span>(a1[i])</span><br><span class="line"><span class="built_in">print</span>(part2)</span><br></pre></td></tr></table></figure><p>最终得到</p><p><img src="https://user-images.githubusercontent.com/116374553/216099162-3e2ece70-3bfc-4712-9645-1f13ead17f20.png" alt=""></p><p>part2 = <em>7O_redrOck</em></p><p><img src="https://user-images.githubusercontent.com/116374553/213524361-96dd5a50-25bd-4204-b71a-5dda0aeed522.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 寒假考核 </tag>
            
            <tag> 2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>re2</title>
      <link href="/2023/01/20/re2/"/>
      <url>/2023/01/20/re2/</url>
      
        <content type="html"><![CDATA[<h1 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h1><h5 id="flag-6864334449019276034"><a href="#flag-6864334449019276034" class="headerlink" title="flag{6864334449019276034}"></a>flag{6864334449019276034}</h5><p>首先点击re2，发现并没有可输入的地方，只有一段文字叙述。</p><p>用IDA(F5),进行函数反汇编，发现main函数中CheckDBG函数返回值为1，使得if语句成立，导致程序退出。</p><p><img src="https://user-images.githubusercontent.com/116374553/221391652-68dc778f-f4a2-4815-83e2-9bffd9341379.png" alt=""></p><p>观察CheckDBG函数，发现if else语句，分别返回了v和1，而程序执行了else语句中的内容，返回了1，因此为了摆脱这一现状，就需要将返回的1改为0.</p><p>IDA左侧点击CheckDBG函数，观察汇编语句，其中mov eax, 1是else语句的执行语句</p><p><img src="https://user-images.githubusercontent.com/116374553/216019338-02011ac4-7a09-46c7-ad27-908117a53f87.png" alt=""></p><p>打开x32dbg,查找该函数，点击mov eax, 1指令，将0x1修改0x0然后保存函数</p><p><img src="https://user-images.githubusercontent.com/116374553/216022369-5bb919ac-569a-4d86-adcf-273607e24f99.png" alt=""></p><p>再次运行即可</p><p><img src="https://user-images.githubusercontent.com/116374553/216022706-2ff7f089-4335-41c5-b882-17e60670b9e6.png" alt=""></p><p>然后总体观察主函数，发现是输入了一个数字，然后对数组query进行了赋值，之后再对它的的值进行判断，当if条件成立则会出现”Congratulations!! Welcome to xxxx”。</p><p>计算<em>(_DWORD </em>)&amp;query[4]（即从query[4]地址开始取四字节的内容）和<em>(_DWORD </em>)query的值，分别为<em>(_DWORD </em>)query = 1382311250，<em>(_DWORD </em>)&amp;query[4] = 7037744</p><p>将他们均转换为十六进制数，再对照ASCII码表。最终会得到这样的一串字符：“RedR0ck”</p><p>即query[8] = {‘R’,’e’,’d’,’R’,‘0’,’c’,’k’,0}</p><p><img src="https://user-images.githubusercontent.com/116374553/221392308-53b787f4-a91c-4244-918e-71b1e8b42d64.png" alt=""></p><p>此处ror<unsigned char>参数r的值在动态调试中的实际值为3</p><p><img src="https://user-images.githubusercontent.com/116374553/216037713-f19958fa-8a1b-4aa3-aead-273744fd6ff2.png" alt=""></p><p>根据ror<unsigned char>函数，编写代码得到v3所有可能的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> m1, m2;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> m, mm;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> r;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">0</span>;v &lt; <span class="number">256</span>; v++)</span><br><span class="line">&#123;</span><br><span class="line">m = v &lt;&lt; <span class="number">5</span>;</span><br><span class="line">m1 = (<span class="type">unsigned</span> <span class="type">char</span>)m;</span><br><span class="line">mm = v &gt;&gt; <span class="number">3</span>;</span><br><span class="line">m2 = (<span class="type">unsigned</span> <span class="type">char</span>)mm;</span><br><span class="line">r = m1 | m2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;r[%d] = %d\n&quot;</span>, v, r);<span class="comment">//v代表v7的值</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后table数组会对query数组重新的赋值。观察table的赋值方式，会发现其中有一个LCG函数(线性同余方法)——产生伪随机数</p><p><img src="https://user-images.githubusercontent.com/116374553/216040699-5eac34d8-b860-4069-bc82-731419bb3911.png" alt=""></p><p>通过动态调试，获取所有t的值</p><p>t = [150,39,156,100,65,91,103,97,97,233,25,182,90,21,70,108,118,211,253,209,176,7,156,62,210,170,134,20,7,242,121,61,190,44,76,50,130,82,37,2,136,238,132,46,211,36,104,56,18,46,181,115,129,2,234,236,108,216,183,251,112,233,135,150,111,75,160,145,171,102,238,184,172,176,227,141,98,112,225,83,205,16,60,236,0,86,123,47,226,89,37,69,98,137,68,197,15,140,157,233,28,0,177,173,82,117,161,112,212,21,136,103,85,174,74,254,238,153,240,238,101,35,199,5,187,195,150,186,7,32,131,85,188,49,242,157,228,99,125,88,134,33,24,144,36,82,183,153,56,61,154,160,152,139,196,246,156,26,245,15,169,189,217,184,115,169,188,29,54,98,191,5,138,87,16,76,33,150,152,140,221,125,118,139,224,199,48,199,34,56,225,74,167,99,173,189,172,83,209,133,161,239,177,67,16,56,229,183,2,70,187,100,65,71,186,250,136,179,104,14,151,13,250,184,135,230,122,35,132,19,165,19,101,103,233,187,134,207,32,155,253,65,34,211,68,118,83,226,89,65,119,139,159,236,60,73]</p><p>然后编写代码得到table数组的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tt = [<span class="number">150</span>,<span class="number">39</span>,<span class="number">156</span>,<span class="number">100</span>,<span class="number">65</span>,<span class="number">91</span>,<span class="number">103</span>,<span class="number">97</span>,<span class="number">97</span>,<span class="number">233</span>,<span class="number">25</span>,<span class="number">182</span>,<span class="number">90</span>,<span class="number">21</span>,<span class="number">70</span>,<span class="number">108</span>,<span class="number">118</span>,<span class="number">211</span>,<span class="number">253</span>,<span class="number">209</span>,<span class="number">176</span>,<span class="number">7</span>,<span class="number">156</span>,<span class="number">62</span>,<span class="number">210</span>,<span class="number">170</span>,<span class="number">134</span>,<span class="number">20</span>,<span class="number">7</span>,<span class="number">242</span>,<span class="number">121</span>,<span class="number">61</span>,<span class="number">190</span>,<span class="number">44</span>,<span class="number">76</span>,<span class="number">50</span>,<span class="number">130</span>,<span class="number">82</span>,<span class="number">37</span>,<span class="number">2</span>,<span class="number">136</span>,<span class="number">238</span>,<span class="number">132</span>,<span class="number">46</span>,<span class="number">211</span>,<span class="number">36</span>,<span class="number">104</span>,<span class="number">56</span>,<span class="number">18</span>,<span class="number">46</span>,<span class="number">181</span>,<span class="number">115</span>,<span class="number">129</span>,<span class="number">2</span>,<span class="number">234</span>,<span class="number">236</span>,<span class="number">108</span>,<span class="number">216</span>,<span class="number">183</span>,<span class="number">251</span>,<span class="number">112</span>,<span class="number">233</span>,<span class="number">135</span>,<span class="number">150</span>,<span class="number">111</span>,<span class="number">75</span>,<span class="number">160</span>,<span class="number">145</span>,<span class="number">171</span>,<span class="number">102</span>,<span class="number">238</span>,<span class="number">184</span>,<span class="number">172</span>,<span class="number">176</span>,<span class="number">227</span>,<span class="number">141</span>,<span class="number">98</span>,<span class="number">112</span>,<span class="number">225</span>,<span class="number">83</span>,<span class="number">205</span>,<span class="number">16</span>,<span class="number">60</span>,<span class="number">236</span>,<span class="number">0</span>,<span class="number">86</span>,<span class="number">123</span>,<span class="number">47</span>,<span class="number">226</span>,<span class="number">89</span>,<span class="number">37</span>,<span class="number">69</span>,<span class="number">98</span>,<span class="number">137</span>,<span class="number">68</span>,<span class="number">197</span>,<span class="number">15</span>,<span class="number">140</span>,<span class="number">157</span>,<span class="number">233</span>,<span class="number">28</span>,<span class="number">0</span>,<span class="number">177</span>,<span class="number">173</span>,<span class="number">82</span>,<span class="number">117</span>,<span class="number">161</span>,<span class="number">112</span>,<span class="number">212</span>,<span class="number">21</span>,<span class="number">136</span>,<span class="number">103</span>,<span class="number">85</span>,<span class="number">174</span>,<span class="number">74</span>,<span class="number">254</span>,<span class="number">238</span>,<span class="number">153</span>,<span class="number">240</span>,<span class="number">238</span>,<span class="number">101</span>,<span class="number">35</span>,<span class="number">199</span>,<span class="number">5</span>,<span class="number">187</span>,<span class="number">195</span>,<span class="number">150</span>,<span class="number">186</span>,<span class="number">7</span>,<span class="number">32</span>,<span class="number">131</span>,<span class="number">85</span>,<span class="number">188</span>,<span class="number">49</span>,<span class="number">242</span>,<span class="number">157</span>,<span class="number">228</span>,<span class="number">99</span>,<span class="number">125</span>,<span class="number">88</span>,<span class="number">134</span>,<span class="number">33</span>,<span class="number">24</span>,<span class="number">144</span>,<span class="number">36</span>,<span class="number">82</span>,<span class="number">183</span>,<span class="number">153</span>,<span class="number">56</span>,<span class="number">61</span>,<span class="number">154</span>,<span class="number">160</span>,<span class="number">152</span>,<span class="number">139</span>,<span class="number">196</span>,<span class="number">246</span>,<span class="number">156</span>,<span class="number">26</span>,<span class="number">245</span>,<span class="number">15</span>,<span class="number">169</span>,<span class="number">189</span>,<span class="number">217</span>,<span class="number">184</span>,<span class="number">115</span>,<span class="number">169</span>,<span class="number">188</span>,<span class="number">29</span>,<span class="number">54</span>,<span class="number">98</span>,<span class="number">191</span>,<span class="number">5</span>,<span class="number">138</span>,<span class="number">87</span>,<span class="number">16</span>,<span class="number">76</span>,<span class="number">33</span>,<span class="number">150</span>,<span class="number">152</span>,<span class="number">140</span>,<span class="number">221</span>,<span class="number">125</span>,<span class="number">118</span>,<span class="number">139</span>,<span class="number">224</span>,<span class="number">199</span>,<span class="number">48</span>,<span class="number">199</span>,<span class="number">34</span>,<span class="number">56</span>,<span class="number">225</span>,<span class="number">74</span>,<span class="number">167</span>,<span class="number">99</span>,<span class="number">173</span>,<span class="number">189</span>,<span class="number">172</span>,<span class="number">83</span>,<span class="number">209</span>,<span class="number">133</span>,<span class="number">161</span>,<span class="number">239</span>,<span class="number">177</span>,<span class="number">67</span>,<span class="number">16</span>,<span class="number">56</span>,<span class="number">229</span>,<span class="number">183</span>,<span class="number">2</span>,<span class="number">70</span>,<span class="number">187</span>,<span class="number">100</span>,<span class="number">65</span>,<span class="number">71</span>,<span class="number">186</span>,<span class="number">250</span>,<span class="number">136</span>,<span class="number">179</span>,<span class="number">104</span>,<span class="number">14</span>,<span class="number">151</span>,<span class="number">13</span>,<span class="number">250</span>,<span class="number">184</span>,<span class="number">135</span>,<span class="number">230</span>,<span class="number">122</span>,<span class="number">35</span>,<span class="number">132</span>,<span class="number">19</span>,<span class="number">165</span>,<span class="number">19</span>,<span class="number">101</span>,<span class="number">103</span>,<span class="number">233</span>,<span class="number">187</span>,<span class="number">134</span>,<span class="number">207</span>,<span class="number">32</span>,<span class="number">155</span>,<span class="number">253</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">211</span>,<span class="number">68</span>,<span class="number">118</span>,<span class="number">83</span>,<span class="number">226</span>,<span class="number">89</span>,<span class="number">65</span>,<span class="number">119</span>,<span class="number">139</span>,<span class="number">159</span>,<span class="number">236</span>,<span class="number">60</span>,<span class="number">73</span>]</span><br><span class="line">table = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    table[i] = i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    t = tt[j]</span><br><span class="line">    <span class="keyword">if</span>(j != t):</span><br><span class="line">        table[j] ^= table[t]</span><br><span class="line">        table[t] ^= table[j]</span><br><span class="line">        table[j] ^= table[t]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;table[&quot;</span>,m,<span class="string">&quot;] =&quot;</span>,table[m])</span><br></pre></td></tr></table></figure><p>根据得到的r数组和table数组，我们可以得到赋值前的query数组的值</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th>R</th><th>e</th><th>d</th><th>R</th><th>0</th><th>c</th><th>k</th><th>/0</th></tr></thead><tbody><tr><td style="text-align:left"><strong>v3</strong></td><td>38</td><td>0</td><td>3</td><td>38</td><td>18</td><td>103</td><td>131</td><td>63</td></tr><tr><td style="text-align:left"><strong>query1</strong></td><td>49</td><td>0</td><td>24</td><td>49</td><td>144</td><td>59</td><td>28</td><td>249</td></tr><tr><td style="text-align:left"><strong>query2</strong></td><td>82</td><td>101</td><td>100</td><td>82</td><td>48</td><td>99</td><td>107</td><td>0</td></tr></tbody></table></div><p>往上一个for循环</p><p><img src="https://user-images.githubusercontent.com/116374553/216045993-cb7e3a83-9b88-4ef0-903f-8649f523bf0a.png" alt=""></p><p>对query数组进行了赋值,通过分析GetOddBit和GetEvenBit函数，得到以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> v1, v2, v3, v4, v5, v6, v7, v8, i;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> v11, v21, v31, v41, v51, v61, v71, v81;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> m = <span class="number">0</span>;m &lt;= <span class="number">1000000</span>; m++)</span><br><span class="line">&#123;</span><br><span class="line">i = m;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//query[k + 4]   GetEvenBit(v11)</span></span><br><span class="line">v1 = <span class="number">0</span> + (((<span class="number">1</span> &lt;&lt; <span class="number">0</span>) &amp; i) &gt;&gt; (<span class="number">0</span>));</span><br><span class="line">v2 = v1 + (((<span class="number">1</span> &lt;&lt; <span class="number">2</span>) &amp; i) &gt;&gt; (<span class="number">1</span>));</span><br><span class="line">v3 = v2 + (((<span class="number">1</span> &lt;&lt; <span class="number">4</span>) &amp; i) &gt;&gt; (<span class="number">2</span>));</span><br><span class="line">v8 = v3 + (((<span class="number">1</span> &lt;&lt; <span class="number">6</span>) &amp; i) &gt;&gt; (<span class="number">3</span>));</span><br><span class="line">v5 = v8 + (((<span class="number">1</span> &lt;&lt; <span class="number">8</span>) &amp; i) &gt;&gt; (<span class="number">4</span>));</span><br><span class="line">v6 = v5 + (((<span class="number">1</span> &lt;&lt; <span class="number">10</span>) &amp; i) &gt;&gt; (<span class="number">5</span>));</span><br><span class="line">v7 = v6 + (((<span class="number">1</span> &lt;&lt; <span class="number">12</span>) &amp; i) &gt;&gt; (<span class="number">6</span>));</span><br><span class="line">v4 = v7 + (((<span class="number">1</span> &lt;&lt; <span class="number">14</span>) &amp; i) &gt;&gt; (<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//query[k]   GetOddBit(v11)</span></span><br><span class="line">v11 = <span class="number">0</span> + (((<span class="number">1</span> &lt;&lt; <span class="number">1</span>) &amp; i) &gt;&gt; (<span class="number">1</span>));</span><br><span class="line">v21 = v11 + (((<span class="number">1</span> &lt;&lt; <span class="number">3</span>) &amp; i) &gt;&gt; (<span class="number">2</span>));</span><br><span class="line">v31 = v21 + (((<span class="number">1</span> &lt;&lt; <span class="number">5</span>) &amp; i) &gt;&gt; (<span class="number">3</span>));</span><br><span class="line">v81 = v31 + (((<span class="number">1</span> &lt;&lt; <span class="number">7</span>) &amp; i) &gt;&gt; (<span class="number">4</span>));</span><br><span class="line">v51 = v81 + (((<span class="number">1</span> &lt;&lt; <span class="number">9</span>) &amp; i) &gt;&gt; (<span class="number">5</span>));</span><br><span class="line">v61 = v51 + (((<span class="number">1</span> &lt;&lt; <span class="number">11</span>) &amp; i) &gt;&gt; (<span class="number">6</span>));</span><br><span class="line">v71 = v61 + (((<span class="number">1</span> &lt;&lt; <span class="number">13</span>) &amp; i) &gt;&gt; (<span class="number">7</span>));</span><br><span class="line">v41 = v71 + (((<span class="number">1</span> &lt;&lt; <span class="number">15</span>) &amp; i) &gt;&gt; (<span class="number">8</span>));</span><br><span class="line"><span class="keyword">if</span> (v4 == <span class="number">249</span>&amp;&amp;v41 == <span class="number">49</span>)<span class="comment">//替换query[k + 4]和query[k]的值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;v4 = %lld,v41 = %lld,m = %lld\n&quot;</span>, v4,v41, m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">v11 = v21 = v31 = v41 = v51 = v61 = v71 = v81 = <span class="number">0</span>;</span><br><span class="line">v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处从query[3],query[7]开始入手逐渐缩小v11的范围</p><h6 id="①query-3-query-7-："><a href="#①query-3-query-7-：" class="headerlink" title="①query[3],query[7] ："></a><strong>①</strong>query[3],query[7] ：</h6><p>​                                    for (long long m = 0;m &lt;= 100000; m++)</p><p>​                                     if (v4 == 249&amp;&amp;v41 == 49)</p><p><img src="https://user-images.githubusercontent.com/116374553/216048752-46d0621f-3c0f-44e7-a98c-91216032a455.png" alt=""></p><p>24387~24388</p><p>左偏移48位</p><p>6864330257042767872~6864611732019478528</p><p>右偏移32位</p><p>1598226432~1598291968</p><h6 id="②query-2-query-6-："><a href="#②query-2-query-6-：" class="headerlink" title="②query[2],query[6]："></a>②query[2],query[6]：</h6><p>​                                     for(long long m = 1598226432;m &lt;= 1598291968; m++)</p><p>​                                     if (v4 == 28&amp;&amp;v41 == 24)</p><p><img src="https://user-images.githubusercontent.com/116374553/216050774-159eb16f-48a5-431d-a6e1-f8ded606c52b.png" alt=""></p><p>1598227408~1598227409</p><p>左偏移32位</p><p>6864334448930848768~6864334453225816064</p><p>右偏移16位</p><p>104741431410688~104741431476224</p><h6 id="③query-1-query-5"><a href="#③query-1-query-5" class="headerlink" title="③query[1]~query[5]:"></a>③query[1]~query[5]:</h6><p>​                                     for(long long m = 104741431410688;m &lt;= 104741431476224; m++)</p><p>​                                     if (v4 == 59&amp;&amp;v41 == 0)</p><p><img src="https://user-images.githubusercontent.com/116374553/216052141-22441ecc-7a7e-4dfb-b8ac-3622c447c150.png" alt=""></p><p>同理可得</p><p>6864334449019256832~6864334449019322368</p><h6 id="④query-0-query-4"><a href="#④query-0-query-4" class="headerlink" title="④query[0]~query[4]:"></a>④query[0]~query[4]:</h6><p>​                                       for (long long m = 6864334449019256832;m &lt;= 6864334449019322368; m++)</p><p>​                                       if (v4 == 144&amp;&amp;v41 == 49)</p><p><img src="https://user-images.githubusercontent.com/116374553/216052791-f9414ded-2214-4761-a6ff-08de191040fb.png" alt=""></p><p>此时m的值即var的值6864334449019276034</p><p><img src="https://user-images.githubusercontent.com/116374553/216053161-d876aaa0-9352-4c7a-96af-64ded2983a6e.png" alt=""></p><p>即flag{6864334449019276034}</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 寒假考核 </tag>
            
            <tag> 2023 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/about.html"/>
      <url>/about/about.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/progress_bar.css"/>
      <url>/css/progress_bar.css</url>
      
        <content type="html"><![CDATA[.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 4px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 7rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    /* linear-gradient(to right, #3494e6, #ec6ead) */    background: linear-gradient(to right, #43cea2, #3866ca);    animation: gradient 2s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/readPercent.css"/>
      <url>/css/readPercent.css</url>
      
        <content type="html"><![CDATA[/* 返回顶部 */button#go-up #percent {    display: none;    font-weight: bold;    font-size: 15px !important;}button#go-up span {    font-size: 12px!important;    margin-right: -1px;}/* 鼠标滑动到按钮上时显示返回顶部图标 */button#go-up:hover i {    display: block !important;}button#go-up:hover #percent {    display: none !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.6);  --trans-dark: rgba(25, 25, 25, 0.5);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  @font-face {    /* 为载入的字体取名字(随意) */    font-family: 'YSHST';    /* 字体文件地址(相对或者绝对路径都可以) */    src: url(/font/YSHaoShenTi.ttf);    /* 定义加粗样式(加粗多少) */    font-weight: normal;    /* 定义字体样式(斜体/非斜体) */    font-style: normal;    /* 定义显示样式 */    font-display: block;  }/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(57, 197, 187);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}/* 头像呼吸灯 */[data-theme="light"] .avatar-img {  animation: huxi_light 4s ease-in-out infinite;}[data-theme="dark"] .avatar-img {  animation: huxi_dark 4s ease-in-out infinite;}@keyframes huxi_light {  0% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }  50% {    box-shadow: 0px 0px 5px 5px #e9f5fa;  }  100% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }}@keyframes huxi_dark {  0% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }  50% {    box-shadow: 0px 0px 5px 5px #39c5bb;  }  100% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }}.card-info-avatar .author-status-box {  position: absolute;  bottom: 0;  left: calc(100% - 28px);  width: 28px;  height: 28px;  border: 1px solid #d0d7de;  border-radius: 2em;  background-color: #f8f8f8f8;  transition: 0.4s;  overflow: hidden;}[data-theme="dark"] .card-info-avatar .author-status-box {  background-color: #222222f2;  border: 1px solid #5c6060;}.card-info-avatar .author-status-box .author-status {  display: flex;  align-items: center;  justify-content: center;  height: 28px;  padding: 0 5px;}.card-info-avatar .author-status-box:hover {  width: 105px;}.card-info-avatar .author-status-box:hover .author-status span {  width: 105px;  margin-left: 4px;}.card-info-avatar .author-status-box .author-status span {  width: 0;  font-size: 12px;  height: 100%;  overflow: hidden;  text-overflow: ellipsis;  white-space: nowrap;  transition: 0.4s;}.card-widget .card-info-avatar {  display: inline-block;  position: relative;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.min.css"/>
      <url>/css/runtime.min.css</url>
      
        <content type="html"><![CDATA[div#runtime {    width: 180px;    margin: auto;    color: #fff;    padding-inline: 5px;    border-radius: 10px;    background-color: rgba(0, 0, 0, .7)}#workboard {    font-size: 12px}[data-theme=dark] div#runtime {    color: #28b4c8;    box-shadow: 0 0 5px rgba(28, 69, 218, .71);    animation: flashlight 1s linear infinite alternate}@-moz-keyframes flashlight {    from {        box-shadow: 0 0 5px #1478d2    }    to {        box-shadow: 0 0 2px #1478d2    }}@-webkit-keyframes flashlight {    from {        box-shadow: 0 0 5px #1478d2    }    to {        box-shadow: 0 0 2px #1478d2    }}@-o-keyframes flashlight {    from {        box-shadow: 0 0 5px #1478d2    }    to {        box-shadow: 0 0 2px #1478d2    }}@keyframes flashlight {    from {        box-shadow: 0 0 5px #1478d2    }    to {        box-shadow: 0 0 2px #1478d2    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/readPercent.js"/>
      <url>/js/readPercent.js</url>
      
        <content type="html"><![CDATA[window.onscroll = percent;// 执行函数// 页面百分比function percent() {    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度        result = Math.round(a / b * 100), // 计算百分比        up = document.querySelector("#go-up") // 获取按钮    if (result <= 95) {        up.childNodes[0].style.display = 'none'        up.childNodes[1].style.display = 'block'        up.childNodes[1].innerHTML = result;    } else {        up.childNodes[1].style.display = 'none'        up.childNodes[0].style.display = 'block'    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;    var n, e, i, h, t = .05, s = document.getElementById("universe"), o = !0, a = "180,184,240", r = "226,225,142", d = "226,225,224", c = []; function f() { n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute("width", n), s.setAttribute("height", e) } function u() { h.clearRect(0, 0, n, e); for (var t = c.length, i = 0; i < t; i++) { var s = c[i]; s.move(), s.fadeIn(), s.fadeOut(), s.draw() } } function y() { this.reset = function () { this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1) }, this.fadeIn = function () { this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do) }, this.fadeOut = function () { this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset())) }, this.draw = function () { if (h.beginPath(), this.giant) h.fillStyle = "rgba(" + a + "," + this.opacity + ")", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1); else if (this.comet) { h.fillStyle = "rgba(" + d + "," + this.opacity + ")", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1); for (var t = 0; t < 30; t++)h.fillStyle = "rgba(" + d + "," + (this.opacity - this.opacity / 20 * t) + ")", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill() } else h.fillStyle = "rgba(" + r + "," + this.opacity + ")", h.rect(this.x, this.y, this.r, this.r); h.closePath(), h.fill() }, this.move = function () { this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0) }, setTimeout(function () { o = !1 }, 50) } function m(t) { return Math.floor(1e3 * Math.random()) + 1 < 10 * t } function l(t, i) { return Math.random() * (i - t) + t } f(), window.addEventListener("resize", f, !1), function () { h = s.getContext("2d"); for (var t = 0; t < i; t++)c[t] = new y, c[t].reset(); u() }(), function t() { document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t) }()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.min.js"/>
      <url>/js/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now = new Date;function createtime() {    var grt = new Date("07/09/2024 00:00:00");    now.setTime(now.getTime() + 250);    var days = (now - grt) / 1e3 / 60 / 60 / 24, dnum = Math.floor(days), hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum, hnum = Math.floor(hours);    1 == String(hnum).length && (hnum = "0" + hnum); var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum, mnum = Math.floor(minutes);    1 == String(mnum).length && (mnum = "0" + mnum); var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum, snum = Math.round(seconds);    1 == String(snum).length && (snum = "0" + snum); let currentTimeHtml = "";     currentTimeHtml = hnum < 18 && hnum >= 9 ? `<img class='boardsign' src='/img/大哭悲伤表情.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站竟然已经苟活了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<img class='boardsign' src='/img/装可爱表情.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站竟然已经苟活了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = currentTimeHtml)} setInterval(() => { createtime() }, 250);]]></content>
      
    </entry>
    
    
  
</search>
